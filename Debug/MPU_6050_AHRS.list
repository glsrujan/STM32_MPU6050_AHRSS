
MPU_6050_AHRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800aab8  0800aab8  0001aab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af48  0800af48  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af50  0800af50  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800af58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  200001f0  0800b144  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  0800b144  00020854  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188c7  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e79  00000000  00000000  00038ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e0  00000000  00000000  0003b960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  0003ce40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a98e  00000000  00000000  0003e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010d8d  00000000  00000000  00068b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001085bc  00000000  00000000  000798c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00181e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b4  00000000  00000000  00181efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aaa0 	.word	0x0800aaa0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800aaa0 	.word	0x0800aaa0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09c      	sub	sp, #112	; 0x70
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80005fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80005fe:	ed87 1a03 	vstr	s2, [r7, #12]
 8000602:	edc7 1a02 	vstr	s3, [r7, #8]
 8000606:	ed87 2a01 	vstr	s4, [r7, #4]
 800060a:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800060e:	4bee      	ldr	r3, [pc, #952]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 8000610:	edd3 7a00 	vldr	s15, [r3]
 8000614:	eeb1 7a67 	vneg.f32	s14, s15
 8000618:	edd7 7a05 	vldr	s15, [r7, #20]
 800061c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000620:	4bea      	ldr	r3, [pc, #936]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 8000622:	edd3 6a00 	vldr	s13, [r3]
 8000626:	edd7 7a04 	vldr	s15, [r7, #16]
 800062a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800062e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000632:	4be7      	ldr	r3, [pc, #924]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 8000634:	edd3 6a00 	vldr	s13, [r3]
 8000638:	edd7 7a03 	vldr	s15, [r7, #12]
 800063c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000644:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000650:	4be0      	ldr	r3, [pc, #896]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 8000652:	ed93 7a00 	vldr	s14, [r3]
 8000656:	edd7 7a05 	vldr	s15, [r7, #20]
 800065a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800065e:	4bdb      	ldr	r3, [pc, #876]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 8000660:	edd3 6a00 	vldr	s13, [r3]
 8000664:	edd7 7a03 	vldr	s15, [r7, #12]
 8000668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800066c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000670:	4bd7      	ldr	r3, [pc, #860]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 8000672:	edd3 6a00 	vldr	s13, [r3]
 8000676:	edd7 7a04 	vldr	s15, [r7, #16]
 800067a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800067e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000682:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800068e:	4bd1      	ldr	r3, [pc, #836]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 8000690:	ed93 7a00 	vldr	s14, [r3]
 8000694:	edd7 7a04 	vldr	s15, [r7, #16]
 8000698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800069c:	4bca      	ldr	r3, [pc, #808]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 800069e:	edd3 6a00 	vldr	s13, [r3]
 80006a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006ae:	4bc8      	ldr	r3, [pc, #800]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 80006b0:	edd3 6a00 	vldr	s13, [r3]
 80006b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80006b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80006c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80006cc:	4bc1      	ldr	r3, [pc, #772]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 80006ce:	ed93 7a00 	vldr	s14, [r3]
 80006d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006da:	4bbb      	ldr	r3, [pc, #748]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 80006dc:	edd3 6a00 	vldr	s13, [r3]
 80006e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80006e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ec:	4bb7      	ldr	r3, [pc, #732]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 80006ee:	edd3 6a00 	vldr	s13, [r3]
 80006f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80006f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800070a:	edd7 7a02 	vldr	s15, [r7, #8]
 800070e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000716:	d10e      	bne.n	8000736 <MadgwickAHRSupdateIMU+0x146>
 8000718:	edd7 7a01 	vldr	s15, [r7, #4]
 800071c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000724:	d107      	bne.n	8000736 <MadgwickAHRSupdateIMU+0x146>
 8000726:	edd7 7a00 	vldr	s15, [r7]
 800072a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800072e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000732:	f000 81f3 	beq.w	8000b1c <MadgwickAHRSupdateIMU+0x52c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000736:	ed97 7a02 	vldr	s14, [r7, #8]
 800073a:	edd7 7a02 	vldr	s15, [r7, #8]
 800073e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000742:	edd7 6a01 	vldr	s13, [r7, #4]
 8000746:	edd7 7a01 	vldr	s15, [r7, #4]
 800074a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800074e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000752:	edd7 6a00 	vldr	s13, [r7]
 8000756:	edd7 7a00 	vldr	s15, [r7]
 800075a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800075e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000762:	eeb0 0a67 	vmov.f32	s0, s15
 8000766:	f000 fa75 	bl	8000c54 <invSqrt>
 800076a:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 800076e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000772:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800077a:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800077e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000782:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800078a:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 800078e:	ed97 7a00 	vldr	s14, [r7]
 8000792:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800079e:	4b8d      	ldr	r3, [pc, #564]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007a8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80007ac:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007b6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80007ba:	4b84      	ldr	r3, [pc, #528]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 80007bc:	edd3 7a00 	vldr	s15, [r3]
 80007c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007c4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80007c8:	4b81      	ldr	r3, [pc, #516]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80007d2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80007d6:	4b7f      	ldr	r3, [pc, #508]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80007e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007e4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80007e8:	4b77      	ldr	r3, [pc, #476]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 80007ea:	edd3 7a00 	vldr	s15, [r3]
 80007ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80007f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80007fa:	4b74      	ldr	r3, [pc, #464]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 80007fc:	edd3 7a00 	vldr	s15, [r3]
 8000800:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000808:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 800080c:	4b6e      	ldr	r3, [pc, #440]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800081a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 8000820:	edd3 7a00 	vldr	s15, [r3]
 8000824:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800082c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8000830:	4b68      	ldr	r3, [pc, #416]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 8000832:	ed93 7a00 	vldr	s14, [r3]
 8000836:	4b67      	ldr	r3, [pc, #412]	; (80009d4 <MadgwickAHRSupdateIMU+0x3e4>)
 8000838:	edd3 7a00 	vldr	s15, [r3]
 800083c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000840:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8000844:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 8000846:	ed93 7a00 	vldr	s14, [r3]
 800084a:	4b5f      	ldr	r3, [pc, #380]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 800084c:	edd3 7a00 	vldr	s15, [r3]
 8000850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000854:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8000858:	4b5c      	ldr	r3, [pc, #368]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 800085a:	ed93 7a00 	vldr	s14, [r3]
 800085e:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 8000860:	edd3 7a00 	vldr	s15, [r3]
 8000864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000868:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 800086c:	4b58      	ldr	r3, [pc, #352]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 800086e:	ed93 7a00 	vldr	s14, [r3]
 8000872:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <MadgwickAHRSupdateIMU+0x3e0>)
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800087c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8000880:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000884:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800088c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000890:	edd7 7a02 	vldr	s15, [r7, #8]
 8000894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800089c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80008a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80008a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ac:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80008b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80008c0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80008c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008cc:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80008d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80008d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80008e0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80008e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MadgwickAHRSupdateIMU+0x3d8>)
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80008f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f6:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80008fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80008fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000906:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800090a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800090e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000912:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800091a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800091e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8000922:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000926:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800092a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800092e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8000932:	edd7 7a00 	vldr	s15, [r7]
 8000936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800093a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800093e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8000942:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000946:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800094a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <MadgwickAHRSupdateIMU+0x3dc>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800095c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000960:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000964:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000968:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800096c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000978:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800097c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000988:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800098c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000990:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000994:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800099c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80009a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80009a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009b0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80009b4:	edd7 7a00 	vldr	s15, [r7]
 80009b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c0:	edc7 7a07 	vstr	s15, [r7, #28]
 80009c4:	e008      	b.n	80009d8 <MadgwickAHRSupdateIMU+0x3e8>
 80009c6:	bf00      	nop
 80009c8:	2000020c 	.word	0x2000020c
 80009cc:	20000210 	.word	0x20000210
 80009d0:	20000214 	.word	0x20000214
 80009d4:	20000004 	.word	0x20000004
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80009d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80009dc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009e4:	4b95      	ldr	r3, [pc, #596]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 80009e6:	edd3 7a00 	vldr	s15, [r3]
 80009ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ee:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80009f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000a02:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000a06:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000a0a:	4b8c      	ldr	r3, [pc, #560]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000a0c:	edd3 7a00 	vldr	s15, [r3]
 8000a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a18:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8000a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a28:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8000a2c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a38:	edd7 6a08 	vldr	s13, [r7, #32]
 8000a3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8000a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a58:	edd7 6a06 	vldr	s13, [r7, #24]
 8000a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a68:	eeb0 0a67 	vmov.f32	s0, s15
 8000a6c:	f000 f8f2 	bl	8000c54 <invSqrt>
 8000a70:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8000a74:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a78:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8000a84:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a88:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a90:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8000a94:	ed97 7a07 	vldr	s14, [r7, #28]
 8000a98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa0:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8000aa4:	ed97 7a06 	vldr	s14, [r7, #24]
 8000aa8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8000ab4:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <MadgwickAHRSupdateIMU+0x650>)
 8000ab6:	ed93 7a00 	vldr	s14, [r3]
 8000aba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8000ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aca:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <MadgwickAHRSupdateIMU+0x650>)
 8000ad0:	ed93 7a00 	vldr	s14, [r3]
 8000ad4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8000ae8:	4b55      	ldr	r3, [pc, #340]	; (8000c40 <MadgwickAHRSupdateIMU+0x650>)
 8000aea:	ed93 7a00 	vldr	s14, [r3]
 8000aee:	edd7 7a07 	vldr	s15, [r7, #28]
 8000af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af6:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8000b02:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <MadgwickAHRSupdateIMU+0x650>)
 8000b04:	ed93 7a00 	vldr	s14, [r3]
 8000b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8000b1c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000b20:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000c44 <MadgwickAHRSupdateIMU+0x654>
 8000b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b28:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000b2a:	edd3 7a00 	vldr	s15, [r3]
 8000b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000b34:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8000b38:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000b3c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000c44 <MadgwickAHRSupdateIMU+0x654>
 8000b40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b44:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000b46:	edd3 7a00 	vldr	s15, [r3]
 8000b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000b50:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8000b54:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000b58:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000c44 <MadgwickAHRSupdateIMU+0x654>
 8000b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b60:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000b62:	edd3 7a00 	vldr	s15, [r3]
 8000b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000b6c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8000b70:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000b74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000c44 <MadgwickAHRSupdateIMU+0x654>
 8000b78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000b7e:	edd3 7a00 	vldr	s15, [r3]
 8000b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000b88:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000b8e:	ed93 7a00 	vldr	s14, [r3]
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000b9e:	edd3 6a00 	vldr	s13, [r3]
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000ba4:	edd3 7a00 	vldr	s15, [r3]
 8000ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000bb2:	edd3 6a00 	vldr	s13, [r3]
 8000bb6:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000bb8:	edd3 7a00 	vldr	s15, [r3]
 8000bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000bc6:	edd3 6a00 	vldr	s13, [r3]
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000bcc:	edd3 7a00 	vldr	s15, [r3]
 8000bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f000 f83a 	bl	8000c54 <invSqrt>
 8000be0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000be6:	ed93 7a00 	vldr	s14, [r3]
 8000bea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MadgwickAHRSupdateIMU+0x658>)
 8000bf4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000bfa:	ed93 7a00 	vldr	s14, [r3]
 8000bfe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MadgwickAHRSupdateIMU+0x65c>)
 8000c08:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000c0e:	ed93 7a00 	vldr	s14, [r3]
 8000c12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MadgwickAHRSupdateIMU+0x660>)
 8000c1c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000c22:	ed93 7a00 	vldr	s14, [r3]
 8000c26:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c2e:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <MadgwickAHRSupdateIMU+0x64c>)
 8000c30:	edc3 7a00 	vstr	s15, [r3]
}
 8000c34:	bf00      	nop
 8000c36:	3770      	adds	r7, #112	; 0x70
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000214 	.word	0x20000214
 8000c40:	20000000 	.word	0x20000000
 8000c44:	3b03126f 	.word	0x3b03126f
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	2000020c 	.word	0x2000020c
 8000c50:	20000210 	.word	0x20000210

08000c54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000c5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	105a      	asrs	r2, r3, #1
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <invSqrt+0x74>)
 8000c80:	1a9b      	subs	r3, r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000c8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ca8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	ee07 3a90 	vmov	s15, r3
}
 8000cba:	eeb0 0a67 	vmov.f32	s0, s15
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	5f3759df 	.word	0x5f3759df
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	f2ad 5d5c 	subw	sp, sp, #1372	; 0x55c
 8000cd8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE BEGIN 1 */

//	uint8_t buff[12];
    uint8_t mpu_ok[20] ={"MPU WORK FINE\r\n"};
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <main+0xf8>)
 8000cdc:	f207 44d4 	addw	r4, r7, #1236	; 0x4d4
 8000ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
    uint8_t mpu_not[20] ={"MPU NOT WORKING\r\n"};
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <main+0xfc>)
 8000cee:	f507 6498 	add.w	r4, r7, #1216	; 0x4c0
 8000cf2:	461d      	mov	r5, r3
 8000cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	8023      	strh	r3, [r4, #0]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8a7 34d2 	strh.w	r3, [r7, #1234]	; 0x4d2
    uint8_t tags[200] ={"Raw_ax,Raw_ay,Raw_az,Raw_gx,Raw_gy,Raw_gz,Ax,Ay,Az,Gx,Gy,Gz,Q0,Q1,Q2,Q3,ROLL,PITCH,YAW,Eu_Roll,Eu_Pitch,Eu_Yaw\r\n"};
 8000d02:	f507 747e 	add.w	r4, r7, #1016	; 0x3f8
 8000d06:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <main+0x100>)
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2371      	movs	r3, #113	; 0x71
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f005 fed6 	bl	8006ac0 <memcpy>
 8000d14:	f104 0371 	add.w	r3, r4, #113	; 0x71
 8000d18:	2257      	movs	r2, #87	; 0x57
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 feda 	bl	8006ad6 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d22:	f001 fbee 	bl	8002502 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d26:	f000 fc7b 	bl	8001620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2a:	f000 fe25 	bl	8001978 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d2e:	f000 fd0f 	bl	8001750 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d32:	f000 fdc3 	bl	80018bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d36:	f000 fdf1 	bl	800191c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000d3a:	f000 fd49 	bl	80017d0 <MX_I2C2_Init>
  MX_TIM6_Init();
 8000d3e:	f000 fd87 	bl	8001850 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_Base_Start_IT(&htim6);
 8000d42:	4824      	ldr	r0, [pc, #144]	; (8000dd4 <main+0x104>)
 8000d44:	f004 fc38 	bl	80055b8 <HAL_TIM_Base_Start_IT>

    result = SD_MPU6050_Init(&hi2c2, &mpu1, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_2000s);
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4921      	ldr	r1, [pc, #132]	; (8000dd8 <main+0x108>)
 8000d52:	4822      	ldr	r0, [pc, #136]	; (8000ddc <main+0x10c>)
 8000d54:	f000 fee5 	bl	8001b22 <SD_MPU6050_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <main+0x110>)
 8000d5e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f001 fc2a 	bl	80025bc <HAL_Delay>
    if (result == SD_MPU6050_Result_Ok)
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <main+0x110>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d108      	bne.n	8000d82 <main+0xb2>
	{
	HAL_UART_Transmit(&huart3, mpu_ok, sizeof(mpu_ok), HAL_MAX_DELAY);
 8000d70:	f207 41d4 	addw	r1, r7, #1236	; 0x4d4
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d78:	2214      	movs	r2, #20
 8000d7a:	481a      	ldr	r0, [pc, #104]	; (8000de4 <main+0x114>)
 8000d7c:	f004 ff28 	bl	8005bd0 <HAL_UART_Transmit>
 8000d80:	e007      	b.n	8000d92 <main+0xc2>
	}
    else
	{
	HAL_UART_Transmit(&huart3, mpu_not, sizeof(mpu_not), HAL_MAX_DELAY);
 8000d82:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8a:	2214      	movs	r2, #20
 8000d8c:	4815      	ldr	r0, [pc, #84]	; (8000de4 <main+0x114>)
 8000d8e:	f004 ff1f 	bl	8005bd0 <HAL_UART_Transmit>
	}

    sprintf(data, "calibrating....\r\n");
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <main+0x118>)
 8000d98:	461c      	mov	r4, r3
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fa49 	bl	8000240 <strlen>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	f107 0110 	add.w	r1, r7, #16
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <main+0x114>)
 8000dbc:	f004 ff08 	bl	8005bd0 <HAL_UART_Transmit>

    for (int calib_loop = 0; calib_loop < 2000; calib_loop++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8000dc6:	e065      	b.n	8000e94 <main+0x1c4>
 8000dc8:	0800ab44 	.word	0x0800ab44
 8000dcc:	0800ab58 	.word	0x0800ab58
 8000dd0:	0800ab6c 	.word	0x0800ab6c
 8000dd4:	20000768 	.word	0x20000768
 8000dd8:	20000830 	.word	0x20000830
 8000ddc:	200006d0 	.word	0x200006d0
 8000de0:	200007a8 	.word	0x200007a8
 8000de4:	2000024c 	.word	0x2000024c
 8000de8:	0800aab8 	.word	0x0800aab8
	{
	SD_MPU6050_ReadGyroscope(&hi2c2, &mpu1);
 8000dec:	49d2      	ldr	r1, [pc, #840]	; (8001138 <main+0x468>)
 8000dee:	48d3      	ldr	r0, [pc, #844]	; (800113c <main+0x46c>)
 8000df0:	f001 f85e 	bl	8001eb0 <SD_MPU6050_ReadGyroscope>
	g_x = mpu1.Gyroscope_X;
 8000df4:	4bd0      	ldr	r3, [pc, #832]	; (8001138 <main+0x468>)
 8000df6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000dfa:	4bd1      	ldr	r3, [pc, #836]	; (8001140 <main+0x470>)
 8000dfc:	801a      	strh	r2, [r3, #0]
	g_y = mpu1.Gyroscope_Y;
 8000dfe:	4bce      	ldr	r3, [pc, #824]	; (8001138 <main+0x468>)
 8000e00:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000e04:	4bcf      	ldr	r3, [pc, #828]	; (8001144 <main+0x474>)
 8000e06:	801a      	strh	r2, [r3, #0]
	g_z = mpu1.Gyroscope_Z;
 8000e08:	4bcb      	ldr	r3, [pc, #812]	; (8001138 <main+0x468>)
 8000e0a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000e0e:	4bce      	ldr	r3, [pc, #824]	; (8001148 <main+0x478>)
 8000e10:	801a      	strh	r2, [r3, #0]

//	tot_ax = tot_ax + (double)a_x/2000.0;
//	tot_ay = tot_ax + (double)a_y/2000.0;
//	tot_az = tot_ax + (double)a_z/2000.0;

	tot_gx = tot_gx + (double) g_x / 2000.0;
 8000e12:	4bcb      	ldr	r3, [pc, #812]	; (8001140 <main+0x470>)
 8000e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e20:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 8001100 <main+0x430>
 8000e24:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e28:	4bc8      	ldr	r3, [pc, #800]	; (800114c <main+0x47c>)
 8000e2a:	ed93 7b00 	vldr	d7, [r3]
 8000e2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e32:	4bc6      	ldr	r3, [pc, #792]	; (800114c <main+0x47c>)
 8000e34:	ed83 7b00 	vstr	d7, [r3]
	tot_gy = tot_gy + (double) g_y / 2000.0;
 8000e38:	4bc2      	ldr	r3, [pc, #776]	; (8001144 <main+0x474>)
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	ee07 3a90 	vmov	s15, r3
 8000e42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e46:	ed9f 5bae 	vldr	d5, [pc, #696]	; 8001100 <main+0x430>
 8000e4a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e4e:	4bc0      	ldr	r3, [pc, #768]	; (8001150 <main+0x480>)
 8000e50:	ed93 7b00 	vldr	d7, [r3]
 8000e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e58:	4bbd      	ldr	r3, [pc, #756]	; (8001150 <main+0x480>)
 8000e5a:	ed83 7b00 	vstr	d7, [r3]
	tot_gz = tot_gz + (double) g_z / 2000.0;
 8000e5e:	4bba      	ldr	r3, [pc, #744]	; (8001148 <main+0x478>)
 8000e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e64:	ee07 3a90 	vmov	s15, r3
 8000e68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000e6c:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8001100 <main+0x430>
 8000e70:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e74:	4bb7      	ldr	r3, [pc, #732]	; (8001154 <main+0x484>)
 8000e76:	ed93 7b00 	vldr	d7, [r3]
 8000e7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e7e:	4bb5      	ldr	r3, [pc, #724]	; (8001154 <main+0x484>)
 8000e80:	ed83 7b00 	vstr	d7, [r3]

	HAL_Delay(2);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f001 fb99 	bl	80025bc <HAL_Delay>
    for (int calib_loop = 0; calib_loop < 2000; calib_loop++)
 8000e8a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8000e94:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8000e98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e9c:	dba6      	blt.n	8000dec <main+0x11c>
	}
    sprintf(data, "calibrating done\r\n");
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4aad      	ldr	r2, [pc, #692]	; (8001158 <main+0x488>)
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	4615      	mov	r5, r2
 8000ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	8022      	strh	r2, [r4, #0]
 8000eb2:	3402      	adds	r4, #2
 8000eb4:	0c1b      	lsrs	r3, r3, #16
 8000eb6:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f9bf 	bl	8000240 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f107 0110 	add.w	r1, r7, #16
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ece:	48a3      	ldr	r0, [pc, #652]	; (800115c <main+0x48c>)
 8000ed0:	f004 fe7e 	bl	8005bd0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart3, (uint8_t*) tags, sizeof(tags), HAL_MAX_DELAY);
 8000ed4:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000edc:	22c8      	movs	r2, #200	; 0xc8
 8000ede:	489f      	ldr	r0, [pc, #636]	; (800115c <main+0x48c>)
 8000ee0:	f004 fe76 	bl	8005bd0 <HAL_UART_Transmit>
    while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (prev_tim_val != Tim_Cnt)
 8000ee4:	4b9e      	ldr	r3, [pc, #632]	; (8001160 <main+0x490>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b9e      	ldr	r3, [pc, #632]	; (8001164 <main+0x494>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d0f9      	beq.n	8000ee4 <main+0x214>
	    {
	    prev_tim_val = Tim_Cnt;
 8000ef0:	4b9c      	ldr	r3, [pc, #624]	; (8001164 <main+0x494>)
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	4b9a      	ldr	r3, [pc, #616]	; (8001160 <main+0x490>)
 8000ef6:	701a      	strb	r2, [r3, #0]

	    SD_MPU6050_ReadTemperature(&hi2c2, &mpu1);
 8000ef8:	498f      	ldr	r1, [pc, #572]	; (8001138 <main+0x468>)
 8000efa:	4890      	ldr	r0, [pc, #576]	; (800113c <main+0x46c>)
 8000efc:	f001 f822 	bl	8001f44 <SD_MPU6050_ReadTemperature>
//	  float temper = mpu1.Temperature;
	    SD_MPU6050_ReadGyroscope(&hi2c2, &mpu1);
 8000f00:	498d      	ldr	r1, [pc, #564]	; (8001138 <main+0x468>)
 8000f02:	488e      	ldr	r0, [pc, #568]	; (800113c <main+0x46c>)
 8000f04:	f000 ffd4 	bl	8001eb0 <SD_MPU6050_ReadGyroscope>
	    g_x = mpu1.Gyroscope_X;
 8000f08:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <main+0x468>)
 8000f0a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000f0e:	4b8c      	ldr	r3, [pc, #560]	; (8001140 <main+0x470>)
 8000f10:	801a      	strh	r2, [r3, #0]
	    g_y = mpu1.Gyroscope_Y;
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <main+0x468>)
 8000f14:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000f18:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <main+0x474>)
 8000f1a:	801a      	strh	r2, [r3, #0]
	    g_z = mpu1.Gyroscope_Z;
 8000f1c:	4b86      	ldr	r3, [pc, #536]	; (8001138 <main+0x468>)
 8000f1e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000f22:	4b89      	ldr	r3, [pc, #548]	; (8001148 <main+0x478>)
 8000f24:	801a      	strh	r2, [r3, #0]

	    SD_MPU6050_ReadAccelerometer(&hi2c2, &mpu1);
 8000f26:	4984      	ldr	r1, [pc, #528]	; (8001138 <main+0x468>)
 8000f28:	4884      	ldr	r0, [pc, #528]	; (800113c <main+0x46c>)
 8000f2a:	f000 ff77 	bl	8001e1c <SD_MPU6050_ReadAccelerometer>
	    a_x = mpu1.Accelerometer_X;
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <main+0x468>)
 8000f30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000f34:	4b8c      	ldr	r3, [pc, #560]	; (8001168 <main+0x498>)
 8000f36:	801a      	strh	r2, [r3, #0]
	    a_y = mpu1.Accelerometer_Y;
 8000f38:	4b7f      	ldr	r3, [pc, #508]	; (8001138 <main+0x468>)
 8000f3a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000f3e:	4b8b      	ldr	r3, [pc, #556]	; (800116c <main+0x49c>)
 8000f40:	801a      	strh	r2, [r3, #0]
	    a_z = mpu1.Accelerometer_Z;
 8000f42:	4b7d      	ldr	r3, [pc, #500]	; (8001138 <main+0x468>)
 8000f44:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000f48:	4b89      	ldr	r3, [pc, #548]	; (8001170 <main+0x4a0>)
 8000f4a:	801a      	strh	r2, [r3, #0]

	    Bias_calib = false;
 8000f4c:	4b89      	ldr	r3, [pc, #548]	; (8001174 <main+0x4a4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	    Ax = (((((double) a_x - tot_ax) + 32768.0) / 65535.0) * 32.0) - 16.0;
 8000f52:	4b85      	ldr	r3, [pc, #532]	; (8001168 <main+0x498>)
 8000f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f58:	ee07 3a90 	vmov	s15, r3
 8000f5c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f60:	4b85      	ldr	r3, [pc, #532]	; (8001178 <main+0x4a8>)
 8000f62:	ed93 7b00 	vldr	d7, [r3]
 8000f66:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f6a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001108 <main+0x438>
 8000f6e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000f72:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001110 <main+0x440>
 8000f76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001118 <main+0x448>
 8000f7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f82:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8000f86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f8a:	4b7c      	ldr	r3, [pc, #496]	; (800117c <main+0x4ac>)
 8000f8c:	ed83 7b00 	vstr	d7, [r3]
	    Ay = (((((double) a_y - tot_ay) + 32768.0) / 65535.0) * 32.0) - 16.0;
 8000f90:	4b76      	ldr	r3, [pc, #472]	; (800116c <main+0x49c>)
 8000f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <main+0x4b0>)
 8000fa0:	ed93 7b00 	vldr	d7, [r3]
 8000fa4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fa8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001108 <main+0x438>
 8000fac:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fb0:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8001110 <main+0x440>
 8000fb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb8:	ed9f 6b57 	vldr	d6, [pc, #348]	; 8001118 <main+0x448>
 8000fbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fc0:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8000fc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	; (8001184 <main+0x4b4>)
 8000fca:	ed83 7b00 	vstr	d7, [r3]
	    Az = (((((double) a_z - tot_az) + 32768.0) / 65535.0) * 32.0) - 16.0;
 8000fce:	4b68      	ldr	r3, [pc, #416]	; (8001170 <main+0x4a0>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fdc:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <main+0x4b8>)
 8000fde:	ed93 7b00 	vldr	d7, [r3]
 8000fe2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fe6:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001108 <main+0x438>
 8000fea:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fee:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8001110 <main+0x440>
 8000ff2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff6:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8001118 <main+0x448>
 8000ffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ffe:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8001002:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001006:	4b61      	ldr	r3, [pc, #388]	; (800118c <main+0x4bc>)
 8001008:	ed83 7b00 	vstr	d7, [r3]

	    Gx = (((((double) g_x - tot_gx) + 32768.0) / 65535.0) * 4000.0) - 2000.0;
 800100c:	4b4c      	ldr	r3, [pc, #304]	; (8001140 <main+0x470>)
 800100e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <main+0x47c>)
 800101c:	ed93 7b00 	vldr	d7, [r3]
 8001020:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001024:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001108 <main+0x438>
 8001028:	ee37 6b06 	vadd.f64	d6, d7, d6
 800102c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8001110 <main+0x440>
 8001030:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001034:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8001120 <main+0x450>
 8001038:	ee27 7b06 	vmul.f64	d7, d7, d6
 800103c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001100 <main+0x430>
 8001040:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <main+0x4c0>)
 8001046:	ed83 7b00 	vstr	d7, [r3]
	    Gy = (((((double) g_y - tot_gy) + 32768.0) / 65535.0) * 4000.0) - 2000.0;
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <main+0x474>)
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001058:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <main+0x480>)
 800105a:	ed93 7b00 	vldr	d7, [r3]
 800105e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001062:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001108 <main+0x438>
 8001066:	ee37 6b06 	vadd.f64	d6, d7, d6
 800106a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001110 <main+0x440>
 800106e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001072:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8001120 <main+0x450>
 8001076:	ee27 7b06 	vmul.f64	d7, d7, d6
 800107a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8001100 <main+0x430>
 800107e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001082:	4b44      	ldr	r3, [pc, #272]	; (8001194 <main+0x4c4>)
 8001084:	ed83 7b00 	vstr	d7, [r3]
	    Gz = (((((double) g_z - tot_gz) + 32768.0) / 65535.0) * 4000.0) - 2000.0;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <main+0x478>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <main+0x484>)
 8001098:	ed93 7b00 	vldr	d7, [r3]
 800109c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010a0:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001108 <main+0x438>
 80010a4:	ee37 6b06 	vadd.f64	d6, d7, d6
 80010a8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001110 <main+0x440>
 80010ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010b0:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001120 <main+0x450>
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001100 <main+0x430>
 80010bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <main+0x4c8>)
 80010c2:	ed83 7b00 	vstr	d7, [r3]

	    Gx = (Gx * M_PI) / 180.0;
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <main+0x4c0>)
 80010c8:	ed93 7b00 	vldr	d7, [r3]
 80010cc:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001128 <main+0x458>
 80010d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010d4:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8001130 <main+0x460>
 80010d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <main+0x4c0>)
 80010de:	ed83 7b00 	vstr	d7, [r3]
	    Gy = (Gy * M_PI) / 180.0;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <main+0x4c4>)
 80010e4:	ed93 7b00 	vldr	d7, [r3]
 80010e8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001128 <main+0x458>
 80010ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010f0:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001130 <main+0x460>
 80010f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <main+0x4c4>)
 80010fa:	ed83 7b00 	vstr	d7, [r3]
 80010fe:	e04d      	b.n	800119c <main+0x4cc>
 8001100:	00000000 	.word	0x00000000
 8001104:	409f4000 	.word	0x409f4000
 8001108:	00000000 	.word	0x00000000
 800110c:	40e00000 	.word	0x40e00000
 8001110:	00000000 	.word	0x00000000
 8001114:	40efffe0 	.word	0x40efffe0
 8001118:	00000000 	.word	0x00000000
 800111c:	40400000 	.word	0x40400000
 8001120:	00000000 	.word	0x00000000
 8001124:	40af4000 	.word	0x40af4000
 8001128:	54442d18 	.word	0x54442d18
 800112c:	400921fb 	.word	0x400921fb
 8001130:	00000000 	.word	0x00000000
 8001134:	40668000 	.word	0x40668000
 8001138:	20000830 	.word	0x20000830
 800113c:	200006d0 	.word	0x200006d0
 8001140:	20000248 	.word	0x20000248
 8001144:	2000081a 	.word	0x2000081a
 8001148:	20000738 	.word	0x20000738
 800114c:	20000748 	.word	0x20000748
 8001150:	200007c8 	.word	0x200007c8
 8001154:	20000750 	.word	0x20000750
 8001158:	0800aacc 	.word	0x0800aacc
 800115c:	2000024c 	.word	0x2000024c
 8001160:	200007c0 	.word	0x200007c0
 8001164:	20000008 	.word	0x20000008
 8001168:	2000071c 	.word	0x2000071c
 800116c:	20000238 	.word	0x20000238
 8001170:	2000073a 	.word	0x2000073a
 8001174:	20000009 	.word	0x20000009
 8001178:	20000230 	.word	0x20000230
 800117c:	20000758 	.word	0x20000758
 8001180:	20000730 	.word	0x20000730
 8001184:	20000728 	.word	0x20000728
 8001188:	20000720 	.word	0x20000720
 800118c:	200007b0 	.word	0x200007b0
 8001190:	20000228 	.word	0x20000228
 8001194:	20000740 	.word	0x20000740
 8001198:	20000820 	.word	0x20000820
	    Gz = (Gz * M_PI) / 180.0;
 800119c:	4b60      	ldr	r3, [pc, #384]	; (8001320 <main+0x650>)
 800119e:	ed93 7b00 	vldr	d7, [r3]
 80011a2:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8001308 <main+0x638>
 80011a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011aa:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8001310 <main+0x640>
 80011ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <main+0x650>)
 80011b4:	ed83 7b00 	vstr	d7, [r3]

	    MadgwickAHRSupdateIMU(Gx, Gy, Gz, Ax, Ay, Az);
 80011b8:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <main+0x654>)
 80011ba:	ed93 7b00 	vldr	d7, [r3]
 80011be:	eef7 6bc7 	vcvt.f32.f64	s13, d7
 80011c2:	4b59      	ldr	r3, [pc, #356]	; (8001328 <main+0x658>)
 80011c4:	ed93 7b00 	vldr	d7, [r3]
 80011c8:	eeb7 6bc7 	vcvt.f32.f64	s12, d7
 80011cc:	4b54      	ldr	r3, [pc, #336]	; (8001320 <main+0x650>)
 80011ce:	ed93 7b00 	vldr	d7, [r3]
 80011d2:	eef7 5bc7 	vcvt.f32.f64	s11, d7
 80011d6:	4b55      	ldr	r3, [pc, #340]	; (800132c <main+0x65c>)
 80011d8:	ed93 7b00 	vldr	d7, [r3]
 80011dc:	eeb7 5bc7 	vcvt.f32.f64	s10, d7
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <main+0x660>)
 80011e2:	ed93 7b00 	vldr	d7, [r3]
 80011e6:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <main+0x664>)
 80011ec:	ed93 7b00 	vldr	d7, [r3]
 80011f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f4:	eef0 2a67 	vmov.f32	s5, s15
 80011f8:	eeb0 2a64 	vmov.f32	s4, s9
 80011fc:	eef0 1a45 	vmov.f32	s3, s10
 8001200:	eeb0 1a65 	vmov.f32	s2, s11
 8001204:	eef0 0a46 	vmov.f32	s1, s12
 8001208:	eeb0 0a66 	vmov.f32	s0, s13
 800120c:	f7ff f9f0 	bl	80005f0 <MadgwickAHRSupdateIMU>

//	  	Euler Angles

//	  	roll (x-axis rotation)
	    double sinr_cosp = 2 * ((q0 * q1) + (q2 * q3));
 8001210:	4b49      	ldr	r3, [pc, #292]	; (8001338 <main+0x668>)
 8001212:	ed93 7a00 	vldr	s14, [r3]
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <main+0x66c>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <main+0x670>)
 8001222:	edd3 6a00 	vldr	s13, [r3]
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <main+0x674>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800123c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8001240:	ed83 7b00 	vstr	d7, [r3]
	    double cosr_cosp = 1 - (2 * ((q1 * q1) + (q2 * q2)));
 8001244:	4b3d      	ldr	r3, [pc, #244]	; (800133c <main+0x66c>)
 8001246:	ed93 7a00 	vldr	s14, [r3]
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <main+0x66c>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001254:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <main+0x670>)
 8001256:	edd3 6a00 	vldr	s13, [r3]
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <main+0x670>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001268:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001274:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001278:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800127c:	ed83 7b00 	vstr	d7, [r3]
	    ROLL = atan2(sinr_cosp, cosr_cosp);
 8001280:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001284:	ed93 1b00 	vldr	d1, [r3]
 8001288:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 800128c:	ed93 0b00 	vldr	d0, [r3]
 8001290:	f009 f8ee 	bl	800a470 <atan2>
 8001294:	eeb0 7b40 	vmov.f64	d7, d0
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <main+0x678>)
 800129a:	ed83 7b00 	vstr	d7, [r3]

//	    pitch (y-axis rotation)
	    double sinp = 2 * ((q0 * q2) - (q3 * q1));
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <main+0x668>)
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <main+0x670>)
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <main+0x674>)
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <main+0x66c>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ca:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80012ce:	ed83 7b00 	vstr	d7, [r3]
	    if (abs(sinp) >= 1)
 80012d2:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80012d6:	ed93 7b00 	vldr	d7, [r3]
 80012da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012de:	ee17 3a90 	vmov	r3, s15
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bfb8      	it	lt
 80012e6:	425b      	neglt	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dd31      	ble.n	8001350 <main+0x680>
		PITCH = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80012ec:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80012f0:	ed93 1b00 	vldr	d1, [r3]
 80012f4:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001318 <main+0x648>
 80012f8:	f006 fa06 	bl	8007708 <copysign>
 80012fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <main+0x67c>)
 8001302:	ed83 7b00 	vstr	d7, [r3]
 8001306:	e02e      	b.n	8001366 <main+0x696>
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	00000000 	.word	0x00000000
 8001314:	40668000 	.word	0x40668000
 8001318:	54442d18 	.word	0x54442d18
 800131c:	3ff921fb 	.word	0x3ff921fb
 8001320:	20000820 	.word	0x20000820
 8001324:	20000228 	.word	0x20000228
 8001328:	20000740 	.word	0x20000740
 800132c:	20000758 	.word	0x20000758
 8001330:	20000728 	.word	0x20000728
 8001334:	200007b0 	.word	0x200007b0
 8001338:	20000004 	.word	0x20000004
 800133c:	2000020c 	.word	0x2000020c
 8001340:	20000210 	.word	0x20000210
 8001344:	20000214 	.word	0x20000214
 8001348:	20000240 	.word	0x20000240
 800134c:	20000760 	.word	0x20000760
	    else
		PITCH = asin(sinp);
 8001350:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001354:	ed93 0b00 	vldr	d0, [r3]
 8001358:	f009 f83a 	bl	800a3d0 <asin>
 800135c:	eeb0 7b40 	vmov.f64	d7, d0
 8001360:	4b95      	ldr	r3, [pc, #596]	; (80015b8 <main+0x8e8>)
 8001362:	ed83 7b00 	vstr	d7, [r3]

	    // yaw (z-axis rotation)
	    double siny_cosp = 2 * ((q0 * q3) + (q1 * q2));
 8001366:	4b95      	ldr	r3, [pc, #596]	; (80015bc <main+0x8ec>)
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	4b94      	ldr	r3, [pc, #592]	; (80015c0 <main+0x8f0>)
 800136e:	edd3 7a00 	vldr	s15, [r3]
 8001372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001376:	4b93      	ldr	r3, [pc, #588]	; (80015c4 <main+0x8f4>)
 8001378:	edd3 6a00 	vldr	s13, [r3]
 800137c:	4b92      	ldr	r3, [pc, #584]	; (80015c8 <main+0x8f8>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800138e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001392:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8001396:	ed83 7b00 	vstr	d7, [r3]
	    double cosy_cosp = 1 - (2 * ((q2 * q2) + (q3 * q3)));
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <main+0x8f8>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b89      	ldr	r3, [pc, #548]	; (80015c8 <main+0x8f8>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <main+0x8f0>)
 80013ac:	edd3 6a00 	vldr	s13, [r3]
 80013b0:	4b83      	ldr	r3, [pc, #524]	; (80015c0 <main+0x8f0>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80013d2:	ed83 7b00 	vstr	d7, [r3]
	    YAW = atan2(siny_cosp, cosy_cosp);
 80013d6:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80013da:	ed93 1b00 	vldr	d1, [r3]
 80013de:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80013e2:	ed93 0b00 	vldr	d0, [r3]
 80013e6:	f009 f843 	bl	800a470 <atan2>
 80013ea:	eeb0 7b40 	vmov.f64	d7, d0
 80013ee:	4b77      	ldr	r3, [pc, #476]	; (80015cc <main+0x8fc>)
 80013f0:	ed83 7b00 	vstr	d7, [r3]

	    Eu_Roll = ROLL * (180 / M_PI);
 80013f4:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <main+0x900>)
 80013f6:	ed93 7b00 	vldr	d7, [r3]
 80013fa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80015b0 <main+0x8e0>
 80013fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001402:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001406:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <main+0x904>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
	    Eu_Pitch = PITCH * (180 / M_PI);
 800140c:	4b6a      	ldr	r3, [pc, #424]	; (80015b8 <main+0x8e8>)
 800140e:	ed93 7b00 	vldr	d7, [r3]
 8001412:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80015b0 <main+0x8e0>
 8001416:	ee27 7b06 	vmul.f64	d7, d7, d6
 800141a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800141e:	4b6e      	ldr	r3, [pc, #440]	; (80015d8 <main+0x908>)
 8001420:	edc3 7a00 	vstr	s15, [r3]
	    Eu_Yaw = YAW * (180 / M_PI);
 8001424:	4b69      	ldr	r3, [pc, #420]	; (80015cc <main+0x8fc>)
 8001426:	ed93 7b00 	vldr	d7, [r3]
 800142a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80015b0 <main+0x8e0>
 800142e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001432:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <main+0x90c>)
 8001438:	edc3 7a00 	vstr	s15, [r3]

	    /**********************************    Enable for Data analysis   ***************************/
	    sprintf(data, "%d ,%d ,%d ,%d ,%d ,%d ,%f ,%f ,%f ,%f ,%f ,%f ,", a_x, a_y, a_z, g_x, g_y, g_z, Ax, Ay, Az, Gx, Gy, Gz);
 800143c:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <main+0x910>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	469c      	mov	ip, r3
 8001444:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <main+0x914>)
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	469e      	mov	lr, r3
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <main+0x918>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b65      	ldr	r3, [pc, #404]	; (80015ec <main+0x91c>)
 8001456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <main+0x920>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <main+0x924>)
 8001466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	4b62      	ldr	r3, [pc, #392]	; (80015f8 <main+0x928>)
 800146e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <main+0x92c>)
 8001474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001478:	4b61      	ldr	r3, [pc, #388]	; (8001600 <main+0x930>)
 800147a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800147e:	4b61      	ldr	r3, [pc, #388]	; (8001604 <main+0x934>)
 8001480:	ed93 7b00 	vldr	d7, [r3]
 8001484:	4b60      	ldr	r3, [pc, #384]	; (8001608 <main+0x938>)
 8001486:	e9d3 1200 	ldrd	r1, r2, [r3]
 800148a:	4b60      	ldr	r3, [pc, #384]	; (800160c <main+0x93c>)
 800148c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001490:	f107 0010 	add.w	r0, r7, #16
 8001494:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8001498:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 800149c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80014a0:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80014a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80014a8:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	9203      	str	r2, [sp, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	9202      	str	r2, [sp, #8]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4673      	mov	r3, lr
 80014be:	4662      	mov	r2, ip
 80014c0:	4953      	ldr	r1, [pc, #332]	; (8001610 <main+0x940>)
 80014c2:	f006 f937 	bl	8007734 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe feb8 	bl	8000240 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0110 	add.w	r1, r7, #16
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014dc:	484d      	ldr	r0, [pc, #308]	; (8001614 <main+0x944>)
 80014de:	f004 fb77 	bl	8005bd0 <HAL_UART_Transmit>
	    sprintf(data, "%f ,%f ,%f ,%f ,", q0, q1, q2, q3);
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <main+0x8ec>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <main+0x8f4>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <main+0x8f8>)
 80014f8:	edd3 6a00 	vldr	s13, [r3]
 80014fc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <main+0x8f0>)
 8001502:	edd3 5a00 	vldr	s11, [r3]
 8001506:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800150a:	f107 0010 	add.w	r0, r7, #16
 800150e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001512:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001516:	ed8d 7b00 	vstr	d7, [sp]
 800151a:	ec53 2b14 	vmov	r2, r3, d4
 800151e:	493e      	ldr	r1, [pc, #248]	; (8001618 <main+0x948>)
 8001520:	f006 f908 	bl	8007734 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fe89 	bl	8000240 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b29a      	uxth	r2, r3
 8001532:	f107 0110 	add.w	r1, r7, #16
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153a:	4836      	ldr	r0, [pc, #216]	; (8001614 <main+0x944>)
 800153c:	f004 fb48 	bl	8005bd0 <HAL_UART_Transmit>
	    sprintf(data, "%f ,%f ,%f ,%f ,%f ,%f\r\n", ROLL, PITCH, YAW, Eu_Roll, Eu_Pitch, Eu_Yaw);
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <main+0x900>)
 8001542:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <main+0x8e8>)
 8001548:	e9d3 3400 	ldrd	r3, r4, [r3]
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <main+0x8fc>)
 800154e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001552:	4820      	ldr	r0, [pc, #128]	; (80015d4 <main+0x904>)
 8001554:	edd0 7a00 	vldr	s15, [r0]
 8001558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800155c:	481e      	ldr	r0, [pc, #120]	; (80015d8 <main+0x908>)
 800155e:	edd0 6a00 	vldr	s13, [r0]
 8001562:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001566:	481d      	ldr	r0, [pc, #116]	; (80015dc <main+0x90c>)
 8001568:	edd0 5a00 	vldr	s11, [r0]
 800156c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001570:	f107 0010 	add.w	r0, r7, #16
 8001574:	ed8d 5b08 	vstr	d5, [sp, #32]
 8001578:	ed8d 6b06 	vstr	d6, [sp, #24]
 800157c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001580:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001584:	e9cd 3400 	strd	r3, r4, [sp]
 8001588:	462a      	mov	r2, r5
 800158a:	4633      	mov	r3, r6
 800158c:	4923      	ldr	r1, [pc, #140]	; (800161c <main+0x94c>)
 800158e:	f006 f8d1 	bl	8007734 <siprintf>
	    HAL_UART_Transmit(&huart3, (uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fe52 	bl	8000240 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	f107 0110 	add.w	r1, r7, #16
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a8:	481a      	ldr	r0, [pc, #104]	; (8001614 <main+0x944>)
 80015aa:	f004 fb11 	bl	8005bd0 <HAL_UART_Transmit>
	if (prev_tim_val != Tim_Cnt)
 80015ae:	e499      	b.n	8000ee4 <main+0x214>
 80015b0:	1a63c1f8 	.word	0x1a63c1f8
 80015b4:	404ca5dc 	.word	0x404ca5dc
 80015b8:	20000760 	.word	0x20000760
 80015bc:	20000004 	.word	0x20000004
 80015c0:	20000214 	.word	0x20000214
 80015c4:	2000020c 	.word	0x2000020c
 80015c8:	20000210 	.word	0x20000210
 80015cc:	20000828 	.word	0x20000828
 80015d0:	20000240 	.word	0x20000240
 80015d4:	2000023c 	.word	0x2000023c
 80015d8:	200007bc 	.word	0x200007bc
 80015dc:	200007b8 	.word	0x200007b8
 80015e0:	2000071c 	.word	0x2000071c
 80015e4:	20000238 	.word	0x20000238
 80015e8:	2000073a 	.word	0x2000073a
 80015ec:	20000248 	.word	0x20000248
 80015f0:	2000081a 	.word	0x2000081a
 80015f4:	20000738 	.word	0x20000738
 80015f8:	20000758 	.word	0x20000758
 80015fc:	20000728 	.word	0x20000728
 8001600:	200007b0 	.word	0x200007b0
 8001604:	20000228 	.word	0x20000228
 8001608:	20000740 	.word	0x20000740
 800160c:	20000820 	.word	0x20000820
 8001610:	0800aae0 	.word	0x0800aae0
 8001614:	2000024c 	.word	0x2000024c
 8001618:	0800ab14 	.word	0x0800ab14
 800161c:	0800ab28 	.word	0x0800ab28

08001620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0b8      	sub	sp, #224	; 0xe0
 8001624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800162a:	2234      	movs	r2, #52	; 0x34
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f005 fa51 	bl	8006ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2290      	movs	r2, #144	; 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fa42 	bl	8006ad6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001652:	f002 fe59 	bl	8004308 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <SystemClock_Config+0x124>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <SystemClock_Config+0x124>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <SystemClock_Config+0x124>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166e:	4b36      	ldr	r3, [pc, #216]	; (8001748 <SystemClock_Config+0x128>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a35      	ldr	r2, [pc, #212]	; (8001748 <SystemClock_Config+0x128>)
 8001674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <SystemClock_Config+0x128>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001686:	2301      	movs	r3, #1
 8001688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800168c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	2302      	movs	r3, #2
 8001696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80016a8:	23d8      	movs	r3, #216	; 0xd8
 80016aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016b4:	2309      	movs	r3, #9
 80016b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 fe82 	bl	80043c8 <HAL_RCC_OscConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016ca:	f000 fa23 	bl	8001b14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016ce:	f002 fe2b 	bl	8004328 <HAL_PWREx_EnableOverDrive>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80016d8:	f000 fa1c 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001702:	2107      	movs	r1, #7
 8001704:	4618      	mov	r0, r3
 8001706:	f003 f90d 	bl	8004924 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001710:	f000 fa00 	bl	8001b14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <SystemClock_Config+0x12c>)
 8001716:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001718:	2300      	movs	r3, #0
 800171a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800171c:	2300      	movs	r3, #0
 800171e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4618      	mov	r0, r3
 800172c:	f003 faf2 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001736:	f000 f9ed 	bl	8001b14 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	37e0      	adds	r7, #224	; 0xe0
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000
 800174c:	00208100 	.word	0x00208100

08001750 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_ETH_Init+0x78>)
 8001756:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <MX_ETH_Init+0x7c>)
 8001758:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_ETH_Init+0x78>)
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_ETH_Init+0x78>)
 8001762:	2200      	movs	r2, #0
 8001764:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_ETH_Init+0x78>)
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_ETH_Init+0x78>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <MX_ETH_Init+0x78>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	3302      	adds	r3, #2
 800177e:	22e1      	movs	r2, #225	; 0xe1
 8001780:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_ETH_Init+0x78>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	3303      	adds	r3, #3
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_ETH_Init+0x78>)
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	3304      	adds	r3, #4
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_ETH_Init+0x78>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	3305      	adds	r3, #5
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_ETH_Init+0x78>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <MX_ETH_Init+0x78>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_ETH_Init+0x78>)
 80017ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017b2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_ETH_Init+0x78>)
 80017b6:	f001 f835 	bl	8002824 <HAL_ETH_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80017c0:	f000 f9a8 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200007d0 	.word	0x200007d0
 80017cc:	40028000 	.word	0x40028000

080017d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_I2C2_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <MX_I2C2_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_I2C2_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <MX_I2C2_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_I2C2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_I2C2_Init+0x74>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_I2C2_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_I2C2_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C2_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <MX_I2C2_Init+0x74>)
 800180c:	f001 fe3a 	bl	8003484 <HAL_I2C_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001816:	f000 f97d 	bl	8001b14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181a:	2100      	movs	r1, #0
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_I2C2_Init+0x74>)
 800181e:	f002 fb93 	bl	8003f48 <HAL_I2CEx_ConfigAnalogFilter>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 f974 	bl	8001b14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_I2C2_Init+0x74>)
 8001830:	f002 fbd5 	bl	8003fde <HAL_I2CEx_ConfigDigitalFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 f96b 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200006d0 	.word	0x200006d0
 8001848:	40005800 	.word	0x40005800
 800184c:	6000030d 	.word	0x6000030d

08001850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001862:	4a15      	ldr	r2, [pc, #84]	; (80018b8 <MX_TIM6_Init+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001868:	226b      	movs	r2, #107	; 0x6b
 800186a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_TIM6_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001874:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001878:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_TIM6_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_TIM6_Init+0x64>)
 8001882:	f003 fe6d 	bl	8005560 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800188c:	f000 f942 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_TIM6_Init+0x64>)
 800189e:	f004 f89d 	bl	80059dc <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 f934 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000768 	.word	0x20000768
 80018b8:	40001000 	.word	0x40001000

080018bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018c2:	4a15      	ldr	r2, [pc, #84]	; (8001918 <MX_USART3_UART_Init+0x5c>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_USART3_UART_Init+0x58>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_USART3_UART_Init+0x58>)
 8001900:	f004 f918 	bl	8005b34 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800190a:	f000 f903 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000024c 	.word	0x2000024c
 8001918:	40004800 	.word	0x40004800

0800191c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192a:	2206      	movs	r2, #6
 800192c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001930:	2202      	movs	r2, #2
 8001932:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193c:	2202      	movs	r2, #2
 800193e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001942:	2201      	movs	r2, #1
 8001944:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001954:	2201      	movs	r2, #1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001960:	f002 fb89 	bl	8004076 <HAL_PCD_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800196a:	f000 f8d3 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002cc 	.word	0x200002cc

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4b4c      	ldr	r3, [pc, #304]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <MX_GPIO_Init+0x148>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a45      	ldr	r2, [pc, #276]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a39      	ldr	r2, [pc, #228]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <MX_GPIO_Init+0x148>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a1e:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <MX_GPIO_Init+0x148>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a3c:	4821      	ldr	r0, [pc, #132]	; (8001ac4 <MX_GPIO_Init+0x14c>)
 8001a3e:	f001 fd07 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	4820      	ldr	r0, [pc, #128]	; (8001ac8 <MX_GPIO_Init+0x150>)
 8001a48:	f001 fd02 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_GPIO_Init+0x154>)
 8001a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481b      	ldr	r0, [pc, #108]	; (8001ad0 <MX_GPIO_Init+0x158>)
 8001a62:	f001 fb4b 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a66:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <MX_GPIO_Init+0x14c>)
 8001a80:	f001 fb3c 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <MX_GPIO_Init+0x150>)
 8001a9c:	f001 fb2e 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_GPIO_Init+0x150>)
 8001ab4:	f001 fb22 	bl	80030fc <HAL_GPIO_Init>

}
 8001ab8:	bf00      	nop
 8001aba:	3730      	adds	r7, #48	; 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	10110000 	.word	0x10110000
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10d      	bne.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(Tim_Cnt < 200)
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2bc7      	cmp	r3, #199	; 0xc7
 8001aea:	d806      	bhi.n	8001afa <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			Tim_Cnt++;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001af6:	701a      	strb	r2, [r3, #0]
		else
		{
			Tim_Cnt = 1;
		}
	}
}
 8001af8:	e002      	b.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x2c>
			Tim_Cnt = 1;
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000768 	.word	0x20000768
 8001b10:	20000008 	.word	0x20000008

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08a      	sub	sp, #40	; 0x28
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	71fb      	strb	r3, [r7, #7]
 8001b34:	4613      	mov	r3, r2
 8001b36:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8001b38:	2375      	movs	r3, #117	; 0x75
 8001b3a:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8001b52:	7efb      	ldrb	r3, [r7, #27]
 8001b54:	b299      	uxth	r1, r3
 8001b56:	2305      	movs	r3, #5
 8001b58:	2202      	movs	r2, #2
 8001b5a:	69f8      	ldr	r0, [r7, #28]
 8001b5c:	f001 ff0c 	bl	8003978 <HAL_I2C_IsDeviceReady>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e04c      	b.n	8001c04 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8001b6a:	7efb      	ldrb	r3, [r7, #27]
 8001b6c:	b299      	uxth	r1, r3
 8001b6e:	f107 021a 	add.w	r2, r7, #26
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	69f8      	ldr	r0, [r7, #28]
 8001b7c:	f001 fd12 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e03c      	b.n	8001c04 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8001b8a:	7efb      	ldrb	r3, [r7, #27]
 8001b8c:	b299      	uxth	r1, r3
 8001b8e:	f107 0219 	add.w	r2, r7, #25
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	69f8      	ldr	r0, [r7, #28]
 8001b9c:	f001 fdf6 	bl	800378c <HAL_I2C_Master_Receive>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e02c      	b.n	8001c04 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e02a      	b.n	8001c04 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001bae:	bf00      	nop
 8001bb0:	7e7b      	ldrb	r3, [r7, #25]
 8001bb2:	2b68      	cmp	r3, #104	; 0x68
 8001bb4:	d1f9      	bne.n	8001baa <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8001bb6:	236b      	movs	r3, #107	; 0x6b
 8001bb8:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001bbe:	7efb      	ldrb	r3, [r7, #27]
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	f107 0214 	add.w	r2, r7, #20
 8001bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2302      	movs	r3, #2
 8001bce:	69f8      	ldr	r0, [r7, #28]
 8001bd0:	f001 fce8 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e012      	b.n	8001c04 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001bde:	2207      	movs	r2, #7
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f812 	bl	8001c0c <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f830 	bl	8001c54 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001bf4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f899 	bl	8001d34 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001c24:	2319      	movs	r3, #25
 8001c26:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001c2c:	bf00      	nop
 8001c2e:	7cfb      	ldrb	r3, [r7, #19]
 8001c30:	b299      	uxth	r1, r3
 8001c32:	f107 0210 	add.w	r2, r7, #16
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f001 fcb0 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f1      	bne.n	8001c2e <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8001c6c:	231c      	movs	r3, #28
 8001c6e:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001c70:	bf00      	nop
 8001c72:	7cfb      	ldrb	r3, [r7, #19]
 8001c74:	b299      	uxth	r1, r3
 8001c76:	f107 0211 	add.w	r2, r7, #17
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f001 fc8e 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f1      	bne.n	8001c72 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001c8e:	bf00      	nop
 8001c90:	7cfb      	ldrb	r3, [r7, #19]
 8001c92:	b299      	uxth	r1, r3
 8001c94:	f107 0212 	add.w	r2, r7, #18
 8001c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f001 fd73 	bl	800378c <HAL_I2C_Master_Receive>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f1      	bne.n	8001c90 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001cac:	7cbb      	ldrb	r3, [r7, #18]
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	f023 0318 	bic.w	r3, r3, #24
 8001cb4:	b25a      	sxtb	r2, r3
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001cc4:	bf00      	nop
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	f107 0212 	add.w	r2, r7, #18
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f001 fc64 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f1      	bne.n	8001cc6 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d81f      	bhi.n	8001d28 <SD_MPU6050_SetAccelerometer+0xd4>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <SD_MPU6050_SetAccelerometer+0x9c>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d0b 	.word	0x08001d0b
 8001cf8:	08001d15 	.word	0x08001d15
 8001cfc:	08001d1f 	.word	0x08001d1f
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001d06:	609a      	str	r2, [r3, #8]
			break;
 8001d08:	e00f      	b.n	8001d2a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001d10:	609a      	str	r2, [r3, #8]
			break;
 8001d12:	e00a      	b.n	8001d2a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001d1a:	609a      	str	r2, [r3, #8]
			break;
 8001d1c:	e005      	b.n	8001d2a <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001d24:	609a      	str	r2, [r3, #8]
			break;
 8001d26:	e000      	b.n	8001d2a <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8001d28:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8001d4c:	231b      	movs	r3, #27
 8001d4e:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8001d50:	bf00      	nop
 8001d52:	7cfb      	ldrb	r3, [r7, #19]
 8001d54:	b299      	uxth	r1, r3
 8001d56:	f107 0211 	add.w	r2, r7, #17
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2301      	movs	r3, #1
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f001 fc1e 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f1      	bne.n	8001d52 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001d6e:	bf00      	nop
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	b299      	uxth	r1, r3
 8001d74:	f107 0212 	add.w	r2, r7, #18
 8001d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f001 fd03 	bl	800378c <HAL_I2C_Master_Receive>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f1      	bne.n	8001d70 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001d8c:	7cbb      	ldrb	r3, [r7, #18]
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f023 0318 	bic.w	r3, r3, #24
 8001d94:	b25a      	sxtb	r2, r3
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001da4:	bf00      	nop
 8001da6:	7cfb      	ldrb	r3, [r7, #19]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 0212 	add.w	r2, r7, #18
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2301      	movs	r3, #1
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f001 fbf4 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f1      	bne.n	8001da6 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d81b      	bhi.n	8001e00 <SD_MPU6050_SetGyroscope+0xcc>
 8001dc8:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <SD_MPU6050_SetGyroscope+0x9c>)
 8001dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dce:	bf00      	nop
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001df9 	.word	0x08001df9
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <SD_MPU6050_SetGyroscope+0xd8>)
 8001de4:	605a      	str	r2, [r3, #4]
				break;
 8001de6:	e00c      	b.n	8001e02 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <SD_MPU6050_SetGyroscope+0xdc>)
 8001dec:	605a      	str	r2, [r3, #4]
				break;
 8001dee:	e008      	b.n	8001e02 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <SD_MPU6050_SetGyroscope+0xe0>)
 8001df4:	605a      	str	r2, [r3, #4]
				break;
 8001df6:	e004      	b.n	8001e02 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <SD_MPU6050_SetGyroscope+0xe4>)
 8001dfc:	605a      	str	r2, [r3, #4]
				break;
 8001dfe:	e000      	b.n	8001e02 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8001e00:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	3bfa232d 	.word	0x3bfa232d
 8001e10:	3c7a232d 	.word	0x3c7a232d
 8001e14:	3cf9c190 	.word	0x3cf9c190
 8001e18:	3d79c190 	.word	0x3d79c190

08001e1c <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8001e26:	233b      	movs	r3, #59	; 0x3b
 8001e28:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001e34:	bf00      	nop
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	f107 020b 	add.w	r2, r7, #11
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f001 fbac 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f1      	bne.n	8001e36 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001e52:	bf00      	nop
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	b299      	uxth	r1, r3
 8001e58:	f107 020c 	add.w	r2, r7, #12
 8001e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2306      	movs	r3, #6
 8001e64:	6978      	ldr	r0, [r7, #20]
 8001e66:	f001 fc91 	bl	800378c <HAL_I2C_Master_Receive>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f1      	bne.n	8001e54 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b21a      	sxth	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8001e94:	7c3b      	ldrb	r3, [r7, #16]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	7c7b      	ldrb	r3, [r7, #17]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8001eba:	2343      	movs	r3, #67	; 0x43
 8001ebc:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001ec8:	bf00      	nop
 8001eca:	7cfb      	ldrb	r3, [r7, #19]
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	f107 020b 	add.w	r2, r7, #11
 8001ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f001 fb62 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f1      	bne.n	8001eca <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8001ee6:	bf00      	nop
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	b299      	uxth	r1, r3
 8001eec:	f107 020c 	add.w	r2, r7, #12
 8001ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	6978      	ldr	r0, [r7, #20]
 8001efa:	f001 fc47 	bl	800378c <HAL_I2C_Master_Receive>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f1      	bne.n	8001ee8 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8001f04:	7b3b      	ldrb	r3, [r7, #12]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7b7b      	ldrb	r3, [r7, #13]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8001f16:	7bbb      	ldrb	r3, [r7, #14]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8001f28:	7c3b      	ldrb	r3, [r7, #16]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	7c7b      	ldrb	r3, [r7, #17]
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <SD_MPU6050_ReadTemperature>:
SD_MPU6050_Result SD_MPU6050_ReadTemperature(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	uint8_t data[2];
	int16_t temp;
	uint8_t reg = MPU6050_TEMP_OUT_H;
 8001f4e:	2341      	movs	r3, #65	; 0x41
 8001f50:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	74fb      	strb	r3, [r7, #19]

	/* Read temperature */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001f5c:	bf00      	nop
 8001f5e:	7cfb      	ldrb	r3, [r7, #19]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	f107 020b 	add.w	r2, r7, #11
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f001 fb18 	bl	80035a4 <HAL_I2C_Master_Transmit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <SD_MPU6050_ReadTemperature+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 2, 1000) != HAL_OK);
 8001f7a:	bf00      	nop
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	b299      	uxth	r1, r3
 8001f80:	f107 020c 	add.w	r2, r7, #12
 8001f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f001 fbfd 	bl	800378c <HAL_I2C_Master_Receive>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f1      	bne.n	8001f7c <SD_MPU6050_ReadTemperature+0x38>

	/* Format temperature */
	temp = (data[0] << 8 | data[1]);
 8001f98:	7b3b      	ldrb	r3, [r7, #12]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	7b7b      	ldrb	r3, [r7, #13]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	823b      	strh	r3, [r7, #16]
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001fa6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001fd4 <SD_MPU6050_ReadTemperature+0x90>
 8001fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fd8 <SD_MPU6050_ReadTemperature+0x94>
 8001fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	43aa0000 	.word	0x43aa0000
 8001fd8:	42121eb8 	.word	0x42121eb8

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_MspInit+0x44>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_MspInit+0x44>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <HAL_MspInit+0x44>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_MspInit+0x44>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_MspInit+0x44>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_MspInit+0x44>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08e      	sub	sp, #56	; 0x38
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_ETH_MspInit+0x158>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f040 8096 	bne.w	8002174 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002048:	4b4d      	ldr	r3, [pc, #308]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800204e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002052:	6313      	str	r3, [r2, #48]	; 0x30
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	623b      	str	r3, [r7, #32]
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a46      	ldr	r2, [pc, #280]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a40      	ldr	r2, [pc, #256]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800207e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a34      	ldr	r2, [pc, #208]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d8:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_ETH_MspInit+0x15c>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020f0:	2332      	movs	r3, #50	; 0x32
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002100:	230b      	movs	r3, #11
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	4619      	mov	r1, r3
 800210a:	481e      	ldr	r0, [pc, #120]	; (8002184 <HAL_ETH_MspInit+0x160>)
 800210c:	f000 fff6 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002110:	2386      	movs	r3, #134	; 0x86
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002120:	230b      	movs	r3, #11
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002128:	4619      	mov	r1, r3
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <HAL_ETH_MspInit+0x164>)
 800212c:	f000 ffe6 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002142:	230b      	movs	r3, #11
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	480f      	ldr	r0, [pc, #60]	; (800218c <HAL_ETH_MspInit+0x168>)
 800214e:	f000 ffd5 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002152:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002164:	230b      	movs	r3, #11
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_ETH_MspInit+0x16c>)
 8002170:	f000 ffc4 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002174:	bf00      	nop
 8002176:	3738      	adds	r7, #56	; 0x38
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40028000 	.word	0x40028000
 8002180:	40023800 	.word	0x40023800
 8002184:	40020800 	.word	0x40020800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40021800 	.word	0x40021800

08002194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a17      	ldr	r2, [pc, #92]	; (8002210 <HAL_I2C_MspInit+0x7c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d127      	bne.n	8002206 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b6:	4b17      	ldr	r3, [pc, #92]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ce:	2303      	movs	r3, #3
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021de:	2304      	movs	r3, #4
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <HAL_I2C_MspInit+0x84>)
 80021ea:	f000 ff87 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_I2C_MspInit+0x80>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40005800 	.word	0x40005800
 8002214:	40023800 	.word	0x40023800
 8002218:	40021400 	.word	0x40021400

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <HAL_TIM_Base_MspInit+0x44>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d113      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 8002234:	f043 0310 	orr.w	r3, r3, #16
 8002238:	6413      	str	r3, [r2, #64]	; 0x40
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_TIM_Base_MspInit+0x48>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2036      	movs	r0, #54	; 0x36
 800224c:	f000 fab3 	bl	80027b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002250:	2036      	movs	r0, #54	; 0x36
 8002252:	f000 facc 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40001000 	.word	0x40001000
 8002264:	40023800 	.word	0x40023800

08002268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <HAL_UART_MspInit+0x7c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d128      	bne.n	80022dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_UART_MspInit+0x80>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_UART_MspInit+0x80>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0x80>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0x80>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_UART_MspInit+0x80>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_UART_MspInit+0x80>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022cc:	2307      	movs	r3, #7
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <HAL_UART_MspInit+0x84>)
 80022d8:	f000 ff10 	bl	80030fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40004800 	.word	0x40004800
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020c00 	.word	0x40020c00

080022f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002310:	d141      	bne.n	8002396 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800232a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800233c:	230a      	movs	r3, #10
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	4817      	ldr	r0, [pc, #92]	; (80023a4 <HAL_PCD_MspInit+0xb4>)
 8002348:	f000 fed8 	bl	80030fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800234c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	4619      	mov	r1, r3
 8002360:	4810      	ldr	r0, [pc, #64]	; (80023a4 <HAL_PCD_MspInit+0xb4>)
 8002362:	f000 fecb 	bl	80030fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	6353      	str	r3, [r2, #52]	; 0x34
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_PCD_MspInit+0xb0>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <HardFault_Handler+0x4>

080023bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <MemManage_Handler+0x4>

080023c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <BusFault_Handler+0x4>

080023c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <UsageFault_Handler+0x4>

080023ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fc:	f000 f8be 	bl	800257c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}

08002404 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM6_DAC_IRQHandler+0x10>)
 800240a:	f003 f8ff 	bl	800560c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000768 	.word	0x20000768

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f004 fb10 	bl	8006a6c <__errno>
 800244c:	4602      	mov	r2, r0
 800244e:	230c      	movs	r3, #12
 8002450:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20080000 	.word	0x20080000
 8002478:	00000400 	.word	0x00000400
 800247c:	20000218 	.word	0x20000218
 8002480:	20000858 	.word	0x20000858

08002484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <SystemInit+0x28>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <SystemInit+0x28>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SystemInit+0x28>)
 800249a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800249e:	609a      	str	r2, [r3, #8]
#endif
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024b6:	e003      	b.n	80024c0 <LoopCopyDataInit>

080024b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024be:	3104      	adds	r1, #4

080024c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024c0:	480b      	ldr	r0, [pc, #44]	; (80024f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024c8:	d3f6      	bcc.n	80024b8 <CopyDataInit>
  ldr  r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024cc:	e002      	b.n	80024d4 <LoopFillZerobss>

080024ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024d0:	f842 3b04 	str.w	r3, [r2], #4

080024d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024d8:	d3f9      	bcc.n	80024ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024da:	f7ff ffd3 	bl	8002484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f004 facb 	bl	8006a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7fe fbf5 	bl	8000cd0 <main>
  bx  lr    
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80024ec:	0800af58 	.word	0x0800af58
  ldr  r0, =_sdata
 80024f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024f4:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80024f8:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80024fc:	20000854 	.word	0x20000854

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>

08002502 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002506:	2003      	movs	r0, #3
 8002508:	f000 f94a 	bl	80027a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250c:	2000      	movs	r0, #0
 800250e:	f000 f805 	bl	800251c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002512:	f7ff fd63 	bl	8001fdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_InitTick+0x54>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x58>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002532:	fbb3 f3f1 	udiv	r3, r3, r1
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f000 f965 	bl	800280a <HAL_SYSTICK_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00e      	b.n	8002568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d80a      	bhi.n	8002566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002550:	2200      	movs	r2, #0
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002558:	f000 f92d 	bl	80027b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800255c:	4a06      	ldr	r2, [pc, #24]	; (8002578 <HAL_InitTick+0x5c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	2000000c 	.word	0x2000000c
 8002574:	20000014 	.word	0x20000014
 8002578:	20000010 	.word	0x20000010

0800257c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x20>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x24>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_IncTick+0x24>)
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000014 	.word	0x20000014
 80025a0:	2000084c 	.word	0x2000084c

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000084c 	.word	0x2000084c

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025d4:	d005      	beq.n	80025e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_Delay+0x40>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e2:	bf00      	nop
 80025e4:	f7ff ffde 	bl	80025a4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d8f7      	bhi.n	80025e4 <HAL_Delay+0x28>
  {
  }
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000014 	.word	0x20000014

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <__NVIC_SetPriorityGrouping+0x40>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	4313      	orrs	r3, r2
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x40>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00
 8002644:	05fa0000 	.word	0x05fa0000

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d301      	bcc.n	8002772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276e:	2301      	movs	r3, #1
 8002770:	e00f      	b.n	8002792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SysTick_Config+0x40>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277a:	210f      	movs	r1, #15
 800277c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002780:	f7ff ff8e 	bl	80026a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SysTick_Config+0x40>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <SysTick_Config+0x40>)
 800278c:	2207      	movs	r2, #7
 800278e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	e000e010 	.word	0xe000e010

080027a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff29 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff3e 	bl	8002648 <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff8e 	bl	80026f4 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5d 	bl	80026a0 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff31 	bl	8002664 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa2 	bl	800275c <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002834:	4ba9      	ldr	r3, [pc, #676]	; (8002adc <HAL_ETH_Init+0x2b8>)
 8002836:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e183      	b.n	8002b52 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fbe0 	bl	8002024 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <HAL_ETH_Init+0x2bc>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	4a9d      	ldr	r2, [pc, #628]	; (8002ae0 <HAL_ETH_Init+0x2bc>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286e:	6453      	str	r3, [r2, #68]	; 0x44
 8002870:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <HAL_ETH_Init+0x2bc>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800287c:	4b99      	ldr	r3, [pc, #612]	; (8002ae4 <HAL_ETH_Init+0x2c0>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a98      	ldr	r2, [pc, #608]	; (8002ae4 <HAL_ETH_Init+0x2c0>)
 8002882:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002886:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002888:	4b96      	ldr	r3, [pc, #600]	; (8002ae4 <HAL_ETH_Init+0x2c0>)
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4994      	ldr	r1, [pc, #592]	; (8002ae4 <HAL_ETH_Init+0x2c0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80028ae:	f7ff fe79 	bl	80025a4 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80028b4:	e011      	b.n	80028da <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80028b6:	f7ff fe75 	bl	80025a4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028c4:	d909      	bls.n	80028da <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2203      	movs	r2, #3
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e13b      	b.n	8002b52 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e4      	bne.n	80028b6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f023 031c 	bic.w	r3, r3, #28
 80028fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80028fc:	f002 f9d6 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8002900:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4a78      	ldr	r2, [pc, #480]	; (8002ae8 <HAL_ETH_Init+0x2c4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d908      	bls.n	800291c <HAL_ETH_Init+0xf8>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4a77      	ldr	r2, [pc, #476]	; (8002aec <HAL_ETH_Init+0x2c8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d804      	bhi.n	800291c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e027      	b.n	800296c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4a73      	ldr	r2, [pc, #460]	; (8002aec <HAL_ETH_Init+0x2c8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d908      	bls.n	8002936 <HAL_ETH_Init+0x112>
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_ETH_Init+0x2cc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d804      	bhi.n	8002936 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f043 030c 	orr.w	r3, r3, #12
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	e01a      	b.n	800296c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	4a6d      	ldr	r2, [pc, #436]	; (8002af0 <HAL_ETH_Init+0x2cc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d903      	bls.n	8002946 <HAL_ETH_Init+0x122>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4a6c      	ldr	r2, [pc, #432]	; (8002af4 <HAL_ETH_Init+0x2d0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d911      	bls.n	800296a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4a6a      	ldr	r2, [pc, #424]	; (8002af4 <HAL_ETH_Init+0x2d0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d908      	bls.n	8002960 <HAL_ETH_Init+0x13c>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4a69      	ldr	r2, [pc, #420]	; (8002af8 <HAL_ETH_Init+0x2d4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d804      	bhi.n	8002960 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e005      	b.n	800296c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e000      	b.n	800296c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800296a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69fa      	ldr	r2, [r7, #28]
 8002972:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002978:	2100      	movs	r1, #0
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f956 	bl	8002c2c <HAL_ETH_WritePHYRegister>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800298a:	6939      	ldr	r1, [r7, #16]
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f9b3 	bl	8002cf8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0d9      	b.n	8002b52 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800299e:	20ff      	movs	r0, #255	; 0xff
 80029a0:	f7ff fe0c 	bl	80025bc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a7 	beq.w	8002afc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ae:	f7ff fdf9 	bl	80025a4 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	461a      	mov	r2, r3
 80029ba:	2101      	movs	r1, #1
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f8cd 	bl	8002b5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80029c2:	f7ff fdef 	bl	80025a4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d90f      	bls.n	80029f4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80029d8:	6939      	ldr	r1, [r7, #16]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f98c 	bl	8002cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0ae      	b.n	8002b52 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0da      	beq.n	80029b4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80029fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a02:	2100      	movs	r1, #0
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f911 	bl	8002c2c <HAL_ETH_WritePHYRegister>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f96e 	bl	8002cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002a24:	2301      	movs	r3, #1
 8002a26:	e094      	b.n	8002b52 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a28:	f7ff fdbc 	bl	80025a4 <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	461a      	mov	r2, r3
 8002a34:	2101      	movs	r1, #1
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f890 	bl	8002b5c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002a3c:	f7ff fdb2 	bl	80025a4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d90f      	bls.n	8002a6e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f94f 	bl	8002cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e071      	b.n	8002b52 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0da      	beq.n	8002a2e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	211f      	movs	r1, #31
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f86b 	bl	8002b5c <HAL_ETH_ReadPHYRegister>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002a90:	6939      	ldr	r1, [r7, #16]
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f930 	bl	8002cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e056      	b.n	8002b52 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e002      	b.n	8002abe <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	e037      	b.n	8002b40 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	e032      	b.n	8002b40 <HAL_ETH_Init+0x31c>
 8002ada:	bf00      	nop
 8002adc:	03938700 	.word	0x03938700
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	01312cff 	.word	0x01312cff
 8002aec:	02160ebf 	.word	0x02160ebf
 8002af0:	039386ff 	.word	0x039386ff
 8002af4:	05f5e0ff 	.word	0x05f5e0ff
 8002af8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f889 	bl	8002c2c <HAL_ETH_WritePHYRegister>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002b24:	6939      	ldr	r1, [r7, #16]
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8e6 	bl	8002cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e00c      	b.n	8002b52 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002b38:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002b3c:	f7ff fd3e 	bl	80025bc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002b40:	6939      	ldr	r1, [r7, #16]
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8d8 	bl	8002cf8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop

08002b5c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	460b      	mov	r3, r1
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b82      	cmp	r3, #130	; 0x82
 8002b7c:	d101      	bne.n	8002b82 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e050      	b.n	8002c24 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2282      	movs	r2, #130	; 0x82
 8002b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 031c 	and.w	r3, r3, #28
 8002b98:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8a1b      	ldrh	r3, [r3, #16]
 8002b9e:	02db      	lsls	r3, r3, #11
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002ba8:	897b      	ldrh	r3, [r7, #10]
 8002baa:	019b      	lsls	r3, r3, #6
 8002bac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f023 0302 	bic.w	r3, r3, #2
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bce:	f7ff fce9 	bl	80025a4 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bd4:	e015      	b.n	8002c02 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002bd6:	f7ff fce5 	bl	80025a4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d309      	bcc.n	8002bfa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e014      	b.n	8002c24 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e4      	bne.n	8002bd6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	460b      	mov	r3, r1
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b42      	cmp	r3, #66	; 0x42
 8002c4c:	d101      	bne.n	8002c52 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e04e      	b.n	8002cf0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2242      	movs	r2, #66	; 0x42
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f003 031c 	and.w	r3, r3, #28
 8002c68:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8a1b      	ldrh	r3, [r3, #16]
 8002c6e:	02db      	lsls	r3, r3, #11
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	019b      	lsls	r3, r3, #6
 8002c7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7ff fc7c 	bl	80025a4 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cae:	e015      	b.n	8002cdc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002cb0:	f7ff fc78 	bl	80025a4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d309      	bcc.n	8002cd4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e00d      	b.n	8002cf0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e4      	bne.n	8002cb0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0b0      	sub	sp, #192	; 0xc0
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d42:	663b      	str	r3, [r7, #96]	; 0x60
 8002d44:	e001      	b.n	8002d4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d54:	2300      	movs	r3, #0
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dd0:	4bab      	ldr	r3, [pc, #684]	; (8003080 <ETH_MACDMAConfig+0x388>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ddc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002de0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002de4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002dea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002dee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002df2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002df8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002dfc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002e00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002e04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002e08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002e0c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002e0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f7ff fbc5 	bl	80025bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002e44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002e4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002e50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002e56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002e5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002e68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002e6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7ff fba0 	bl	80025bc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002e98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ea8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002eac:	4013      	ands	r3, r2
 8002eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eb6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ebc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002ec2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002ec8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002ece:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002ed4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ed6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f7ff fb61 	bl	80025bc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002f08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7ff fb4c 	bl	80025bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002f52:	2304      	movs	r3, #4
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002f76:	2300      	movs	r3, #0
 8002f78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f82:	4413      	add	r3, r2
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <ETH_MACDMAConfig+0x38c>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002f98:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002f9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002f9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002f9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002fa0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002fa2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002fa4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002fa6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002fa8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002faa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002fac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002fae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002fb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002fb6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fca:	4413      	add	r3, r2
 8002fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fda:	4413      	add	r3, r2
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f7ff faea 	bl	80025bc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ff6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ffc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003000:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003004:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003008:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800300a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800300c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800300e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003012:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003030:	2001      	movs	r0, #1
 8003032:	f7ff fac3 	bl	80025bc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003042:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	f241 031c 	movw	r3, #4124	; 0x101c
 8003054:	4413      	add	r3, r2
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6811      	ldr	r1, [r2, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <ETH_MACDMAConfig+0x390>)
 800305e:	431a      	orrs	r2, r3
 8003060:	f241 031c 	movw	r3, #4124	; 0x101c
 8003064:	440b      	add	r3, r1
 8003066:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	461a      	mov	r2, r3
 800306e:	2100      	movs	r1, #0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f80b 	bl	800308c <ETH_MACAddressConfig>
}
 8003076:	bf00      	nop
 8003078:	37c0      	adds	r7, #192	; 0xc0
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	ff20810f 	.word	0xff20810f
 8003084:	f8de3f23 	.word	0xf8de3f23
 8003088:	00010040 	.word	0x00010040

0800308c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3305      	adds	r3, #5
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	3204      	adds	r2, #4
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <ETH_MACAddressConfig+0x68>)
 80030ae:	4413      	add	r3, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3303      	adds	r3, #3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	061a      	lsls	r2, r3, #24
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3302      	adds	r3, #2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	041b      	lsls	r3, r3, #16
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3301      	adds	r3, #1
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	4313      	orrs	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <ETH_MACAddressConfig+0x6c>)
 80030de:	4413      	add	r3, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	6013      	str	r3, [r2, #0]
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40028040 	.word	0x40028040
 80030f8:	40028044 	.word	0x40028044

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e175      	b.n	8003408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800311c:	2201      	movs	r2, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	429a      	cmp	r2, r3
 8003136:	f040 8164 	bne.w	8003402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d00b      	beq.n	800315a <HAL_GPIO_Init+0x5e>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d007      	beq.n	800315a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800314e:	2b11      	cmp	r3, #17
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b12      	cmp	r3, #18
 8003158:	d130      	bne.n	80031bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x100>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b12      	cmp	r3, #18
 80031fa:	d123      	bne.n	8003244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	69b9      	ldr	r1, [r7, #24]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80be 	beq.w	8003402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b65      	ldr	r3, [pc, #404]	; (800341c <HAL_GPIO_Init+0x320>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a64      	ldr	r2, [pc, #400]	; (800341c <HAL_GPIO_Init+0x320>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_GPIO_Init+0x320>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800329e:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_GPIO_Init+0x324>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_GPIO_Init+0x328>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d037      	beq.n	800333a <HAL_GPIO_Init+0x23e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <HAL_GPIO_Init+0x32c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_GPIO_Init+0x23a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a55      	ldr	r2, [pc, #340]	; (800342c <HAL_GPIO_Init+0x330>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d02b      	beq.n	8003332 <HAL_GPIO_Init+0x236>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a54      	ldr	r2, [pc, #336]	; (8003430 <HAL_GPIO_Init+0x334>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d025      	beq.n	800332e <HAL_GPIO_Init+0x232>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a53      	ldr	r2, [pc, #332]	; (8003434 <HAL_GPIO_Init+0x338>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <HAL_GPIO_Init+0x22e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_GPIO_Init+0x33c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x22a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_GPIO_Init+0x340>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x226>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_GPIO_Init+0x344>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x222>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4f      	ldr	r2, [pc, #316]	; (8003444 <HAL_GPIO_Init+0x348>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x21e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4e      	ldr	r2, [pc, #312]	; (8003448 <HAL_GPIO_Init+0x34c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x21a>
 8003312:	2309      	movs	r3, #9
 8003314:	e012      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003316:	230a      	movs	r3, #10
 8003318:	e010      	b.n	800333c <HAL_GPIO_Init+0x240>
 800331a:	2308      	movs	r3, #8
 800331c:	e00e      	b.n	800333c <HAL_GPIO_Init+0x240>
 800331e:	2307      	movs	r3, #7
 8003320:	e00c      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003322:	2306      	movs	r3, #6
 8003324:	e00a      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003326:	2305      	movs	r3, #5
 8003328:	e008      	b.n	800333c <HAL_GPIO_Init+0x240>
 800332a:	2304      	movs	r3, #4
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x240>
 800332e:	2303      	movs	r3, #3
 8003330:	e004      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003332:	2302      	movs	r3, #2
 8003334:	e002      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x240>
 800333a:	2300      	movs	r3, #0
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f002 0203 	and.w	r2, r2, #3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4093      	lsls	r3, r2
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800334c:	4934      	ldr	r1, [pc, #208]	; (8003420 <HAL_GPIO_Init+0x324>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800335a:	4b3c      	ldr	r3, [pc, #240]	; (800344c <HAL_GPIO_Init+0x350>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800337e:	4a33      	ldr	r2, [pc, #204]	; (800344c <HAL_GPIO_Init+0x350>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <HAL_GPIO_Init+0x350>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_GPIO_Init+0x350>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_GPIO_Init+0x350>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d2:	4a1e      	ldr	r2, [pc, #120]	; (800344c <HAL_GPIO_Init+0x350>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d8:	4b1c      	ldr	r3, [pc, #112]	; (800344c <HAL_GPIO_Init+0x350>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_GPIO_Init+0x350>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	f67f ae86 	bls.w	800311c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003410:	bf00      	nop
 8003412:	3724      	adds	r7, #36	; 0x24
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40023800 	.word	0x40023800
 8003420:	40013800 	.word	0x40013800
 8003424:	40020000 	.word	0x40020000
 8003428:	40020400 	.word	0x40020400
 800342c:	40020800 	.word	0x40020800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40021000 	.word	0x40021000
 8003438:	40021400 	.word	0x40021400
 800343c:	40021800 	.word	0x40021800
 8003440:	40021c00 	.word	0x40021c00
 8003444:	40022000 	.word	0x40022000
 8003448:	40022400 	.word	0x40022400
 800344c:	40013c00 	.word	0x40013c00

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07f      	b.n	8003596 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe fe72 	bl	8002194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d107      	bne.n	80034fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e006      	b.n	800350c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800350a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d104      	bne.n	800351e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_I2C_Init+0x11c>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800353c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	ea42 0103 	orr.w	r1, r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	021a      	lsls	r2, r3, #8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	02008000 	.word	0x02008000

080035a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
 80035b4:	4613      	mov	r3, r2
 80035b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	f040 80da 	bne.w	800377a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_I2C_Master_Transmit+0x30>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e0d3      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035dc:	f7fe ffe2 	bl	80025a4 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2319      	movs	r3, #25
 80035e8:	2201      	movs	r2, #1
 80035ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 faee 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0be      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2221      	movs	r2, #33	; 0x21
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2210      	movs	r2, #16
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	893a      	ldrh	r2, [r7, #8]
 800361e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	2bff      	cmp	r3, #255	; 0xff
 800362e:	d90e      	bls.n	800364e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	22ff      	movs	r2, #255	; 0xff
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	b2da      	uxtb	r2, r3
 800363c:	8979      	ldrh	r1, [r7, #10]
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_I2C_Master_Transmit+0x1e0>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fc50 	bl	8003eec <I2C_TransferConfig>
 800364c:	e06c      	b.n	8003728 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	4b48      	ldr	r3, [pc, #288]	; (8003784 <HAL_I2C_Master_Transmit+0x1e0>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fc3f 	bl	8003eec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800366e:	e05b      	b.n	8003728 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	6a39      	ldr	r1, [r7, #32]
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 faeb 	bl	8003c50 <I2C_WaitOnTXISFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e07b      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d034      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x184>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d130      	bne.n	8003728 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fa7d 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04d      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2bff      	cmp	r3, #255	; 0xff
 80036e8:	d90e      	bls.n	8003708 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	22ff      	movs	r2, #255	; 0xff
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fbf3 	bl	8003eec <I2C_TransferConfig>
 8003706:	e00f      	b.n	8003728 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	b2da      	uxtb	r2, r3
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fbe2 	bl	8003eec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d19e      	bne.n	8003670 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	6a39      	ldr	r1, [r7, #32]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 faca 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e01a      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_I2C_Master_Transmit+0x1e4>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	80002000 	.word	0x80002000
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	461a      	mov	r2, r3
 8003798:	460b      	mov	r3, r1
 800379a:	817b      	strh	r3, [r7, #10]
 800379c:	4613      	mov	r3, r2
 800379e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	f040 80db 	bne.w	8003964 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2C_Master_Receive+0x30>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e0d4      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c4:	f7fe feee 	bl	80025a4 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2319      	movs	r3, #25
 80037d0:	2201      	movs	r2, #1
 80037d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f9fa 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0bf      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2222      	movs	r2, #34	; 0x22
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2210      	movs	r2, #16
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2bff      	cmp	r3, #255	; 0xff
 8003816:	d90e      	bls.n	8003836 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	22ff      	movs	r2, #255	; 0xff
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	4b52      	ldr	r3, [pc, #328]	; (8003970 <HAL_I2C_Master_Receive+0x1e4>)
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb5c 	bl	8003eec <I2C_TransferConfig>
 8003834:	e06d      	b.n	8003912 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	4b49      	ldr	r3, [pc, #292]	; (8003970 <HAL_I2C_Master_Receive+0x1e4>)
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fb4b 	bl	8003eec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003856:	e05c      	b.n	8003912 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	6a39      	ldr	r1, [r7, #32]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fa73 	bl	8003d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e07c      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d034      	beq.n	8003912 <HAL_I2C_Master_Receive+0x186>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d130      	bne.n	8003912 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2200      	movs	r2, #0
 80038b8:	2180      	movs	r1, #128	; 0x80
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f988 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e04d      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2bff      	cmp	r3, #255	; 0xff
 80038d2:	d90e      	bls.n	80038f2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	22ff      	movs	r2, #255	; 0xff
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	8979      	ldrh	r1, [r7, #10]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fafe 	bl	8003eec <I2C_TransferConfig>
 80038f0:	e00f      	b.n	8003912 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	b2da      	uxtb	r2, r3
 8003902:	8979      	ldrh	r1, [r7, #10]
 8003904:	2300      	movs	r3, #0
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 faed 	bl	8003eec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d19d      	bne.n	8003858 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	6a39      	ldr	r1, [r7, #32]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9d5 	bl	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e01a      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2220      	movs	r2, #32
 8003936:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_I2C_Master_Receive+0x1e8>)
 8003944:	400b      	ands	r3, r1
 8003946:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	80002400 	.word	0x80002400
 8003974:	fe00e800 	.word	0xfe00e800

08003978 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	460b      	mov	r3, r1
 8003986:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	f040 80ef 	bne.w	8003b78 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039a8:	d101      	bne.n	80039ae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
 80039ac:	e0e5      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_I2C_IsDeviceReady+0x44>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0de      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2224      	movs	r2, #36	; 0x24
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_I2C_IsDeviceReady+0x6e>
 80039da:	897b      	ldrh	r3, [r7, #10]
 80039dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039e0:	4b68      	ldr	r3, [pc, #416]	; (8003b84 <HAL_I2C_IsDeviceReady+0x20c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	e004      	b.n	80039f0 <HAL_I2C_IsDeviceReady+0x78>
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80039f6:	f7fe fdd5 	bl	80025a4 <HAL_GetTick>
 80039fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a28:	e034      	b.n	8003a94 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a30:	d01a      	beq.n	8003a68 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe fdb7 	bl	80025a4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <HAL_I2C_IsDeviceReady+0xd0>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10f      	bne.n	8003a68 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e088      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	bf0c      	ite	eq
 8003a76:	2301      	moveq	r3, #1
 8003a78:	2300      	movne	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f003 0310 	and.w	r3, r3, #16
 8003a88:	2b10      	cmp	r3, #16
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a94:	7ffb      	ldrb	r3, [r7, #31]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_I2C_IsDeviceReady+0x128>
 8003a9a:	7fbb      	ldrb	r3, [r7, #30]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0c4      	beq.n	8003a2a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d01a      	beq.n	8003ae4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f889 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e058      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e04a      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	2120      	movs	r1, #32
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f86e 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e03d      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2210      	movs	r2, #16
 8003b04:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d118      	bne.n	8003b48 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b24:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2120      	movs	r1, #32
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f84d 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e01c      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2220      	movs	r2, #32
 8003b46:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	f63f af3d 	bhi.w	80039d2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	02002000 	.word	0x02002000

08003b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d103      	bne.n	8003ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	619a      	str	r2, [r3, #24]
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	e022      	b.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be8:	d01e      	beq.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe fcdb 	bl	80025a4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e00f      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d0cd      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c5c:	e02c      	b.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8dc 	bl	8003e20 <I2C_IsAcknowledgeFailed>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e02a      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c78:	d01e      	beq.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fe fc93 	bl	80025a4 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e007      	b.n	8003cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d1cb      	bne.n	8003c5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cdc:	e028      	b.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f89c 	bl	8003e20 <I2C_IsAcknowledgeFailed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e026      	b.n	8003d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7fe fc57 	bl	80025a4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d302      	bcc.n	8003d08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d113      	bne.n	8003d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e007      	b.n	8003d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d1cf      	bne.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d54:	e055      	b.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f860 	bl	8003e20 <I2C_IsAcknowledgeFailed>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e053      	b.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d129      	bne.n	8003dcc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d105      	bne.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e03f      	b.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2220      	movs	r2, #32
 8003d98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6859      	ldr	r1, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003da6:	400b      	ands	r3, r1
 8003da8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e022      	b.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dcc:	f7fe fbea 	bl	80025a4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d302      	bcc.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e007      	b.n	8003e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d1a2      	bne.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	2b10      	cmp	r3, #16
 8003e38:	d151      	bne.n	8003ede <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e3a:	e022      	b.n	8003e82 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e42:	d01e      	beq.n	8003e82 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fe fbae 	bl	80025a4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <I2C_IsAcknowledgeFailed+0x3a>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d113      	bne.n	8003e82 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e02e      	b.n	8003ee0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d1d5      	bne.n	8003e3c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2210      	movs	r2, #16
 8003e96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fe71 	bl	8003b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	fe00e800 	.word	0xfe00e800

08003eec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	4613      	mov	r3, r2
 8003efc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	0d5b      	lsrs	r3, r3, #21
 8003f08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <I2C_TransferConfig+0x58>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	43db      	mvns	r3, r3
 8003f12:	ea02 0103 	and.w	r1, r2, r3
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f1c:	7a7b      	ldrb	r3, [r7, #9]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	03ff63ff 	.word	0x03ff63ff

08003f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d138      	bne.n	8003fd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e032      	b.n	8003fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0201 	bic.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6819      	ldr	r1, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d139      	bne.n	8004068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e033      	b.n	800406a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	; 0x24
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004078:	b08f      	sub	sp, #60	; 0x3c
 800407a:	af0a      	add	r7, sp, #40	; 0x28
 800407c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e116      	b.n	80042b6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe f924 	bl	80022f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f002 fa78 	bl	80065bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	687e      	ldr	r6, [r7, #4]
 80040d4:	466d      	mov	r5, sp
 80040d6:	f106 0410 	add.w	r4, r6, #16
 80040da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ea:	1d33      	adds	r3, r6, #4
 80040ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040ee:	6838      	ldr	r0, [r7, #0]
 80040f0:	f002 fa0c 	bl	800650c <USB_CoreInit>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2202      	movs	r2, #2
 80040fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0d7      	b.n	80042b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f002 fa66 	bl	80065de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
 8004116:	e04a      	b.n	80041ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	333d      	adds	r3, #61	; 0x3d
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	333c      	adds	r3, #60	; 0x3c
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	b298      	uxth	r0, r3
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3342      	adds	r3, #66	; 0x42
 8004154:	4602      	mov	r2, r0
 8004156:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	333f      	adds	r3, #63	; 0x3f
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	3344      	adds	r3, #68	; 0x44
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004180:	7bfa      	ldrb	r2, [r7, #15]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3348      	adds	r3, #72	; 0x48
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3350      	adds	r3, #80	; 0x50
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	3301      	adds	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3af      	bcc.n	8004118 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	73fb      	strb	r3, [r7, #15]
 80041bc:	e044      	b.n	8004248 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80041e6:	7bfa      	ldrb	r2, [r7, #15]
 80041e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3b5      	bcc.n	80041be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	687e      	ldr	r6, [r7, #4]
 800425a:	466d      	mov	r5, sp
 800425c:	f106 0410 	add.w	r4, r6, #16
 8004260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004262:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004268:	e894 0003 	ldmia.w	r4, {r0, r1}
 800426c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004270:	1d33      	adds	r3, r6, #4
 8004272:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004274:	6838      	ldr	r0, [r7, #0]
 8004276:	f002 f9dd 	bl	8006634 <USB_DevInit>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e014      	b.n	80042b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d102      	bne.n	80042aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f80b 	bl	80042c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f002 fb8f 	bl	80069d2 <USB_DevDisconnect>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080042c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_PCDEx_ActivateLPM+0x44>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	10000003 	.word	0x10000003

08004308 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a04      	ldr	r2, [pc, #16]	; (8004324 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40007000 	.word	0x40007000

08004328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	; 0x40
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004354:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004356:	f7fe f925 	bl	80025a4 <HAL_GetTick>
 800435a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800435c:	e009      	b.n	8004372 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800435e:	f7fe f921 	bl	80025a4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436c:	d901      	bls.n	8004372 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e022      	b.n	80043b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d1ee      	bne.n	800435e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800438a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800438c:	f7fe f90a 	bl	80025a4 <HAL_GetTick>
 8004390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004392:	e009      	b.n	80043a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004394:	f7fe f906 	bl	80025a4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a2:	d901      	bls.n	80043a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e007      	b.n	80043b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b4:	d1ee      	bne.n	8004394 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000

080043c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e29b      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8087 	beq.w	80044fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043ec:	4b96      	ldr	r3, [pc, #600]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d00c      	beq.n	8004412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f8:	4b93      	ldr	r3, [pc, #588]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 030c 	and.w	r3, r3, #12
 8004400:	2b08      	cmp	r3, #8
 8004402:	d112      	bne.n	800442a <HAL_RCC_OscConfig+0x62>
 8004404:	4b90      	ldr	r3, [pc, #576]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004410:	d10b      	bne.n	800442a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004412:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d06c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x130>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d168      	bne.n	80044f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e275      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004432:	d106      	bne.n	8004442 <HAL_RCC_OscConfig+0x7a>
 8004434:	4b84      	ldr	r3, [pc, #528]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a83      	ldr	r2, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	e02e      	b.n	80044a0 <HAL_RCC_OscConfig+0xd8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x9c>
 800444a:	4b7f      	ldr	r3, [pc, #508]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a7e      	ldr	r2, [pc, #504]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7b      	ldr	r2, [pc, #492]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800445c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e01d      	b.n	80044a0 <HAL_RCC_OscConfig+0xd8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0xc0>
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b73      	ldr	r3, [pc, #460]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a72      	ldr	r2, [pc, #456]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e00b      	b.n	80044a0 <HAL_RCC_OscConfig+0xd8>
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b6c      	ldr	r3, [pc, #432]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6b      	ldr	r2, [pc, #428]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe f87c 	bl	80025a4 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe f878 	bl	80025a4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e229      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b61      	ldr	r3, [pc, #388]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0xe8>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe f868 	bl	80025a4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe f864 	bl	80025a4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e215      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	4b57      	ldr	r3, [pc, #348]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x110>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d069      	beq.n	80045da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004506:	4b50      	ldr	r3, [pc, #320]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d11c      	bne.n	8004558 <HAL_RCC_OscConfig+0x190>
 800451e:	4b4a      	ldr	r3, [pc, #296]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d116      	bne.n	8004558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452a:	4b47      	ldr	r3, [pc, #284]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x17a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e1e9      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	493d      	ldr	r1, [pc, #244]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	e040      	b.n	80045da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d023      	beq.n	80045a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a38      	ldr	r2, [pc, #224]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe f81a 	bl	80025a4 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004574:	f7fe f816 	bl	80025a4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e1c7      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4929      	ldr	r1, [pc, #164]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]
 80045a6:	e018      	b.n	80045da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a26      	ldr	r2, [pc, #152]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fff6 	bl	80025a4 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fd fff2 	bl	80025a4 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1a3      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d038      	beq.n	8004658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fa:	f7fd ffd3 	bl	80025a4 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004602:	f7fd ffcf 	bl	80025a4 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e180      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x23a>
 8004620:	e01a      	b.n	8004658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <HAL_RCC_OscConfig+0x280>)
 8004628:	f023 0301 	bic.w	r3, r3, #1
 800462c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462e:	f7fd ffb9 	bl	80025a4 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	e00a      	b.n	800464c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004636:	f7fd ffb5 	bl	80025a4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d903      	bls.n	800464c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e166      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
 8004648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464c:	4b92      	ldr	r3, [pc, #584]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800464e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1ee      	bne.n	8004636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a4 	beq.w	80047ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004666:	4b8c      	ldr	r3, [pc, #560]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004672:	4b89      	ldr	r3, [pc, #548]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a88      	ldr	r2, [pc, #544]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b86      	ldr	r3, [pc, #536]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800468e:	4b83      	ldr	r3, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x4d4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800469a:	4b80      	ldr	r3, [pc, #512]	; (800489c <HAL_RCC_OscConfig+0x4d4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7f      	ldr	r2, [pc, #508]	; (800489c <HAL_RCC_OscConfig+0x4d4>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fd ff7d 	bl	80025a4 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fd ff79 	bl	80025a4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b64      	cmp	r3, #100	; 0x64
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e12a      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c0:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x4d4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x31a>
 80046d4:	4b70      	ldr	r3, [pc, #448]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a6f      	ldr	r2, [pc, #444]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	e02d      	b.n	800473e <HAL_RCC_OscConfig+0x376>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x33c>
 80046ea:	4b6b      	ldr	r3, [pc, #428]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a6a      	ldr	r2, [pc, #424]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	4b68      	ldr	r3, [pc, #416]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a67      	ldr	r2, [pc, #412]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80046fc:	f023 0304 	bic.w	r3, r3, #4
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	e01c      	b.n	800473e <HAL_RCC_OscConfig+0x376>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b05      	cmp	r3, #5
 800470a:	d10c      	bne.n	8004726 <HAL_RCC_OscConfig+0x35e>
 800470c:	4b62      	ldr	r3, [pc, #392]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a61      	ldr	r2, [pc, #388]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
 8004718:	4b5f      	ldr	r3, [pc, #380]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	4a5e      	ldr	r2, [pc, #376]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	; 0x70
 8004724:	e00b      	b.n	800473e <HAL_RCC_OscConfig+0x376>
 8004726:	4b5c      	ldr	r3, [pc, #368]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472a:	4a5b      	ldr	r2, [pc, #364]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6713      	str	r3, [r2, #112]	; 0x70
 8004732:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fd ff2d 	bl	80025a4 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	e00a      	b.n	8004764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd ff29 	bl	80025a4 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0d8      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004764:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ee      	beq.n	800474e <HAL_RCC_OscConfig+0x386>
 8004770:	e014      	b.n	800479c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fd ff17 	bl	80025a4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004778:	e00a      	b.n	8004790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477a:	f7fd ff13 	bl	80025a4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	f241 3288 	movw	r2, #5000	; 0x1388
 8004788:	4293      	cmp	r3, r2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0c2      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004790:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ee      	bne.n	800477a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80ae 	beq.w	8004914 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b8:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d06d      	beq.n	80048a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d14b      	bne.n	8004864 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047cc:	4b32      	ldr	r3, [pc, #200]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a31      	ldr	r2, [pc, #196]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fd fee4 	bl	80025a4 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd fee0 	bl	80025a4 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e091      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b29      	ldr	r3, [pc, #164]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69da      	ldr	r2, [r3, #28]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	3b01      	subs	r3, #1
 8004818:	041b      	lsls	r3, r3, #16
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	061b      	lsls	r3, r3, #24
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	071b      	lsls	r3, r3, #28
 800482a:	491b      	ldr	r1, [pc, #108]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800482c:	4313      	orrs	r3, r2
 800482e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fd feb2 	bl	80025a4 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004844:	f7fd feae 	bl	80025a4 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e05f      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x47c>
 8004862:	e057      	b.n	8004914 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0b      	ldr	r2, [pc, #44]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fd fe98 	bl	80025a4 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fd fe94 	bl	80025a4 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e045      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_OscConfig+0x4d0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x4b0>
 8004896:	e03d      	b.n	8004914 <HAL_RCC_OscConfig+0x54c>
 8004898:	40023800 	.word	0x40023800
 800489c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048a0:	4b1f      	ldr	r3, [pc, #124]	; (8004920 <HAL_RCC_OscConfig+0x558>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d030      	beq.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d129      	bne.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d122      	bne.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048d0:	4013      	ands	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d8:	4293      	cmp	r3, r2
 80048da:	d119      	bne.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	3b01      	subs	r3, #1
 80048ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d10f      	bne.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800

08004924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0d0      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 020f 	bic.w	r2, r3, #15
 8004952:	4965      	ldr	r1, [pc, #404]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b8      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 800498a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800498e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4a52      	ldr	r2, [pc, #328]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	494d      	ldr	r1, [pc, #308]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d040      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d115      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e073      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06b      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b39      	ldr	r3, [pc, #228]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4936      	ldr	r1, [pc, #216]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fd fdc4 	bl	80025a4 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fd fdc0 	bl	80025a4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e053      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d210      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	4922      	ldr	r1, [pc, #136]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e032      	b.n	8004ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab6:	f000 f821 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_ClockConfig+0x1c8>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x1cc>)
 8004ac8:	5cd3      	ldrb	r3, [r2, r3]
 8004aca:	fa21 f303 	lsr.w	r3, r1, r3
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1d4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fd fd20 	bl	800251c <HAL_InitTick>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023c00 	.word	0x40023c00
 8004aec:	40023800 	.word	0x40023800
 8004af0:	0800ac34 	.word	0x0800ac34
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	20000010 	.word	0x20000010

08004afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x32>
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d008      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x38>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 80b4 	bne.w	8004c90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b5e      	ldr	r3, [pc, #376]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b2a:	60bb      	str	r3, [r7, #8]
      break;
 8004b2c:	e0b3      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004b30:	60bb      	str	r3, [r7, #8]
      break;
 8004b32:	e0b0      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b34:	4b5a      	ldr	r3, [pc, #360]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b3e:	4b58      	ldr	r3, [pc, #352]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d04a      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	ea03 0501 	and.w	r5, r3, r1
 8004b60:	ea04 0602 	and.w	r6, r4, r2
 8004b64:	4629      	mov	r1, r5
 8004b66:	4632      	mov	r2, r6
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	f04f 0400 	mov.w	r4, #0
 8004b70:	0154      	lsls	r4, r2, #5
 8004b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b76:	014b      	lsls	r3, r1, #5
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	1b49      	subs	r1, r1, r5
 8004b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f04f 0400 	mov.w	r4, #0
 8004b8a:	0194      	lsls	r4, r2, #6
 8004b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b90:	018b      	lsls	r3, r1, #6
 8004b92:	1a5b      	subs	r3, r3, r1
 8004b94:	eb64 0402 	sbc.w	r4, r4, r2
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	00e2      	lsls	r2, r4, #3
 8004ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ba6:	00d9      	lsls	r1, r3, #3
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4614      	mov	r4, r2
 8004bac:	195b      	adds	r3, r3, r5
 8004bae:	eb44 0406 	adc.w	r4, r4, r6
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	0262      	lsls	r2, r4, #9
 8004bbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004bc0:	0259      	lsls	r1, r3, #9
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	4621      	mov	r1, r4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f04f 0400 	mov.w	r4, #0
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	f7fb fb8c 	bl	80002f0 <__aeabi_uldivmod>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e049      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be0:	4b2f      	ldr	r3, [pc, #188]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	099b      	lsrs	r3, r3, #6
 8004be6:	f04f 0400 	mov.w	r4, #0
 8004bea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	ea03 0501 	and.w	r5, r3, r1
 8004bf6:	ea04 0602 	and.w	r6, r4, r2
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	f04f 0400 	mov.w	r4, #0
 8004c06:	0154      	lsls	r4, r2, #5
 8004c08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c0c:	014b      	lsls	r3, r1, #5
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4622      	mov	r2, r4
 8004c12:	1b49      	subs	r1, r1, r5
 8004c14:	eb62 0206 	sbc.w	r2, r2, r6
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	f04f 0400 	mov.w	r4, #0
 8004c20:	0194      	lsls	r4, r2, #6
 8004c22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c26:	018b      	lsls	r3, r1, #6
 8004c28:	1a5b      	subs	r3, r3, r1
 8004c2a:	eb64 0402 	sbc.w	r4, r4, r2
 8004c2e:	f04f 0100 	mov.w	r1, #0
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c3c:	00d9      	lsls	r1, r3, #3
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4614      	mov	r4, r2
 8004c42:	195b      	adds	r3, r3, r5
 8004c44:	eb44 0406 	adc.w	r4, r4, r6
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	02a2      	lsls	r2, r4, #10
 8004c52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c56:	0299      	lsls	r1, r3, #10
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4614      	mov	r4, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	4621      	mov	r1, r4
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f04f 0400 	mov.w	r4, #0
 8004c66:	461a      	mov	r2, r3
 8004c68:	4623      	mov	r3, r4
 8004c6a:	f7fb fb41 	bl	80002f0 <__aeabi_uldivmod>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	460c      	mov	r4, r1
 8004c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	60bb      	str	r3, [r7, #8]
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c92:	60bb      	str	r3, [r7, #8]
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	68bb      	ldr	r3, [r7, #8]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	007a1200 	.word	0x007a1200

08004cac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	2000000c 	.word	0x2000000c

08004cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cc8:	f7ff fff0 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0a9b      	lsrs	r3, r3, #10
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4a03      	ldr	r2, [pc, #12]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cda:	5cd3      	ldrb	r3, [r2, r3]
 8004cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	0800ac44 	.word	0x0800ac44

08004cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cf0:	f7ff ffdc 	bl	8004cac <HAL_RCC_GetHCLKFreq>
 8004cf4:	4601      	mov	r1, r0
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0b5b      	lsrs	r3, r3, #13
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d02:	5cd3      	ldrb	r3, [r2, r3]
 8004d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	0800ac44 	.word	0x0800ac44

08004d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d012      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d3c:	4b69      	ldr	r3, [pc, #420]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	4a68      	ldr	r2, [pc, #416]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d46:	6093      	str	r3, [r2, #8]
 8004d48:	4b66      	ldr	r3, [pc, #408]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	4964      	ldr	r1, [pc, #400]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d6e:	4b5d      	ldr	r3, [pc, #372]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	4959      	ldr	r1, [pc, #356]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d017      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004daa:	4b4e      	ldr	r3, [pc, #312]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	494a      	ldr	r1, [pc, #296]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc8:	d101      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 808b 	beq.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	4b3a      	ldr	r3, [pc, #232]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	4a39      	ldr	r2, [pc, #228]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e02:	6413      	str	r3, [r2, #64]	; 0x40
 8004e04:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a34      	ldr	r2, [pc, #208]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd fbc2 	bl	80025a4 <HAL_GetTick>
 8004e20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e24:	f7fd fbbe 	bl	80025a4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e38d      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e36:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e42:	4b28      	ldr	r3, [pc, #160]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d035      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d02e      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e82:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e88:	4b16      	ldr	r3, [pc, #88]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d114      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fb86 	bl	80025a4 <HAL_GetTick>
 8004e98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9c:	f7fd fb82 	bl	80025a4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e34f      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ee      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eda:	400b      	ands	r3, r1
 8004edc:	4901      	ldr	r1, [pc, #4]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
 8004ee2:	e00b      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	0ffffcff 	.word	0x0ffffcff
 8004ef0:	4bb3      	ldr	r3, [pc, #716]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4ab2      	ldr	r2, [pc, #712]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004efa:	6093      	str	r3, [r2, #8]
 8004efc:	4bb0      	ldr	r3, [pc, #704]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f08:	49ad      	ldr	r1, [pc, #692]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d010      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f1a:	4ba9      	ldr	r3, [pc, #676]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f20:	4aa7      	ldr	r2, [pc, #668]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f2a:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	49a2      	ldr	r1, [pc, #648]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f48:	4b9d      	ldr	r3, [pc, #628]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f56:	499a      	ldr	r1, [pc, #616]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f6a:	4b95      	ldr	r3, [pc, #596]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f78:	4991      	ldr	r1, [pc, #580]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f8c:	4b8c      	ldr	r3, [pc, #560]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9a:	4989      	ldr	r1, [pc, #548]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fae:	4b84      	ldr	r3, [pc, #528]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4980      	ldr	r1, [pc, #512]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd0:	4b7b      	ldr	r3, [pc, #492]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4978      	ldr	r1, [pc, #480]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff2:	4b73      	ldr	r3, [pc, #460]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f023 020c 	bic.w	r2, r3, #12
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005000:	496f      	ldr	r1, [pc, #444]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	4967      	ldr	r1, [pc, #412]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005036:	4b62      	ldr	r3, [pc, #392]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005044:	495e      	ldr	r1, [pc, #376]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005058:	4b59      	ldr	r3, [pc, #356]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	4956      	ldr	r1, [pc, #344]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800507a:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005088:	494d      	ldr	r1, [pc, #308]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800509c:	4b48      	ldr	r3, [pc, #288]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	4945      	ldr	r1, [pc, #276]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050be:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050cc:	493c      	ldr	r1, [pc, #240]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050e0:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ee:	4934      	ldr	r1, [pc, #208]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d011      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005102:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005110:	492b      	ldr	r1, [pc, #172]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005120:	d101      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005142:	4b1f      	ldr	r3, [pc, #124]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005150:	491b      	ldr	r1, [pc, #108]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005164:	4b16      	ldr	r3, [pc, #88]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005174:	4912      	ldr	r1, [pc, #72]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00b      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005188:	4b0d      	ldr	r3, [pc, #52]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	4909      	ldr	r1, [pc, #36]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00f      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	e002      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80051be:	bf00      	nop
 80051c0:	40023800 	.word	0x40023800
 80051c4:	4985      	ldr	r1, [pc, #532]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00b      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051d8:	4b80      	ldr	r3, [pc, #512]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e8:	497c      	ldr	r1, [pc, #496]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d005      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051fe:	f040 80d6 	bne.w	80053ae <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a75      	ldr	r2, [pc, #468]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005208:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800520c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520e:	f7fd f9c9 	bl	80025a4 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005216:	f7fd f9c5 	bl	80025a4 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b64      	cmp	r3, #100	; 0x64
 8005222:	d901      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e194      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005228:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d021      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11d      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005248:	4b64      	ldr	r3, [pc, #400]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005256:	4b61      	ldr	r3, [pc, #388]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525c:	0e1b      	lsrs	r3, r3, #24
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	019a      	lsls	r2, r3, #6
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	431a      	orrs	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	071b      	lsls	r3, r3, #28
 800527c:	4957      	ldr	r1, [pc, #348]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02e      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ae:	d129      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052b0:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	0c1b      	lsrs	r3, r3, #16
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052be:	4b47      	ldr	r3, [pc, #284]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c4:	0f1b      	lsrs	r3, r3, #28
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	019a      	lsls	r2, r3, #6
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	431a      	orrs	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	071b      	lsls	r3, r3, #28
 80052e4:	493d      	ldr	r1, [pc, #244]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052ec:	4b3b      	ldr	r3, [pc, #236]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f2:	f023 021f 	bic.w	r2, r3, #31
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	3b01      	subs	r3, #1
 80052fc:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01d      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	0e1b      	lsrs	r3, r3, #24
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005324:	0f1b      	lsrs	r3, r3, #28
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	019a      	lsls	r2, r3, #6
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	431a      	orrs	r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	061b      	lsls	r3, r3, #24
 800533e:	431a      	orrs	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	071b      	lsls	r3, r3, #28
 8005344:	4925      	ldr	r1, [pc, #148]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d011      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	019a      	lsls	r2, r3, #6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	431a      	orrs	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	071b      	lsls	r3, r3, #28
 8005374:	4919      	ldr	r1, [pc, #100]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800537c:	4b17      	ldr	r3, [pc, #92]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005388:	f7fd f90c 	bl	80025a4 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005390:	f7fd f908 	bl	80025a4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0d7      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a2:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 80cd 	bne.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a08      	ldr	r2, [pc, #32]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c2:	f7fd f8ef 	bl	80025a4 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053c8:	e00a      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053ca:	f7fd f8eb 	bl	80025a4 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b64      	cmp	r3, #100	; 0x64
 80053d6:	d903      	bls.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0ba      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80053dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053e0:	4b5e      	ldr	r3, [pc, #376]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ec:	d0ed      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d009      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800540a:	2b00      	cmp	r3, #0
 800540c:	d02e      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d12a      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005416:	4b51      	ldr	r3, [pc, #324]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005424:	4b4d      	ldr	r3, [pc, #308]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	0f1b      	lsrs	r3, r3, #28
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	019a      	lsls	r2, r3, #6
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	041b      	lsls	r3, r3, #16
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	061b      	lsls	r3, r3, #24
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	071b      	lsls	r3, r3, #28
 800544a:	4944      	ldr	r1, [pc, #272]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005452:	4b42      	ldr	r3, [pc, #264]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005458:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	3b01      	subs	r3, #1
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	493d      	ldr	r1, [pc, #244]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d022      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005480:	d11d      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005488:	0e1b      	lsrs	r3, r3, #24
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005490:	4b32      	ldr	r3, [pc, #200]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	0f1b      	lsrs	r3, r3, #28
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	019a      	lsls	r2, r3, #6
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	041b      	lsls	r3, r3, #16
 80054aa:	431a      	orrs	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	061b      	lsls	r3, r3, #24
 80054b0:	431a      	orrs	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	071b      	lsls	r3, r3, #28
 80054b6:	4929      	ldr	r1, [pc, #164]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d028      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	0e1b      	lsrs	r3, r3, #24
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	019a      	lsls	r2, r3, #6
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	431a      	orrs	r2, r3
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	071b      	lsls	r3, r3, #28
 80054fe:	4917      	ldr	r1, [pc, #92]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	4911      	ldr	r1, [pc, #68]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0e      	ldr	r2, [pc, #56]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005528:	f7fd f83c 	bl	80025a4 <HAL_GetTick>
 800552c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005530:	f7fd f838 	bl	80025a4 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b64      	cmp	r3, #100	; 0x64
 800553c:	d901      	bls.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e007      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d1ef      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800

08005560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e01d      	b.n	80055ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7fc fe48 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f000 f97c 	bl	800589c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_TIM_Base_Start_IT+0x50>)
 80055d8:	4013      	ands	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d00b      	beq.n	80055fa <HAL_TIM_Base_Start_IT+0x42>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d007      	beq.n	80055fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	00010007 	.word	0x00010007

0800560c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0202 	mvn.w	r2, #2
 8005638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f905 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8f7 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f908 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b04      	cmp	r3, #4
 8005674:	d122      	bne.n	80056bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b04      	cmp	r3, #4
 8005682:	d11b      	bne.n	80056bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0204 	mvn.w	r2, #4
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8db 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8cd 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f8de 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d122      	bne.n	8005710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d11b      	bne.n	8005710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f06f 0208 	mvn.w	r2, #8
 80056e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2204      	movs	r2, #4
 80056e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8b1 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 80056fc:	e005      	b.n	800570a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f8a3 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8b4 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b10      	cmp	r3, #16
 800571c:	d122      	bne.n	8005764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b10      	cmp	r3, #16
 800572a:	d11b      	bne.n	8005764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0210 	mvn.w	r2, #16
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2208      	movs	r2, #8
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f887 	bl	800585e <HAL_TIM_IC_CaptureCallback>
 8005750:	e005      	b.n	800575e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f879 	bl	800584a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f88a 	bl	8005872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0201 	mvn.w	r2, #1
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fc f9a2 	bl	8001ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b80      	cmp	r3, #128	; 0x80
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f9a8 	bl	8005b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ca:	d10e      	bne.n	80057ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d107      	bne.n	80057ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f99b 	bl	8005b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d10e      	bne.n	8005816 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d107      	bne.n	8005816 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800580e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f838 	bl	8005886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b20      	cmp	r3, #32
 8005822:	d10e      	bne.n	8005842 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b20      	cmp	r3, #32
 8005830:	d107      	bne.n	8005842 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f06f 0220 	mvn.w	r2, #32
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f95b 	bl	8005af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a40      	ldr	r2, [pc, #256]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d00f      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3d      	ldr	r2, [pc, #244]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00b      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3c      	ldr	r2, [pc, #240]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <TIM_Base_SetConfig+0x120>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_Base_SetConfig+0x40>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a3a      	ldr	r2, [pc, #232]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d108      	bne.n	80058ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2f      	ldr	r2, [pc, #188]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d027      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <TIM_Base_SetConfig+0x118>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d023      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <TIM_Base_SetConfig+0x11c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a2a      	ldr	r2, [pc, #168]	; (80059bc <TIM_Base_SetConfig+0x120>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d017      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <TIM_Base_SetConfig+0x128>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d013      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <TIM_Base_SetConfig+0x12c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00f      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a26      	ldr	r2, [pc, #152]	; (80059cc <TIM_Base_SetConfig+0x130>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00b      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a25      	ldr	r2, [pc, #148]	; (80059d0 <TIM_Base_SetConfig+0x134>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d007      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <TIM_Base_SetConfig+0x138>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_Base_SetConfig+0xb2>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a23      	ldr	r2, [pc, #140]	; (80059d8 <TIM_Base_SetConfig+0x13c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d108      	bne.n	8005960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <TIM_Base_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0xf8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a0c      	ldr	r2, [pc, #48]	; (80059c0 <TIM_Base_SetConfig+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d103      	bne.n	800599c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	615a      	str	r2, [r3, #20]
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	40001800 	.word	0x40001800
 80059d4:	40001c00 	.word	0x40001c00
 80059d8:	40002000 	.word	0x40002000

080059dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e06d      	b.n	8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a30      	ldr	r2, [pc, #192]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2f      	ldr	r2, [pc, #188]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d01d      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a15      	ldr	r2, [pc, #84]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10c      	bne.n	8005abe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40001800 	.word	0x40001800

08005af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e040      	b.n	8005bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fc fb86 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	; 0x24
 8005b60:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8be 	bl	8005cf4 <UART_SetConfig>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e022      	b.n	8005bc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fb5c 	bl	8006248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fbe3 	bl	800638c <UART_CheckIdleState>
 8005bc6:	4603      	mov	r3, r0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d17f      	bne.n	8005ce8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_UART_Transmit+0x24>
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e078      	b.n	8005cea <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Transmit+0x36>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e071      	b.n	8005cea <HAL_UART_Transmit+0x11a>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2221      	movs	r2, #33	; 0x21
 8005c18:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005c1a:	f7fc fcc3 	bl	80025a4 <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c38:	d108      	bne.n	8005c4c <HAL_UART_Transmit+0x7c>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e003      	b.n	8005c54 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005c5c:	e02c      	b.n	8005cb8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2200      	movs	r2, #0
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fbd4 	bl	8006416 <UART_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e038      	b.n	8005cea <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3302      	adds	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e007      	b.n	8005ca6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1cc      	bne.n	8005c5e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2140      	movs	r1, #64	; 0x40
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fba1 	bl	8006416 <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e005      	b.n	8005cea <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3720      	adds	r7, #32
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4bb1      	ldr	r3, [pc, #708]	; (8005fe8 <UART_SetConfig+0x2f4>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a9f      	ldr	r2, [pc, #636]	; (8005fec <UART_SetConfig+0x2f8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d121      	bne.n	8005db8 <UART_SetConfig+0xc4>
 8005d74:	4b9e      	ldr	r3, [pc, #632]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d816      	bhi.n	8005db0 <UART_SetConfig+0xbc>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x94>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005da5 	.word	0x08005da5
 8005d90:	08005d9f 	.word	0x08005d9f
 8005d94:	08005dab 	.word	0x08005dab
 8005d98:	2301      	movs	r3, #1
 8005d9a:	77fb      	strb	r3, [r7, #31]
 8005d9c:	e151      	b.n	8006042 <UART_SetConfig+0x34e>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	77fb      	strb	r3, [r7, #31]
 8005da2:	e14e      	b.n	8006042 <UART_SetConfig+0x34e>
 8005da4:	2304      	movs	r3, #4
 8005da6:	77fb      	strb	r3, [r7, #31]
 8005da8:	e14b      	b.n	8006042 <UART_SetConfig+0x34e>
 8005daa:	2308      	movs	r3, #8
 8005dac:	77fb      	strb	r3, [r7, #31]
 8005dae:	e148      	b.n	8006042 <UART_SetConfig+0x34e>
 8005db0:	2310      	movs	r3, #16
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	bf00      	nop
 8005db6:	e144      	b.n	8006042 <UART_SetConfig+0x34e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a8d      	ldr	r2, [pc, #564]	; (8005ff4 <UART_SetConfig+0x300>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d134      	bne.n	8005e2c <UART_SetConfig+0x138>
 8005dc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc8:	f003 030c 	and.w	r3, r3, #12
 8005dcc:	2b0c      	cmp	r3, #12
 8005dce:	d829      	bhi.n	8005e24 <UART_SetConfig+0x130>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0xe4>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e0d 	.word	0x08005e0d
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e25 	.word	0x08005e25
 8005df4:	08005e25 	.word	0x08005e25
 8005df8:	08005e13 	.word	0x08005e13
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e1f 	.word	0x08005e1f
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e117      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e114      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e111      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e1e:	2308      	movs	r3, #8
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e10e      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	bf00      	nop
 8005e2a:	e10a      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a71      	ldr	r2, [pc, #452]	; (8005ff8 <UART_SetConfig+0x304>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d120      	bne.n	8005e78 <UART_SetConfig+0x184>
 8005e36:	4b6e      	ldr	r3, [pc, #440]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d00f      	beq.n	8005e64 <UART_SetConfig+0x170>
 8005e44:	2b10      	cmp	r3, #16
 8005e46:	d802      	bhi.n	8005e4e <UART_SetConfig+0x15a>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <UART_SetConfig+0x164>
 8005e4c:	e010      	b.n	8005e70 <UART_SetConfig+0x17c>
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d005      	beq.n	8005e5e <UART_SetConfig+0x16a>
 8005e52:	2b30      	cmp	r3, #48	; 0x30
 8005e54:	d009      	beq.n	8005e6a <UART_SetConfig+0x176>
 8005e56:	e00b      	b.n	8005e70 <UART_SetConfig+0x17c>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0f1      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e0ee      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e0eb      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e0e8      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	bf00      	nop
 8005e76:	e0e4      	b.n	8006042 <UART_SetConfig+0x34e>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a5f      	ldr	r2, [pc, #380]	; (8005ffc <UART_SetConfig+0x308>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d120      	bne.n	8005ec4 <UART_SetConfig+0x1d0>
 8005e82:	4b5b      	ldr	r3, [pc, #364]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d00f      	beq.n	8005eb0 <UART_SetConfig+0x1bc>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d802      	bhi.n	8005e9a <UART_SetConfig+0x1a6>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <UART_SetConfig+0x1b0>
 8005e98:	e010      	b.n	8005ebc <UART_SetConfig+0x1c8>
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d005      	beq.n	8005eaa <UART_SetConfig+0x1b6>
 8005e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005ea0:	d009      	beq.n	8005eb6 <UART_SetConfig+0x1c2>
 8005ea2:	e00b      	b.n	8005ebc <UART_SetConfig+0x1c8>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e0cb      	b.n	8006042 <UART_SetConfig+0x34e>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e0c8      	b.n	8006042 <UART_SetConfig+0x34e>
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e0c5      	b.n	8006042 <UART_SetConfig+0x34e>
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0c2      	b.n	8006042 <UART_SetConfig+0x34e>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	bf00      	nop
 8005ec2:	e0be      	b.n	8006042 <UART_SetConfig+0x34e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a4d      	ldr	r2, [pc, #308]	; (8006000 <UART_SetConfig+0x30c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d124      	bne.n	8005f18 <UART_SetConfig+0x224>
 8005ece:	4b48      	ldr	r3, [pc, #288]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005edc:	d012      	beq.n	8005f04 <UART_SetConfig+0x210>
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d802      	bhi.n	8005eea <UART_SetConfig+0x1f6>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <UART_SetConfig+0x204>
 8005ee8:	e012      	b.n	8005f10 <UART_SetConfig+0x21c>
 8005eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eee:	d006      	beq.n	8005efe <UART_SetConfig+0x20a>
 8005ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef4:	d009      	beq.n	8005f0a <UART_SetConfig+0x216>
 8005ef6:	e00b      	b.n	8005f10 <UART_SetConfig+0x21c>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e0a1      	b.n	8006042 <UART_SetConfig+0x34e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e09e      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f04:	2304      	movs	r3, #4
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e09b      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e098      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f10:	2310      	movs	r3, #16
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	bf00      	nop
 8005f16:	e094      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a39      	ldr	r2, [pc, #228]	; (8006004 <UART_SetConfig+0x310>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d124      	bne.n	8005f6c <UART_SetConfig+0x278>
 8005f22:	4b33      	ldr	r3, [pc, #204]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f30:	d012      	beq.n	8005f58 <UART_SetConfig+0x264>
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f36:	d802      	bhi.n	8005f3e <UART_SetConfig+0x24a>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d007      	beq.n	8005f4c <UART_SetConfig+0x258>
 8005f3c:	e012      	b.n	8005f64 <UART_SetConfig+0x270>
 8005f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f42:	d006      	beq.n	8005f52 <UART_SetConfig+0x25e>
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f48:	d009      	beq.n	8005f5e <UART_SetConfig+0x26a>
 8005f4a:	e00b      	b.n	8005f64 <UART_SetConfig+0x270>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e077      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e074      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e071      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e06e      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f64:	2310      	movs	r3, #16
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	bf00      	nop
 8005f6a:	e06a      	b.n	8006042 <UART_SetConfig+0x34e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a25      	ldr	r2, [pc, #148]	; (8006008 <UART_SetConfig+0x314>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d124      	bne.n	8005fc0 <UART_SetConfig+0x2cc>
 8005f76:	4b1e      	ldr	r3, [pc, #120]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f84:	d012      	beq.n	8005fac <UART_SetConfig+0x2b8>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	d802      	bhi.n	8005f92 <UART_SetConfig+0x29e>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <UART_SetConfig+0x2ac>
 8005f90:	e012      	b.n	8005fb8 <UART_SetConfig+0x2c4>
 8005f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f96:	d006      	beq.n	8005fa6 <UART_SetConfig+0x2b2>
 8005f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f9c:	d009      	beq.n	8005fb2 <UART_SetConfig+0x2be>
 8005f9e:	e00b      	b.n	8005fb8 <UART_SetConfig+0x2c4>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e04d      	b.n	8006042 <UART_SetConfig+0x34e>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e04a      	b.n	8006042 <UART_SetConfig+0x34e>
 8005fac:	2304      	movs	r3, #4
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e047      	b.n	8006042 <UART_SetConfig+0x34e>
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e044      	b.n	8006042 <UART_SetConfig+0x34e>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	bf00      	nop
 8005fbe:	e040      	b.n	8006042 <UART_SetConfig+0x34e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a11      	ldr	r2, [pc, #68]	; (800600c <UART_SetConfig+0x318>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d139      	bne.n	800603e <UART_SetConfig+0x34a>
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <UART_SetConfig+0x2fc>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fd8:	d027      	beq.n	800602a <UART_SetConfig+0x336>
 8005fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fde:	d817      	bhi.n	8006010 <UART_SetConfig+0x31c>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01c      	beq.n	800601e <UART_SetConfig+0x32a>
 8005fe4:	e027      	b.n	8006036 <UART_SetConfig+0x342>
 8005fe6:	bf00      	nop
 8005fe8:	efff69f3 	.word	0xefff69f3
 8005fec:	40011000 	.word	0x40011000
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	40004400 	.word	0x40004400
 8005ff8:	40004800 	.word	0x40004800
 8005ffc:	40004c00 	.word	0x40004c00
 8006000:	40005000 	.word	0x40005000
 8006004:	40011400 	.word	0x40011400
 8006008:	40007800 	.word	0x40007800
 800600c:	40007c00 	.word	0x40007c00
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	d006      	beq.n	8006024 <UART_SetConfig+0x330>
 8006016:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800601a:	d009      	beq.n	8006030 <UART_SetConfig+0x33c>
 800601c:	e00b      	b.n	8006036 <UART_SetConfig+0x342>
 800601e:	2300      	movs	r3, #0
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e00e      	b.n	8006042 <UART_SetConfig+0x34e>
 8006024:	2302      	movs	r3, #2
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e00b      	b.n	8006042 <UART_SetConfig+0x34e>
 800602a:	2304      	movs	r3, #4
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e008      	b.n	8006042 <UART_SetConfig+0x34e>
 8006030:	2308      	movs	r3, #8
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e005      	b.n	8006042 <UART_SetConfig+0x34e>
 8006036:	2310      	movs	r3, #16
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	bf00      	nop
 800603c:	e001      	b.n	8006042 <UART_SetConfig+0x34e>
 800603e:	2310      	movs	r3, #16
 8006040:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604a:	d17f      	bne.n	800614c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d85c      	bhi.n	800610c <UART_SetConfig+0x418>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x364>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	0800609d 	.word	0x0800609d
 8006060:	080060bd 	.word	0x080060bd
 8006064:	0800610d 	.word	0x0800610d
 8006068:	080060d5 	.word	0x080060d5
 800606c:	0800610d 	.word	0x0800610d
 8006070:	0800610d 	.word	0x0800610d
 8006074:	0800610d 	.word	0x0800610d
 8006078:	080060f5 	.word	0x080060f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe fe22 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006080:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	005a      	lsls	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	441a      	add	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	b29b      	uxth	r3, r3
 8006098:	61bb      	str	r3, [r7, #24]
        break;
 800609a:	e03a      	b.n	8006112 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fe fe26 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 80060a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	005a      	lsls	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	61bb      	str	r3, [r7, #24]
        break;
 80060ba:	e02a      	b.n	8006112 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	085a      	lsrs	r2, r3, #1
 80060c2:	4b5f      	ldr	r3, [pc, #380]	; (8006240 <UART_SetConfig+0x54c>)
 80060c4:	4413      	add	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6852      	ldr	r2, [r2, #4]
 80060ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	61bb      	str	r3, [r7, #24]
        break;
 80060d2:	e01e      	b.n	8006112 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d4:	f7fe fd12 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80060d8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	005a      	lsls	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	441a      	add	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	61bb      	str	r3, [r7, #24]
        break;
 80060f2:	e00e      	b.n	8006112 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	61bb      	str	r3, [r7, #24]
        break;
 800610a:	e002      	b.n	8006112 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
        break;
 8006110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b0f      	cmp	r3, #15
 8006116:	d916      	bls.n	8006146 <UART_SetConfig+0x452>
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611e:	d212      	bcs.n	8006146 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f023 030f 	bic.w	r3, r3, #15
 8006128:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	b29a      	uxth	r2, r3
 8006136:	897b      	ldrh	r3, [r7, #10]
 8006138:	4313      	orrs	r3, r2
 800613a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	897a      	ldrh	r2, [r7, #10]
 8006142:	60da      	str	r2, [r3, #12]
 8006144:	e070      	b.n	8006228 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
 800614a:	e06d      	b.n	8006228 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800614c:	7ffb      	ldrb	r3, [r7, #31]
 800614e:	2b08      	cmp	r3, #8
 8006150:	d859      	bhi.n	8006206 <UART_SetConfig+0x512>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x464>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	0800617d 	.word	0x0800617d
 800615c:	0800619b 	.word	0x0800619b
 8006160:	080061b9 	.word	0x080061b9
 8006164:	08006207 	.word	0x08006207
 8006168:	080061d1 	.word	0x080061d1
 800616c:	08006207 	.word	0x08006207
 8006170:	08006207 	.word	0x08006207
 8006174:	08006207 	.word	0x08006207
 8006178:	080061ef 	.word	0x080061ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617c:	f7fe fda2 	bl	8004cc4 <HAL_RCC_GetPCLK1Freq>
 8006180:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	085a      	lsrs	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	441a      	add	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	b29b      	uxth	r3, r3
 8006196:	61bb      	str	r3, [r7, #24]
        break;
 8006198:	e038      	b.n	800620c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800619a:	f7fe fda7 	bl	8004cec <HAL_RCC_GetPCLK2Freq>
 800619e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	085a      	lsrs	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	441a      	add	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	61bb      	str	r3, [r7, #24]
        break;
 80061b6:	e029      	b.n	800620c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	085a      	lsrs	r2, r3, #1
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <UART_SetConfig+0x550>)
 80061c0:	4413      	add	r3, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6852      	ldr	r2, [r2, #4]
 80061c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	61bb      	str	r3, [r7, #24]
        break;
 80061ce:	e01d      	b.n	800620c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061d0:	f7fe fc94 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 80061d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085a      	lsrs	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	61bb      	str	r3, [r7, #24]
        break;
 80061ec:	e00e      	b.n	800620c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	b29b      	uxth	r3, r3
 8006202:	61bb      	str	r3, [r7, #24]
        break;
 8006204:	e002      	b.n	800620c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
        break;
 800620a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d908      	bls.n	8006224 <UART_SetConfig+0x530>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d204      	bcs.n	8006224 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e001      	b.n	8006228 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	01e84800 	.word	0x01e84800
 8006244:	00f42400 	.word	0x00f42400

08006248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01a      	beq.n	800635e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006346:	d10a      	bne.n	800635e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af02      	add	r7, sp, #8
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800639a:	f7fc f903 	bl	80025a4 <HAL_GetTick>
 800639e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d10e      	bne.n	80063cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f82a 	bl	8006416 <UART_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e020      	b.n	800640e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d10e      	bne.n	80063f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 f814 	bl	8006416 <UART_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e00a      	b.n	800640e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4613      	mov	r3, r2
 8006424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006426:	e05d      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642e:	d059      	beq.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fc f8b8 	bl	80025a4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <UART_WaitOnFlagUntilTimeout+0x30>
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d11b      	bne.n	800647e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006454:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0201 	bic.w	r2, r2, #1
 8006464:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e042      	b.n	8006504 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02b      	beq.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649a:	d123      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e00f      	b.n	8006504 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	bf0c      	ite	eq
 80064f4:	2301      	moveq	r3, #1
 80064f6:	2300      	movne	r3, #0
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d092      	beq.n	8006428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 001c 	add.w	r0, r7, #28
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b01      	cmp	r3, #1
 8006522:	d120      	bne.n	8006566 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <USB_CoreInit+0xac>)
 8006536:	4013      	ands	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d105      	bne.n	800655a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa52 	bl	8006a04 <USB_CoreReset>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e010      	b.n	8006588 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa46 	bl	8006a04 <USB_CoreReset>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b01      	cmp	r3, #1
 800658c:	d10b      	bne.n	80065a6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f043 0206 	orr.w	r2, r3, #6
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065b2:	b004      	add	sp, #16
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	ffbdffbf 	.word	0xffbdffbf

080065bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f023 0201 	bic.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60da      	str	r2, [r3, #12]
 8006608:	e00b      	b.n	8006622 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d106      	bne.n	800661e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e001      	b.n	8006622 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e003      	b.n	800662a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006622:	2032      	movs	r0, #50	; 0x32
 8006624:	f7fb ffca 	bl	80025bc <HAL_Delay>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006634:	b084      	sub	sp, #16
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
 800663e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800664e:	2300      	movs	r3, #0
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e009      	b.n	8006668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	2200      	movs	r2, #0
 8006660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3301      	adds	r3, #1
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b0e      	cmp	r3, #14
 800666c:	d9f2      	bls.n	8006654 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d11c      	bne.n	80066ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e005      	b.n	80066ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	4619      	mov	r1, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	461a      	mov	r2, r3
 80066d6:	680b      	ldr	r3, [r1, #0]
 80066d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d10c      	bne.n	80066fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066e6:	2100      	movs	r1, #0
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f959 	bl	80069a0 <USB_SetDevSpeed>
 80066ee:	e018      	b.n	8006722 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066f0:	2101      	movs	r1, #1
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f954 	bl	80069a0 <USB_SetDevSpeed>
 80066f8:	e013      	b.n	8006722 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d10c      	bne.n	800671a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006706:	2100      	movs	r1, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f949 	bl	80069a0 <USB_SetDevSpeed>
 800670e:	e008      	b.n	8006722 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006710:	2101      	movs	r1, #1
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f944 	bl	80069a0 <USB_SetDevSpeed>
 8006718:	e003      	b.n	8006722 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800671a:	2103      	movs	r1, #3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f93f 	bl	80069a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006722:	2110      	movs	r1, #16
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f8f3 	bl	8006910 <USB_FlushTxFifo>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f911 	bl	800695c <USB_FlushRxFifo>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006756:	461a      	mov	r2, r3
 8006758:	2300      	movs	r3, #0
 800675a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	461a      	mov	r2, r3
 8006764:	2300      	movs	r3, #0
 8006766:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	e043      	b.n	80067f6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006784:	d118      	bne.n	80067b8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	e013      	b.n	80067ca <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e008      	b.n	80067ca <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d6:	461a      	mov	r2, r3
 80067d8:	2300      	movs	r3, #0
 80067da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	461a      	mov	r2, r3
 80067ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3301      	adds	r3, #1
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3b7      	bcc.n	800676e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e043      	b.n	800688c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800681a:	d118      	bne.n	800684e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e013      	b.n	8006860 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	461a      	mov	r2, r3
 8006846:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e008      	b.n	8006860 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	2300      	movs	r3, #0
 800685e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	461a      	mov	r2, r3
 800686e:	2300      	movs	r3, #0
 8006870:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	461a      	mov	r2, r3
 8006880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	429a      	cmp	r2, r3
 8006892:	d3b7      	bcc.n	8006804 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f043 0210 	orr.w	r2, r3, #16
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699a      	ldr	r2, [r3, #24]
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <USB_DevInit+0x2d4>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f043 0208 	orr.w	r2, r3, #8
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d105      	bne.n	80068f8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <USB_DevInit+0x2d8>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006904:	b004      	add	sp, #16
 8006906:	4770      	bx	lr
 8006908:	803c3800 	.word	0x803c3800
 800690c:	40000004 	.word	0x40000004

08006910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	019b      	lsls	r3, r3, #6
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3301      	adds	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <USB_FlushTxFifo+0x48>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e006      	b.n	800694a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b20      	cmp	r3, #32
 8006946:	d0f0      	beq.n	800692a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	00030d40 	.word	0x00030d40

0800695c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2210      	movs	r2, #16
 800696c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <USB_FlushRxFifo+0x40>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d901      	bls.n	8006980 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e006      	b.n	800698e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d0f0      	beq.n	800696e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	00030d40 	.word	0x00030d40

080069a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	68f9      	ldr	r1, [r7, #12]
 80069bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c0:	4313      	orrs	r3, r2
 80069c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80069f2:	2003      	movs	r0, #3
 80069f4:	f7fb fde2 	bl	80025bc <HAL_Delay>

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <USB_CoreReset+0x64>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e01b      	b.n	8006a5a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	daf2      	bge.n	8006a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f043 0201 	orr.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <USB_CoreReset+0x64>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e006      	b.n	8006a5a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d0f0      	beq.n	8006a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	00030d40 	.word	0x00030d40

08006a6c <__errno>:
 8006a6c:	4b01      	ldr	r3, [pc, #4]	; (8006a74 <__errno+0x8>)
 8006a6e:	6818      	ldr	r0, [r3, #0]
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000018 	.word	0x20000018

08006a78 <__libc_init_array>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4e0d      	ldr	r6, [pc, #52]	; (8006ab0 <__libc_init_array+0x38>)
 8006a7c:	4c0d      	ldr	r4, [pc, #52]	; (8006ab4 <__libc_init_array+0x3c>)
 8006a7e:	1ba4      	subs	r4, r4, r6
 8006a80:	10a4      	asrs	r4, r4, #2
 8006a82:	2500      	movs	r5, #0
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d109      	bne.n	8006a9c <__libc_init_array+0x24>
 8006a88:	4e0b      	ldr	r6, [pc, #44]	; (8006ab8 <__libc_init_array+0x40>)
 8006a8a:	4c0c      	ldr	r4, [pc, #48]	; (8006abc <__libc_init_array+0x44>)
 8006a8c:	f004 f808 	bl	800aaa0 <_init>
 8006a90:	1ba4      	subs	r4, r4, r6
 8006a92:	10a4      	asrs	r4, r4, #2
 8006a94:	2500      	movs	r5, #0
 8006a96:	42a5      	cmp	r5, r4
 8006a98:	d105      	bne.n	8006aa6 <__libc_init_array+0x2e>
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}
 8006a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aa0:	4798      	blx	r3
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	e7ee      	b.n	8006a84 <__libc_init_array+0xc>
 8006aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006aaa:	4798      	blx	r3
 8006aac:	3501      	adds	r5, #1
 8006aae:	e7f2      	b.n	8006a96 <__libc_init_array+0x1e>
 8006ab0:	0800af50 	.word	0x0800af50
 8006ab4:	0800af50 	.word	0x0800af50
 8006ab8:	0800af50 	.word	0x0800af50
 8006abc:	0800af54 	.word	0x0800af54

08006ac0 <memcpy>:
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	1e43      	subs	r3, r0, #1
 8006ac4:	440a      	add	r2, r1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	d100      	bne.n	8006acc <memcpy+0xc>
 8006aca:	bd10      	pop	{r4, pc}
 8006acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ad4:	e7f7      	b.n	8006ac6 <memcpy+0x6>

08006ad6 <memset>:
 8006ad6:	4402      	add	r2, r0
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d100      	bne.n	8006ae0 <memset+0xa>
 8006ade:	4770      	bx	lr
 8006ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae4:	e7f9      	b.n	8006ada <memset+0x4>

08006ae6 <__cvt>:
 8006ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae8:	ed2d 8b02 	vpush	{d8}
 8006aec:	eeb0 8b40 	vmov.f64	d8, d0
 8006af0:	b085      	sub	sp, #20
 8006af2:	4617      	mov	r7, r2
 8006af4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006af6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006af8:	ee18 2a90 	vmov	r2, s17
 8006afc:	f025 0520 	bic.w	r5, r5, #32
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	bfb6      	itet	lt
 8006b04:	222d      	movlt	r2, #45	; 0x2d
 8006b06:	2200      	movge	r2, #0
 8006b08:	eeb1 8b40 	vneglt.f64	d8, d0
 8006b0c:	2d46      	cmp	r5, #70	; 0x46
 8006b0e:	460c      	mov	r4, r1
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	d004      	beq.n	8006b1e <__cvt+0x38>
 8006b14:	2d45      	cmp	r5, #69	; 0x45
 8006b16:	d100      	bne.n	8006b1a <__cvt+0x34>
 8006b18:	3401      	adds	r4, #1
 8006b1a:	2102      	movs	r1, #2
 8006b1c:	e000      	b.n	8006b20 <__cvt+0x3a>
 8006b1e:	2103      	movs	r1, #3
 8006b20:	ab03      	add	r3, sp, #12
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	ab02      	add	r3, sp, #8
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4622      	mov	r2, r4
 8006b2a:	4633      	mov	r3, r6
 8006b2c:	eeb0 0b48 	vmov.f64	d0, d8
 8006b30:	f001 fd2e 	bl	8008590 <_dtoa_r>
 8006b34:	2d47      	cmp	r5, #71	; 0x47
 8006b36:	d101      	bne.n	8006b3c <__cvt+0x56>
 8006b38:	07fb      	lsls	r3, r7, #31
 8006b3a:	d51e      	bpl.n	8006b7a <__cvt+0x94>
 8006b3c:	2d46      	cmp	r5, #70	; 0x46
 8006b3e:	eb00 0304 	add.w	r3, r0, r4
 8006b42:	d10c      	bne.n	8006b5e <__cvt+0x78>
 8006b44:	7802      	ldrb	r2, [r0, #0]
 8006b46:	2a30      	cmp	r2, #48	; 0x30
 8006b48:	d107      	bne.n	8006b5a <__cvt+0x74>
 8006b4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b52:	bf1c      	itt	ne
 8006b54:	f1c4 0401 	rsbne	r4, r4, #1
 8006b58:	6034      	strne	r4, [r6, #0]
 8006b5a:	6832      	ldr	r2, [r6, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	d007      	beq.n	8006b78 <__cvt+0x92>
 8006b68:	2130      	movs	r1, #48	; 0x30
 8006b6a:	9a03      	ldr	r2, [sp, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d204      	bcs.n	8006b7a <__cvt+0x94>
 8006b70:	1c54      	adds	r4, r2, #1
 8006b72:	9403      	str	r4, [sp, #12]
 8006b74:	7011      	strb	r1, [r2, #0]
 8006b76:	e7f8      	b.n	8006b6a <__cvt+0x84>
 8006b78:	9303      	str	r3, [sp, #12]
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b7e:	1a1b      	subs	r3, r3, r0
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	b005      	add	sp, #20
 8006b84:	ecbd 8b02 	vpop	{d8}
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b8a <__exponent>:
 8006b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	bfba      	itte	lt
 8006b92:	4249      	neglt	r1, r1
 8006b94:	232d      	movlt	r3, #45	; 0x2d
 8006b96:	232b      	movge	r3, #43	; 0x2b
 8006b98:	2909      	cmp	r1, #9
 8006b9a:	f804 2b02 	strb.w	r2, [r4], #2
 8006b9e:	7043      	strb	r3, [r0, #1]
 8006ba0:	dd20      	ble.n	8006be4 <__exponent+0x5a>
 8006ba2:	f10d 0307 	add.w	r3, sp, #7
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	260a      	movs	r6, #10
 8006baa:	fb91 f5f6 	sdiv	r5, r1, r6
 8006bae:	fb06 1115 	mls	r1, r6, r5, r1
 8006bb2:	3130      	adds	r1, #48	; 0x30
 8006bb4:	2d09      	cmp	r5, #9
 8006bb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bba:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	dc09      	bgt.n	8006bd6 <__exponent+0x4c>
 8006bc2:	3130      	adds	r1, #48	; 0x30
 8006bc4:	3b02      	subs	r3, #2
 8006bc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006bca:	42bb      	cmp	r3, r7
 8006bcc:	4622      	mov	r2, r4
 8006bce:	d304      	bcc.n	8006bda <__exponent+0x50>
 8006bd0:	1a10      	subs	r0, r2, r0
 8006bd2:	b003      	add	sp, #12
 8006bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	e7e7      	b.n	8006baa <__exponent+0x20>
 8006bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bde:	f804 2b01 	strb.w	r2, [r4], #1
 8006be2:	e7f2      	b.n	8006bca <__exponent+0x40>
 8006be4:	2330      	movs	r3, #48	; 0x30
 8006be6:	4419      	add	r1, r3
 8006be8:	7083      	strb	r3, [r0, #2]
 8006bea:	1d02      	adds	r2, r0, #4
 8006bec:	70c1      	strb	r1, [r0, #3]
 8006bee:	e7ef      	b.n	8006bd0 <__exponent+0x46>

08006bf0 <_printf_float>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	b08d      	sub	sp, #52	; 0x34
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	461f      	mov	r7, r3
 8006bfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006c00:	4605      	mov	r5, r0
 8006c02:	f002 fd3d 	bl	8009680 <_localeconv_r>
 8006c06:	f8d0 b000 	ldr.w	fp, [r0]
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	f7f9 fb18 	bl	8000240 <strlen>
 8006c10:	2300      	movs	r3, #0
 8006c12:	930a      	str	r3, [sp, #40]	; 0x28
 8006c14:	f8d8 3000 	ldr.w	r3, [r8]
 8006c18:	9005      	str	r0, [sp, #20]
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	f103 0108 	add.w	r1, r3, #8
 8006c24:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006c28:	6822      	ldr	r2, [r4, #0]
 8006c2a:	f8c8 1000 	str.w	r1, [r8]
 8006c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c32:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006c36:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006ec0 <_printf_float+0x2d0>
 8006c3a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006c3e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006c42:	eeb4 6b47 	vcmp.f64	d6, d7
 8006c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4a:	dd24      	ble.n	8006c96 <_printf_float+0xa6>
 8006c4c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c54:	d502      	bpl.n	8006c5c <_printf_float+0x6c>
 8006c56:	232d      	movs	r3, #45	; 0x2d
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	499a      	ldr	r1, [pc, #616]	; (8006ec8 <_printf_float+0x2d8>)
 8006c5e:	4b9b      	ldr	r3, [pc, #620]	; (8006ecc <_printf_float+0x2dc>)
 8006c60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006c64:	bf8c      	ite	hi
 8006c66:	4688      	movhi	r8, r1
 8006c68:	4698      	movls	r8, r3
 8006c6a:	f022 0204 	bic.w	r2, r2, #4
 8006c6e:	2303      	movs	r3, #3
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	f04f 0a00 	mov.w	sl, #0
 8006c78:	9700      	str	r7, [sp, #0]
 8006c7a:	4633      	mov	r3, r6
 8006c7c:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 f9e1 	bl	8007048 <_printf_common>
 8006c86:	3001      	adds	r0, #1
 8006c88:	f040 8089 	bne.w	8006d9e <_printf_float+0x1ae>
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c90:	b00d      	add	sp, #52	; 0x34
 8006c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c96:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9e:	d702      	bvc.n	8006ca6 <_printf_float+0xb6>
 8006ca0:	498b      	ldr	r1, [pc, #556]	; (8006ed0 <_printf_float+0x2e0>)
 8006ca2:	4b8c      	ldr	r3, [pc, #560]	; (8006ed4 <_printf_float+0x2e4>)
 8006ca4:	e7dc      	b.n	8006c60 <_printf_float+0x70>
 8006ca6:	6861      	ldr	r1, [r4, #4]
 8006ca8:	1c4b      	adds	r3, r1, #1
 8006caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cae:	ab0a      	add	r3, sp, #40	; 0x28
 8006cb0:	a809      	add	r0, sp, #36	; 0x24
 8006cb2:	d13b      	bne.n	8006d2c <_printf_float+0x13c>
 8006cb4:	2106      	movs	r1, #6
 8006cb6:	6061      	str	r1, [r4, #4]
 8006cb8:	f04f 0c00 	mov.w	ip, #0
 8006cbc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006cc0:	e9cd 0900 	strd	r0, r9, [sp]
 8006cc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cc8:	6022      	str	r2, [r4, #0]
 8006cca:	6861      	ldr	r1, [r4, #4]
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f7ff ff0a 	bl	8006ae6 <__cvt>
 8006cd2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8006cd6:	2b47      	cmp	r3, #71	; 0x47
 8006cd8:	4680      	mov	r8, r0
 8006cda:	d109      	bne.n	8006cf0 <_printf_float+0x100>
 8006cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cde:	1cd8      	adds	r0, r3, #3
 8006ce0:	db02      	blt.n	8006ce8 <_printf_float+0xf8>
 8006ce2:	6862      	ldr	r2, [r4, #4]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	dd47      	ble.n	8006d78 <_printf_float+0x188>
 8006ce8:	f1a9 0902 	sub.w	r9, r9, #2
 8006cec:	fa5f f989 	uxtb.w	r9, r9
 8006cf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf6:	d824      	bhi.n	8006d42 <_printf_float+0x152>
 8006cf8:	3901      	subs	r1, #1
 8006cfa:	464a      	mov	r2, r9
 8006cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d00:	9109      	str	r1, [sp, #36]	; 0x24
 8006d02:	f7ff ff42 	bl	8006b8a <__exponent>
 8006d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d08:	1813      	adds	r3, r2, r0
 8006d0a:	2a01      	cmp	r2, #1
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	dc02      	bgt.n	8006d18 <_printf_float+0x128>
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	07d1      	lsls	r1, r2, #31
 8006d16:	d501      	bpl.n	8006d1c <_printf_float+0x12c>
 8006d18:	3301      	adds	r3, #1
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0a9      	beq.n	8006c78 <_printf_float+0x88>
 8006d24:	232d      	movs	r3, #45	; 0x2d
 8006d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d2a:	e7a5      	b.n	8006c78 <_printf_float+0x88>
 8006d2c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006d30:	f000 8178 	beq.w	8007024 <_printf_float+0x434>
 8006d34:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d38:	d1be      	bne.n	8006cb8 <_printf_float+0xc8>
 8006d3a:	2900      	cmp	r1, #0
 8006d3c:	d1bc      	bne.n	8006cb8 <_printf_float+0xc8>
 8006d3e:	2101      	movs	r1, #1
 8006d40:	e7b9      	b.n	8006cb6 <_printf_float+0xc6>
 8006d42:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006d46:	d119      	bne.n	8006d7c <_printf_float+0x18c>
 8006d48:	2900      	cmp	r1, #0
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	dd0c      	ble.n	8006d68 <_printf_float+0x178>
 8006d4e:	6121      	str	r1, [r4, #16]
 8006d50:	b913      	cbnz	r3, 8006d58 <_printf_float+0x168>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	07d2      	lsls	r2, r2, #31
 8006d56:	d502      	bpl.n	8006d5e <_printf_float+0x16e>
 8006d58:	3301      	adds	r3, #1
 8006d5a:	440b      	add	r3, r1
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d62:	f04f 0a00 	mov.w	sl, #0
 8006d66:	e7d9      	b.n	8006d1c <_printf_float+0x12c>
 8006d68:	b913      	cbnz	r3, 8006d70 <_printf_float+0x180>
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	07d0      	lsls	r0, r2, #31
 8006d6e:	d501      	bpl.n	8006d74 <_printf_float+0x184>
 8006d70:	3302      	adds	r3, #2
 8006d72:	e7f3      	b.n	8006d5c <_printf_float+0x16c>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e7f1      	b.n	8006d5c <_printf_float+0x16c>
 8006d78:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d7c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d80:	4293      	cmp	r3, r2
 8006d82:	db05      	blt.n	8006d90 <_printf_float+0x1a0>
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	07d1      	lsls	r1, r2, #31
 8006d8a:	d5e8      	bpl.n	8006d5e <_printf_float+0x16e>
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	e7e5      	b.n	8006d5c <_printf_float+0x16c>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfd4      	ite	le
 8006d94:	f1c3 0302 	rsble	r3, r3, #2
 8006d98:	2301      	movgt	r3, #1
 8006d9a:	4413      	add	r3, r2
 8006d9c:	e7de      	b.n	8006d5c <_printf_float+0x16c>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	055a      	lsls	r2, r3, #21
 8006da2:	d407      	bmi.n	8006db4 <_printf_float+0x1c4>
 8006da4:	6923      	ldr	r3, [r4, #16]
 8006da6:	4642      	mov	r2, r8
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	d12a      	bne.n	8006e08 <_printf_float+0x218>
 8006db2:	e76b      	b.n	8006c8c <_printf_float+0x9c>
 8006db4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006db8:	f240 80de 	bls.w	8006f78 <_printf_float+0x388>
 8006dbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006dc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc8:	d133      	bne.n	8006e32 <_printf_float+0x242>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	4a42      	ldr	r2, [pc, #264]	; (8006ed8 <_printf_float+0x2e8>)
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f43f af59 	beq.w	8006c8c <_printf_float+0x9c>
 8006dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dde:	429a      	cmp	r2, r3
 8006de0:	db02      	blt.n	8006de8 <_printf_float+0x1f8>
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	07d8      	lsls	r0, r3, #31
 8006de6:	d50f      	bpl.n	8006e08 <_printf_float+0x218>
 8006de8:	9b05      	ldr	r3, [sp, #20]
 8006dea:	465a      	mov	r2, fp
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f af4a 	beq.w	8006c8c <_printf_float+0x9c>
 8006df8:	f04f 0800 	mov.w	r8, #0
 8006dfc:	f104 091a 	add.w	r9, r4, #26
 8006e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e02:	3b01      	subs	r3, #1
 8006e04:	4543      	cmp	r3, r8
 8006e06:	dc09      	bgt.n	8006e1c <_printf_float+0x22c>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	079b      	lsls	r3, r3, #30
 8006e0c:	f100 8105 	bmi.w	800701a <_printf_float+0x42a>
 8006e10:	68e0      	ldr	r0, [r4, #12]
 8006e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e14:	4298      	cmp	r0, r3
 8006e16:	bfb8      	it	lt
 8006e18:	4618      	movlt	r0, r3
 8006e1a:	e739      	b.n	8006c90 <_printf_float+0xa0>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	464a      	mov	r2, r9
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f af30 	beq.w	8006c8c <_printf_float+0x9c>
 8006e2c:	f108 0801 	add.w	r8, r8, #1
 8006e30:	e7e6      	b.n	8006e00 <_printf_float+0x210>
 8006e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc2b      	bgt.n	8006e90 <_printf_float+0x2a0>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <_printf_float+0x2e8>)
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f af22 	beq.w	8006c8c <_printf_float+0x9c>
 8006e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4a:	b923      	cbnz	r3, 8006e56 <_printf_float+0x266>
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e4e:	b913      	cbnz	r3, 8006e56 <_printf_float+0x266>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d5d8      	bpl.n	8006e08 <_printf_float+0x218>
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	465a      	mov	r2, fp
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f af13 	beq.w	8006c8c <_printf_float+0x9c>
 8006e66:	f04f 0900 	mov.w	r9, #0
 8006e6a:	f104 0a1a 	add.w	sl, r4, #26
 8006e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e70:	425b      	negs	r3, r3
 8006e72:	454b      	cmp	r3, r9
 8006e74:	dc01      	bgt.n	8006e7a <_printf_float+0x28a>
 8006e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e78:	e795      	b.n	8006da6 <_printf_float+0x1b6>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f af01 	beq.w	8006c8c <_printf_float+0x9c>
 8006e8a:	f109 0901 	add.w	r9, r9, #1
 8006e8e:	e7ee      	b.n	8006e6e <_printf_float+0x27e>
 8006e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bfa8      	it	ge
 8006e98:	461a      	movge	r2, r3
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	4691      	mov	r9, r2
 8006e9e:	dd07      	ble.n	8006eb0 <_printf_float+0x2c0>
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b8      	blx	r7
 8006eaa:	3001      	adds	r0, #1
 8006eac:	f43f aeee 	beq.w	8006c8c <_printf_float+0x9c>
 8006eb0:	f104 031a 	add.w	r3, r4, #26
 8006eb4:	f04f 0a00 	mov.w	sl, #0
 8006eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ebc:	9307      	str	r3, [sp, #28]
 8006ebe:	e017      	b.n	8006ef0 <_printf_float+0x300>
 8006ec0:	ffffffff 	.word	0xffffffff
 8006ec4:	7fefffff 	.word	0x7fefffff
 8006ec8:	0800ac50 	.word	0x0800ac50
 8006ecc:	0800ac4c 	.word	0x0800ac4c
 8006ed0:	0800ac58 	.word	0x0800ac58
 8006ed4:	0800ac54 	.word	0x0800ac54
 8006ed8:	0800ac5c 	.word	0x0800ac5c
 8006edc:	2301      	movs	r3, #1
 8006ede:	9a07      	ldr	r2, [sp, #28]
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	f43f aed0 	beq.w	8006c8c <_printf_float+0x9c>
 8006eec:	f10a 0a01 	add.w	sl, sl, #1
 8006ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ef2:	9306      	str	r3, [sp, #24]
 8006ef4:	eba3 0309 	sub.w	r3, r3, r9
 8006ef8:	4553      	cmp	r3, sl
 8006efa:	dcef      	bgt.n	8006edc <_printf_float+0x2ec>
 8006efc:	9b06      	ldr	r3, [sp, #24]
 8006efe:	4498      	add	r8, r3
 8006f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f04:	429a      	cmp	r2, r3
 8006f06:	db15      	blt.n	8006f34 <_printf_float+0x344>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07da      	lsls	r2, r3, #31
 8006f0c:	d412      	bmi.n	8006f34 <_printf_float+0x344>
 8006f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f10:	9a06      	ldr	r2, [sp, #24]
 8006f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f14:	1a9a      	subs	r2, r3, r2
 8006f16:	eba3 0a01 	sub.w	sl, r3, r1
 8006f1a:	4592      	cmp	sl, r2
 8006f1c:	bfa8      	it	ge
 8006f1e:	4692      	movge	sl, r2
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	dc0e      	bgt.n	8006f44 <_printf_float+0x354>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f2e:	f104 091a 	add.w	r9, r4, #26
 8006f32:	e019      	b.n	8006f68 <_printf_float+0x378>
 8006f34:	9b05      	ldr	r3, [sp, #20]
 8006f36:	465a      	mov	r2, fp
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	d1e5      	bne.n	8006f0e <_printf_float+0x31e>
 8006f42:	e6a3      	b.n	8006c8c <_printf_float+0x9c>
 8006f44:	4653      	mov	r3, sl
 8006f46:	4642      	mov	r2, r8
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d1e9      	bne.n	8006f26 <_printf_float+0x336>
 8006f52:	e69b      	b.n	8006c8c <_printf_float+0x9c>
 8006f54:	2301      	movs	r3, #1
 8006f56:	464a      	mov	r2, r9
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	47b8      	blx	r7
 8006f5e:	3001      	adds	r0, #1
 8006f60:	f43f ae94 	beq.w	8006c8c <_printf_float+0x9c>
 8006f64:	f108 0801 	add.w	r8, r8, #1
 8006f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	eba3 030a 	sub.w	r3, r3, sl
 8006f72:	4543      	cmp	r3, r8
 8006f74:	dcee      	bgt.n	8006f54 <_printf_float+0x364>
 8006f76:	e747      	b.n	8006e08 <_printf_float+0x218>
 8006f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f7a:	2a01      	cmp	r2, #1
 8006f7c:	dc01      	bgt.n	8006f82 <_printf_float+0x392>
 8006f7e:	07db      	lsls	r3, r3, #31
 8006f80:	d539      	bpl.n	8006ff6 <_printf_float+0x406>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4642      	mov	r2, r8
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	f43f ae7d 	beq.w	8006c8c <_printf_float+0x9c>
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	465a      	mov	r2, fp
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	f43f ae73 	beq.w	8006c8c <_printf_float+0x9c>
 8006fa6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006fb8:	d018      	beq.n	8006fec <_printf_float+0x3fc>
 8006fba:	4642      	mov	r2, r8
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d10e      	bne.n	8006fe4 <_printf_float+0x3f4>
 8006fc6:	e661      	b.n	8006c8c <_printf_float+0x9c>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	464a      	mov	r2, r9
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f43f ae5a 	beq.w	8006c8c <_printf_float+0x9c>
 8006fd8:	f108 0801 	add.w	r8, r8, #1
 8006fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	dcf1      	bgt.n	8006fc8 <_printf_float+0x3d8>
 8006fe4:	4653      	mov	r3, sl
 8006fe6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fea:	e6dd      	b.n	8006da8 <_printf_float+0x1b8>
 8006fec:	f04f 0800 	mov.w	r8, #0
 8006ff0:	f104 091a 	add.w	r9, r4, #26
 8006ff4:	e7f2      	b.n	8006fdc <_printf_float+0x3ec>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7df      	b.n	8006fba <_printf_float+0x3ca>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	464a      	mov	r2, r9
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f ae41 	beq.w	8006c8c <_printf_float+0x9c>
 800700a:	f108 0801 	add.w	r8, r8, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	4543      	cmp	r3, r8
 8007016:	dcf0      	bgt.n	8006ffa <_printf_float+0x40a>
 8007018:	e6fa      	b.n	8006e10 <_printf_float+0x220>
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	f104 0919 	add.w	r9, r4, #25
 8007022:	e7f4      	b.n	800700e <_printf_float+0x41e>
 8007024:	2900      	cmp	r1, #0
 8007026:	f43f ae8a 	beq.w	8006d3e <_printf_float+0x14e>
 800702a:	f04f 0c00 	mov.w	ip, #0
 800702e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8007032:	e9cd 0900 	strd	r0, r9, [sp]
 8007036:	6022      	str	r2, [r4, #0]
 8007038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff fd52 	bl	8006ae6 <__cvt>
 8007042:	4680      	mov	r8, r0
 8007044:	e64a      	b.n	8006cdc <_printf_float+0xec>
 8007046:	bf00      	nop

08007048 <_printf_common>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	4691      	mov	r9, r2
 800704e:	461f      	mov	r7, r3
 8007050:	688a      	ldr	r2, [r1, #8]
 8007052:	690b      	ldr	r3, [r1, #16]
 8007054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007058:	4293      	cmp	r3, r2
 800705a:	bfb8      	it	lt
 800705c:	4613      	movlt	r3, r2
 800705e:	f8c9 3000 	str.w	r3, [r9]
 8007062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	b112      	cbz	r2, 8007072 <_printf_common+0x2a>
 800706c:	3301      	adds	r3, #1
 800706e:	f8c9 3000 	str.w	r3, [r9]
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	0699      	lsls	r1, r3, #26
 8007076:	bf42      	ittt	mi
 8007078:	f8d9 3000 	ldrmi.w	r3, [r9]
 800707c:	3302      	addmi	r3, #2
 800707e:	f8c9 3000 	strmi.w	r3, [r9]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	f015 0506 	ands.w	r5, r5, #6
 8007088:	d107      	bne.n	800709a <_printf_common+0x52>
 800708a:	f104 0a19 	add.w	sl, r4, #25
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	f8d9 2000 	ldr.w	r2, [r9]
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	42ab      	cmp	r3, r5
 8007098:	dc28      	bgt.n	80070ec <_printf_common+0xa4>
 800709a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	3300      	adds	r3, #0
 80070a2:	bf18      	it	ne
 80070a4:	2301      	movne	r3, #1
 80070a6:	0692      	lsls	r2, r2, #26
 80070a8:	d42d      	bmi.n	8007106 <_printf_common+0xbe>
 80070aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ae:	4639      	mov	r1, r7
 80070b0:	4630      	mov	r0, r6
 80070b2:	47c0      	blx	r8
 80070b4:	3001      	adds	r0, #1
 80070b6:	d020      	beq.n	80070fa <_printf_common+0xb2>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	68e5      	ldr	r5, [r4, #12]
 80070bc:	f8d9 2000 	ldr.w	r2, [r9]
 80070c0:	f003 0306 	and.w	r3, r3, #6
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	bf08      	it	eq
 80070c8:	1aad      	subeq	r5, r5, r2
 80070ca:	68a3      	ldr	r3, [r4, #8]
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	bf0c      	ite	eq
 80070d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d4:	2500      	movne	r5, #0
 80070d6:	4293      	cmp	r3, r2
 80070d8:	bfc4      	itt	gt
 80070da:	1a9b      	subgt	r3, r3, r2
 80070dc:	18ed      	addgt	r5, r5, r3
 80070de:	f04f 0900 	mov.w	r9, #0
 80070e2:	341a      	adds	r4, #26
 80070e4:	454d      	cmp	r5, r9
 80070e6:	d11a      	bne.n	800711e <_printf_common+0xd6>
 80070e8:	2000      	movs	r0, #0
 80070ea:	e008      	b.n	80070fe <_printf_common+0xb6>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4652      	mov	r2, sl
 80070f0:	4639      	mov	r1, r7
 80070f2:	4630      	mov	r0, r6
 80070f4:	47c0      	blx	r8
 80070f6:	3001      	adds	r0, #1
 80070f8:	d103      	bne.n	8007102 <_printf_common+0xba>
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007102:	3501      	adds	r5, #1
 8007104:	e7c3      	b.n	800708e <_printf_common+0x46>
 8007106:	18e1      	adds	r1, r4, r3
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	2030      	movs	r0, #48	; 0x30
 800710c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007110:	4422      	add	r2, r4
 8007112:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800711a:	3302      	adds	r3, #2
 800711c:	e7c5      	b.n	80070aa <_printf_common+0x62>
 800711e:	2301      	movs	r3, #1
 8007120:	4622      	mov	r2, r4
 8007122:	4639      	mov	r1, r7
 8007124:	4630      	mov	r0, r6
 8007126:	47c0      	blx	r8
 8007128:	3001      	adds	r0, #1
 800712a:	d0e6      	beq.n	80070fa <_printf_common+0xb2>
 800712c:	f109 0901 	add.w	r9, r9, #1
 8007130:	e7d8      	b.n	80070e4 <_printf_common+0x9c>
	...

08007134 <_printf_i>:
 8007134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007138:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800713c:	460c      	mov	r4, r1
 800713e:	7e09      	ldrb	r1, [r1, #24]
 8007140:	b085      	sub	sp, #20
 8007142:	296e      	cmp	r1, #110	; 0x6e
 8007144:	4617      	mov	r7, r2
 8007146:	4606      	mov	r6, r0
 8007148:	4698      	mov	r8, r3
 800714a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800714c:	f000 80b3 	beq.w	80072b6 <_printf_i+0x182>
 8007150:	d822      	bhi.n	8007198 <_printf_i+0x64>
 8007152:	2963      	cmp	r1, #99	; 0x63
 8007154:	d036      	beq.n	80071c4 <_printf_i+0x90>
 8007156:	d80a      	bhi.n	800716e <_printf_i+0x3a>
 8007158:	2900      	cmp	r1, #0
 800715a:	f000 80b9 	beq.w	80072d0 <_printf_i+0x19c>
 800715e:	2958      	cmp	r1, #88	; 0x58
 8007160:	f000 8083 	beq.w	800726a <_printf_i+0x136>
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800716c:	e032      	b.n	80071d4 <_printf_i+0xa0>
 800716e:	2964      	cmp	r1, #100	; 0x64
 8007170:	d001      	beq.n	8007176 <_printf_i+0x42>
 8007172:	2969      	cmp	r1, #105	; 0x69
 8007174:	d1f6      	bne.n	8007164 <_printf_i+0x30>
 8007176:	6820      	ldr	r0, [r4, #0]
 8007178:	6813      	ldr	r3, [r2, #0]
 800717a:	0605      	lsls	r5, r0, #24
 800717c:	f103 0104 	add.w	r1, r3, #4
 8007180:	d52a      	bpl.n	80071d8 <_printf_i+0xa4>
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6011      	str	r1, [r2, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da03      	bge.n	8007192 <_printf_i+0x5e>
 800718a:	222d      	movs	r2, #45	; 0x2d
 800718c:	425b      	negs	r3, r3
 800718e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007192:	486f      	ldr	r0, [pc, #444]	; (8007350 <_printf_i+0x21c>)
 8007194:	220a      	movs	r2, #10
 8007196:	e039      	b.n	800720c <_printf_i+0xd8>
 8007198:	2973      	cmp	r1, #115	; 0x73
 800719a:	f000 809d 	beq.w	80072d8 <_printf_i+0x1a4>
 800719e:	d808      	bhi.n	80071b2 <_printf_i+0x7e>
 80071a0:	296f      	cmp	r1, #111	; 0x6f
 80071a2:	d020      	beq.n	80071e6 <_printf_i+0xb2>
 80071a4:	2970      	cmp	r1, #112	; 0x70
 80071a6:	d1dd      	bne.n	8007164 <_printf_i+0x30>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	f043 0320 	orr.w	r3, r3, #32
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	e003      	b.n	80071ba <_printf_i+0x86>
 80071b2:	2975      	cmp	r1, #117	; 0x75
 80071b4:	d017      	beq.n	80071e6 <_printf_i+0xb2>
 80071b6:	2978      	cmp	r1, #120	; 0x78
 80071b8:	d1d4      	bne.n	8007164 <_printf_i+0x30>
 80071ba:	2378      	movs	r3, #120	; 0x78
 80071bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c0:	4864      	ldr	r0, [pc, #400]	; (8007354 <_printf_i+0x220>)
 80071c2:	e055      	b.n	8007270 <_printf_i+0x13c>
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	1d19      	adds	r1, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6011      	str	r1, [r2, #0]
 80071cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d4:	2301      	movs	r3, #1
 80071d6:	e08c      	b.n	80072f2 <_printf_i+0x1be>
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6011      	str	r1, [r2, #0]
 80071dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071e0:	bf18      	it	ne
 80071e2:	b21b      	sxthne	r3, r3
 80071e4:	e7cf      	b.n	8007186 <_printf_i+0x52>
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	6825      	ldr	r5, [r4, #0]
 80071ea:	1d18      	adds	r0, r3, #4
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	0628      	lsls	r0, r5, #24
 80071f0:	d501      	bpl.n	80071f6 <_printf_i+0xc2>
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	e002      	b.n	80071fc <_printf_i+0xc8>
 80071f6:	0668      	lsls	r0, r5, #25
 80071f8:	d5fb      	bpl.n	80071f2 <_printf_i+0xbe>
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	4854      	ldr	r0, [pc, #336]	; (8007350 <_printf_i+0x21c>)
 80071fe:	296f      	cmp	r1, #111	; 0x6f
 8007200:	bf14      	ite	ne
 8007202:	220a      	movne	r2, #10
 8007204:	2208      	moveq	r2, #8
 8007206:	2100      	movs	r1, #0
 8007208:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800720c:	6865      	ldr	r5, [r4, #4]
 800720e:	60a5      	str	r5, [r4, #8]
 8007210:	2d00      	cmp	r5, #0
 8007212:	f2c0 8095 	blt.w	8007340 <_printf_i+0x20c>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	f021 0104 	bic.w	r1, r1, #4
 800721c:	6021      	str	r1, [r4, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d13d      	bne.n	800729e <_printf_i+0x16a>
 8007222:	2d00      	cmp	r5, #0
 8007224:	f040 808e 	bne.w	8007344 <_printf_i+0x210>
 8007228:	4665      	mov	r5, ip
 800722a:	2a08      	cmp	r2, #8
 800722c:	d10b      	bne.n	8007246 <_printf_i+0x112>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	07db      	lsls	r3, r3, #31
 8007232:	d508      	bpl.n	8007246 <_printf_i+0x112>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	bfde      	ittt	le
 800723c:	2330      	movle	r3, #48	; 0x30
 800723e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007242:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007246:	ebac 0305 	sub.w	r3, ip, r5
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	f8cd 8000 	str.w	r8, [sp]
 8007250:	463b      	mov	r3, r7
 8007252:	aa03      	add	r2, sp, #12
 8007254:	4621      	mov	r1, r4
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff fef6 	bl	8007048 <_printf_common>
 800725c:	3001      	adds	r0, #1
 800725e:	d14d      	bne.n	80072fc <_printf_i+0x1c8>
 8007260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007264:	b005      	add	sp, #20
 8007266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800726a:	4839      	ldr	r0, [pc, #228]	; (8007350 <_printf_i+0x21c>)
 800726c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	6821      	ldr	r1, [r4, #0]
 8007274:	1d1d      	adds	r5, r3, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6015      	str	r5, [r2, #0]
 800727a:	060a      	lsls	r2, r1, #24
 800727c:	d50b      	bpl.n	8007296 <_printf_i+0x162>
 800727e:	07ca      	lsls	r2, r1, #31
 8007280:	bf44      	itt	mi
 8007282:	f041 0120 	orrmi.w	r1, r1, #32
 8007286:	6021      	strmi	r1, [r4, #0]
 8007288:	b91b      	cbnz	r3, 8007292 <_printf_i+0x15e>
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	f022 0220 	bic.w	r2, r2, #32
 8007290:	6022      	str	r2, [r4, #0]
 8007292:	2210      	movs	r2, #16
 8007294:	e7b7      	b.n	8007206 <_printf_i+0xd2>
 8007296:	064d      	lsls	r5, r1, #25
 8007298:	bf48      	it	mi
 800729a:	b29b      	uxthmi	r3, r3
 800729c:	e7ef      	b.n	800727e <_printf_i+0x14a>
 800729e:	4665      	mov	r5, ip
 80072a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80072a4:	fb02 3311 	mls	r3, r2, r1, r3
 80072a8:	5cc3      	ldrb	r3, [r0, r3]
 80072aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072ae:	460b      	mov	r3, r1
 80072b0:	2900      	cmp	r1, #0
 80072b2:	d1f5      	bne.n	80072a0 <_printf_i+0x16c>
 80072b4:	e7b9      	b.n	800722a <_printf_i+0xf6>
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	6825      	ldr	r5, [r4, #0]
 80072ba:	6961      	ldr	r1, [r4, #20]
 80072bc:	1d18      	adds	r0, r3, #4
 80072be:	6010      	str	r0, [r2, #0]
 80072c0:	0628      	lsls	r0, r5, #24
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	d501      	bpl.n	80072ca <_printf_i+0x196>
 80072c6:	6019      	str	r1, [r3, #0]
 80072c8:	e002      	b.n	80072d0 <_printf_i+0x19c>
 80072ca:	066a      	lsls	r2, r5, #25
 80072cc:	d5fb      	bpl.n	80072c6 <_printf_i+0x192>
 80072ce:	8019      	strh	r1, [r3, #0]
 80072d0:	2300      	movs	r3, #0
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	4665      	mov	r5, ip
 80072d6:	e7b9      	b.n	800724c <_printf_i+0x118>
 80072d8:	6813      	ldr	r3, [r2, #0]
 80072da:	1d19      	adds	r1, r3, #4
 80072dc:	6011      	str	r1, [r2, #0]
 80072de:	681d      	ldr	r5, [r3, #0]
 80072e0:	6862      	ldr	r2, [r4, #4]
 80072e2:	2100      	movs	r1, #0
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7f8 ffb3 	bl	8000250 <memchr>
 80072ea:	b108      	cbz	r0, 80072f0 <_printf_i+0x1bc>
 80072ec:	1b40      	subs	r0, r0, r5
 80072ee:	6060      	str	r0, [r4, #4]
 80072f0:	6863      	ldr	r3, [r4, #4]
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	2300      	movs	r3, #0
 80072f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072fa:	e7a7      	b.n	800724c <_printf_i+0x118>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	462a      	mov	r2, r5
 8007300:	4639      	mov	r1, r7
 8007302:	4630      	mov	r0, r6
 8007304:	47c0      	blx	r8
 8007306:	3001      	adds	r0, #1
 8007308:	d0aa      	beq.n	8007260 <_printf_i+0x12c>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	079b      	lsls	r3, r3, #30
 800730e:	d413      	bmi.n	8007338 <_printf_i+0x204>
 8007310:	68e0      	ldr	r0, [r4, #12]
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	4298      	cmp	r0, r3
 8007316:	bfb8      	it	lt
 8007318:	4618      	movlt	r0, r3
 800731a:	e7a3      	b.n	8007264 <_printf_i+0x130>
 800731c:	2301      	movs	r3, #1
 800731e:	464a      	mov	r2, r9
 8007320:	4639      	mov	r1, r7
 8007322:	4630      	mov	r0, r6
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d09a      	beq.n	8007260 <_printf_i+0x12c>
 800732a:	3501      	adds	r5, #1
 800732c:	68e3      	ldr	r3, [r4, #12]
 800732e:	9a03      	ldr	r2, [sp, #12]
 8007330:	1a9b      	subs	r3, r3, r2
 8007332:	42ab      	cmp	r3, r5
 8007334:	dcf2      	bgt.n	800731c <_printf_i+0x1e8>
 8007336:	e7eb      	b.n	8007310 <_printf_i+0x1dc>
 8007338:	2500      	movs	r5, #0
 800733a:	f104 0919 	add.w	r9, r4, #25
 800733e:	e7f5      	b.n	800732c <_printf_i+0x1f8>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1ac      	bne.n	800729e <_printf_i+0x16a>
 8007344:	7803      	ldrb	r3, [r0, #0]
 8007346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800734a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800734e:	e76c      	b.n	800722a <_printf_i+0xf6>
 8007350:	0800ac5e 	.word	0x0800ac5e
 8007354:	0800ac6f 	.word	0x0800ac6f

08007358 <_scanf_float>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	469a      	mov	sl, r3
 800735e:	688b      	ldr	r3, [r1, #8]
 8007360:	4616      	mov	r6, r2
 8007362:	1e5a      	subs	r2, r3, #1
 8007364:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007368:	b087      	sub	sp, #28
 800736a:	bf83      	ittte	hi
 800736c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007370:	189b      	addhi	r3, r3, r2
 8007372:	9301      	strhi	r3, [sp, #4]
 8007374:	2300      	movls	r3, #0
 8007376:	bf86      	itte	hi
 8007378:	f240 135d 	movwhi	r3, #349	; 0x15d
 800737c:	608b      	strhi	r3, [r1, #8]
 800737e:	9301      	strls	r3, [sp, #4]
 8007380:	680b      	ldr	r3, [r1, #0]
 8007382:	4688      	mov	r8, r1
 8007384:	f04f 0b00 	mov.w	fp, #0
 8007388:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800738c:	f848 3b1c 	str.w	r3, [r8], #28
 8007390:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007394:	4607      	mov	r7, r0
 8007396:	460c      	mov	r4, r1
 8007398:	4645      	mov	r5, r8
 800739a:	465a      	mov	r2, fp
 800739c:	46d9      	mov	r9, fp
 800739e:	f8cd b008 	str.w	fp, [sp, #8]
 80073a2:	68a1      	ldr	r1, [r4, #8]
 80073a4:	b181      	cbz	r1, 80073c8 <_scanf_float+0x70>
 80073a6:	6833      	ldr	r3, [r6, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b49      	cmp	r3, #73	; 0x49
 80073ac:	d071      	beq.n	8007492 <_scanf_float+0x13a>
 80073ae:	d84d      	bhi.n	800744c <_scanf_float+0xf4>
 80073b0:	2b39      	cmp	r3, #57	; 0x39
 80073b2:	d840      	bhi.n	8007436 <_scanf_float+0xde>
 80073b4:	2b31      	cmp	r3, #49	; 0x31
 80073b6:	f080 8088 	bcs.w	80074ca <_scanf_float+0x172>
 80073ba:	2b2d      	cmp	r3, #45	; 0x2d
 80073bc:	f000 8090 	beq.w	80074e0 <_scanf_float+0x188>
 80073c0:	d815      	bhi.n	80073ee <_scanf_float+0x96>
 80073c2:	2b2b      	cmp	r3, #43	; 0x2b
 80073c4:	f000 808c 	beq.w	80074e0 <_scanf_float+0x188>
 80073c8:	f1b9 0f00 	cmp.w	r9, #0
 80073cc:	d003      	beq.n	80073d6 <_scanf_float+0x7e>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	3a01      	subs	r2, #1
 80073d8:	2a01      	cmp	r2, #1
 80073da:	f200 80ea 	bhi.w	80075b2 <_scanf_float+0x25a>
 80073de:	4545      	cmp	r5, r8
 80073e0:	f200 80dc 	bhi.w	800759c <_scanf_float+0x244>
 80073e4:	2601      	movs	r6, #1
 80073e6:	4630      	mov	r0, r6
 80073e8:	b007      	add	sp, #28
 80073ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ee:	2b2e      	cmp	r3, #46	; 0x2e
 80073f0:	f000 809f 	beq.w	8007532 <_scanf_float+0x1da>
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d1e7      	bne.n	80073c8 <_scanf_float+0x70>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80073fe:	d064      	beq.n	80074ca <_scanf_float+0x172>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007406:	6020      	str	r0, [r4, #0]
 8007408:	f109 0901 	add.w	r9, r9, #1
 800740c:	b11b      	cbz	r3, 8007416 <_scanf_float+0xbe>
 800740e:	3b01      	subs	r3, #1
 8007410:	3101      	adds	r1, #1
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	60a1      	str	r1, [r4, #8]
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	3b01      	subs	r3, #1
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	6873      	ldr	r3, [r6, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	6073      	str	r3, [r6, #4]
 800742a:	f340 80ac 	ble.w	8007586 <_scanf_float+0x22e>
 800742e:	6833      	ldr	r3, [r6, #0]
 8007430:	3301      	adds	r3, #1
 8007432:	6033      	str	r3, [r6, #0]
 8007434:	e7b5      	b.n	80073a2 <_scanf_float+0x4a>
 8007436:	2b45      	cmp	r3, #69	; 0x45
 8007438:	f000 8085 	beq.w	8007546 <_scanf_float+0x1ee>
 800743c:	2b46      	cmp	r3, #70	; 0x46
 800743e:	d06a      	beq.n	8007516 <_scanf_float+0x1be>
 8007440:	2b41      	cmp	r3, #65	; 0x41
 8007442:	d1c1      	bne.n	80073c8 <_scanf_float+0x70>
 8007444:	2a01      	cmp	r2, #1
 8007446:	d1bf      	bne.n	80073c8 <_scanf_float+0x70>
 8007448:	2202      	movs	r2, #2
 800744a:	e046      	b.n	80074da <_scanf_float+0x182>
 800744c:	2b65      	cmp	r3, #101	; 0x65
 800744e:	d07a      	beq.n	8007546 <_scanf_float+0x1ee>
 8007450:	d818      	bhi.n	8007484 <_scanf_float+0x12c>
 8007452:	2b54      	cmp	r3, #84	; 0x54
 8007454:	d066      	beq.n	8007524 <_scanf_float+0x1cc>
 8007456:	d811      	bhi.n	800747c <_scanf_float+0x124>
 8007458:	2b4e      	cmp	r3, #78	; 0x4e
 800745a:	d1b5      	bne.n	80073c8 <_scanf_float+0x70>
 800745c:	2a00      	cmp	r2, #0
 800745e:	d146      	bne.n	80074ee <_scanf_float+0x196>
 8007460:	f1b9 0f00 	cmp.w	r9, #0
 8007464:	d145      	bne.n	80074f2 <_scanf_float+0x19a>
 8007466:	6821      	ldr	r1, [r4, #0]
 8007468:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800746c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007470:	d13f      	bne.n	80074f2 <_scanf_float+0x19a>
 8007472:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007476:	6021      	str	r1, [r4, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	e02e      	b.n	80074da <_scanf_float+0x182>
 800747c:	2b59      	cmp	r3, #89	; 0x59
 800747e:	d01e      	beq.n	80074be <_scanf_float+0x166>
 8007480:	2b61      	cmp	r3, #97	; 0x61
 8007482:	e7de      	b.n	8007442 <_scanf_float+0xea>
 8007484:	2b6e      	cmp	r3, #110	; 0x6e
 8007486:	d0e9      	beq.n	800745c <_scanf_float+0x104>
 8007488:	d815      	bhi.n	80074b6 <_scanf_float+0x15e>
 800748a:	2b66      	cmp	r3, #102	; 0x66
 800748c:	d043      	beq.n	8007516 <_scanf_float+0x1be>
 800748e:	2b69      	cmp	r3, #105	; 0x69
 8007490:	d19a      	bne.n	80073c8 <_scanf_float+0x70>
 8007492:	f1bb 0f00 	cmp.w	fp, #0
 8007496:	d138      	bne.n	800750a <_scanf_float+0x1b2>
 8007498:	f1b9 0f00 	cmp.w	r9, #0
 800749c:	d197      	bne.n	80073ce <_scanf_float+0x76>
 800749e:	6821      	ldr	r1, [r4, #0]
 80074a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80074a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80074a8:	d195      	bne.n	80073d6 <_scanf_float+0x7e>
 80074aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80074ae:	6021      	str	r1, [r4, #0]
 80074b0:	f04f 0b01 	mov.w	fp, #1
 80074b4:	e011      	b.n	80074da <_scanf_float+0x182>
 80074b6:	2b74      	cmp	r3, #116	; 0x74
 80074b8:	d034      	beq.n	8007524 <_scanf_float+0x1cc>
 80074ba:	2b79      	cmp	r3, #121	; 0x79
 80074bc:	d184      	bne.n	80073c8 <_scanf_float+0x70>
 80074be:	f1bb 0f07 	cmp.w	fp, #7
 80074c2:	d181      	bne.n	80073c8 <_scanf_float+0x70>
 80074c4:	f04f 0b08 	mov.w	fp, #8
 80074c8:	e007      	b.n	80074da <_scanf_float+0x182>
 80074ca:	eb12 0f0b 	cmn.w	r2, fp
 80074ce:	f47f af7b 	bne.w	80073c8 <_scanf_float+0x70>
 80074d2:	6821      	ldr	r1, [r4, #0]
 80074d4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80074d8:	6021      	str	r1, [r4, #0]
 80074da:	702b      	strb	r3, [r5, #0]
 80074dc:	3501      	adds	r5, #1
 80074de:	e79a      	b.n	8007416 <_scanf_float+0xbe>
 80074e0:	6821      	ldr	r1, [r4, #0]
 80074e2:	0608      	lsls	r0, r1, #24
 80074e4:	f57f af70 	bpl.w	80073c8 <_scanf_float+0x70>
 80074e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074ec:	e7f4      	b.n	80074d8 <_scanf_float+0x180>
 80074ee:	2a02      	cmp	r2, #2
 80074f0:	d047      	beq.n	8007582 <_scanf_float+0x22a>
 80074f2:	f1bb 0f01 	cmp.w	fp, #1
 80074f6:	d003      	beq.n	8007500 <_scanf_float+0x1a8>
 80074f8:	f1bb 0f04 	cmp.w	fp, #4
 80074fc:	f47f af64 	bne.w	80073c8 <_scanf_float+0x70>
 8007500:	f10b 0b01 	add.w	fp, fp, #1
 8007504:	fa5f fb8b 	uxtb.w	fp, fp
 8007508:	e7e7      	b.n	80074da <_scanf_float+0x182>
 800750a:	f1bb 0f03 	cmp.w	fp, #3
 800750e:	d0f7      	beq.n	8007500 <_scanf_float+0x1a8>
 8007510:	f1bb 0f05 	cmp.w	fp, #5
 8007514:	e7f2      	b.n	80074fc <_scanf_float+0x1a4>
 8007516:	f1bb 0f02 	cmp.w	fp, #2
 800751a:	f47f af55 	bne.w	80073c8 <_scanf_float+0x70>
 800751e:	f04f 0b03 	mov.w	fp, #3
 8007522:	e7da      	b.n	80074da <_scanf_float+0x182>
 8007524:	f1bb 0f06 	cmp.w	fp, #6
 8007528:	f47f af4e 	bne.w	80073c8 <_scanf_float+0x70>
 800752c:	f04f 0b07 	mov.w	fp, #7
 8007530:	e7d3      	b.n	80074da <_scanf_float+0x182>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	0588      	lsls	r0, r1, #22
 8007536:	f57f af47 	bpl.w	80073c8 <_scanf_float+0x70>
 800753a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800753e:	6021      	str	r1, [r4, #0]
 8007540:	f8cd 9008 	str.w	r9, [sp, #8]
 8007544:	e7c9      	b.n	80074da <_scanf_float+0x182>
 8007546:	6821      	ldr	r1, [r4, #0]
 8007548:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800754c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007550:	d006      	beq.n	8007560 <_scanf_float+0x208>
 8007552:	0548      	lsls	r0, r1, #21
 8007554:	f57f af38 	bpl.w	80073c8 <_scanf_float+0x70>
 8007558:	f1b9 0f00 	cmp.w	r9, #0
 800755c:	f43f af3b 	beq.w	80073d6 <_scanf_float+0x7e>
 8007560:	0588      	lsls	r0, r1, #22
 8007562:	bf58      	it	pl
 8007564:	9802      	ldrpl	r0, [sp, #8]
 8007566:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800756a:	bf58      	it	pl
 800756c:	eba9 0000 	subpl.w	r0, r9, r0
 8007570:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007574:	bf58      	it	pl
 8007576:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800757a:	6021      	str	r1, [r4, #0]
 800757c:	f04f 0900 	mov.w	r9, #0
 8007580:	e7ab      	b.n	80074da <_scanf_float+0x182>
 8007582:	2203      	movs	r2, #3
 8007584:	e7a9      	b.n	80074da <_scanf_float+0x182>
 8007586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800758a:	9205      	str	r2, [sp, #20]
 800758c:	4631      	mov	r1, r6
 800758e:	4638      	mov	r0, r7
 8007590:	4798      	blx	r3
 8007592:	9a05      	ldr	r2, [sp, #20]
 8007594:	2800      	cmp	r0, #0
 8007596:	f43f af04 	beq.w	80073a2 <_scanf_float+0x4a>
 800759a:	e715      	b.n	80073c8 <_scanf_float+0x70>
 800759c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80075a4:	4632      	mov	r2, r6
 80075a6:	4638      	mov	r0, r7
 80075a8:	4798      	blx	r3
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	e715      	b.n	80073de <_scanf_float+0x86>
 80075b2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d80a      	bhi.n	80075d0 <_scanf_float+0x278>
 80075ba:	f1bb 0f02 	cmp.w	fp, #2
 80075be:	d966      	bls.n	800768e <_scanf_float+0x336>
 80075c0:	f1ab 0b03 	sub.w	fp, fp, #3
 80075c4:	fa5f fb8b 	uxtb.w	fp, fp
 80075c8:	eba5 0b0b 	sub.w	fp, r5, fp
 80075cc:	455d      	cmp	r5, fp
 80075ce:	d149      	bne.n	8007664 <_scanf_float+0x30c>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	05da      	lsls	r2, r3, #23
 80075d4:	d51f      	bpl.n	8007616 <_scanf_float+0x2be>
 80075d6:	055b      	lsls	r3, r3, #21
 80075d8:	d466      	bmi.n	80076a8 <_scanf_float+0x350>
 80075da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	2965      	cmp	r1, #101	; 0x65
 80075e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80075e6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	d00d      	beq.n	800760a <_scanf_float+0x2b2>
 80075ee:	2945      	cmp	r1, #69	; 0x45
 80075f0:	d00b      	beq.n	800760a <_scanf_float+0x2b2>
 80075f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075f6:	4632      	mov	r2, r6
 80075f8:	4638      	mov	r0, r7
 80075fa:	4798      	blx	r3
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007602:	3b01      	subs	r3, #1
 8007604:	f1a5 0b02 	sub.w	fp, r5, #2
 8007608:	6123      	str	r3, [r4, #16]
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800760e:	4632      	mov	r2, r6
 8007610:	4638      	mov	r0, r7
 8007612:	4798      	blx	r3
 8007614:	465d      	mov	r5, fp
 8007616:	6826      	ldr	r6, [r4, #0]
 8007618:	f016 0610 	ands.w	r6, r6, #16
 800761c:	d170      	bne.n	8007700 <_scanf_float+0x3a8>
 800761e:	702e      	strb	r6, [r5, #0]
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762a:	d140      	bne.n	80076ae <_scanf_float+0x356>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	eba9 0303 	sub.w	r3, r9, r3
 8007632:	425a      	negs	r2, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d147      	bne.n	80076c8 <_scanf_float+0x370>
 8007638:	2200      	movs	r2, #0
 800763a:	4638      	mov	r0, r7
 800763c:	4641      	mov	r1, r8
 800763e:	f000 fe7b 	bl	8008338 <_strtod_r>
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	f8da 3000 	ldr.w	r3, [sl]
 8007648:	f010 0f02 	tst.w	r0, #2
 800764c:	f103 0204 	add.w	r2, r3, #4
 8007650:	f8ca 2000 	str.w	r2, [sl]
 8007654:	d043      	beq.n	80076de <_scanf_float+0x386>
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	ed83 0b00 	vstr	d0, [r3]
 800765c:	68e3      	ldr	r3, [r4, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60e3      	str	r3, [r4, #12]
 8007662:	e6c0      	b.n	80073e6 <_scanf_float+0x8e>
 8007664:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007668:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800766c:	4632      	mov	r2, r6
 800766e:	4638      	mov	r0, r7
 8007670:	4798      	blx	r3
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	3b01      	subs	r3, #1
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	e7a8      	b.n	80075cc <_scanf_float+0x274>
 800767a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800767e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007682:	4632      	mov	r2, r6
 8007684:	4638      	mov	r0, r7
 8007686:	4798      	blx	r3
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	3b01      	subs	r3, #1
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	4545      	cmp	r5, r8
 8007690:	d8f3      	bhi.n	800767a <_scanf_float+0x322>
 8007692:	e6a7      	b.n	80073e4 <_scanf_float+0x8c>
 8007694:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007698:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800769c:	4632      	mov	r2, r6
 800769e:	4638      	mov	r0, r7
 80076a0:	4798      	blx	r3
 80076a2:	6923      	ldr	r3, [r4, #16]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	4545      	cmp	r5, r8
 80076aa:	d8f3      	bhi.n	8007694 <_scanf_float+0x33c>
 80076ac:	e69a      	b.n	80073e4 <_scanf_float+0x8c>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0c1      	beq.n	8007638 <_scanf_float+0x2e0>
 80076b4:	9904      	ldr	r1, [sp, #16]
 80076b6:	230a      	movs	r3, #10
 80076b8:	4632      	mov	r2, r6
 80076ba:	3101      	adds	r1, #1
 80076bc:	4638      	mov	r0, r7
 80076be:	f000 fec7 	bl	8008450 <_strtol_r>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	9d04      	ldr	r5, [sp, #16]
 80076c6:	1ac2      	subs	r2, r0, r3
 80076c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076cc:	429d      	cmp	r5, r3
 80076ce:	bf28      	it	cs
 80076d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80076d4:	490b      	ldr	r1, [pc, #44]	; (8007704 <_scanf_float+0x3ac>)
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 f82c 	bl	8007734 <siprintf>
 80076dc:	e7ac      	b.n	8007638 <_scanf_float+0x2e0>
 80076de:	f010 0004 	ands.w	r0, r0, #4
 80076e2:	d1b8      	bne.n	8007656 <_scanf_float+0x2fe>
 80076e4:	eeb4 0b40 	vcmp.f64	d0, d0
 80076e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ec:	681d      	ldr	r5, [r3, #0]
 80076ee:	d704      	bvc.n	80076fa <_scanf_float+0x3a2>
 80076f0:	f000 f81a 	bl	8007728 <nanf>
 80076f4:	ed85 0a00 	vstr	s0, [r5]
 80076f8:	e7b0      	b.n	800765c <_scanf_float+0x304>
 80076fa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80076fe:	e7f9      	b.n	80076f4 <_scanf_float+0x39c>
 8007700:	2600      	movs	r6, #0
 8007702:	e670      	b.n	80073e6 <_scanf_float+0x8e>
 8007704:	0800ac80 	.word	0x0800ac80

08007708 <copysign>:
 8007708:	ec51 0b10 	vmov	r0, r1, d0
 800770c:	ee11 0a90 	vmov	r0, s3
 8007710:	ee10 2a10 	vmov	r2, s0
 8007714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007718:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800771c:	ea41 0300 	orr.w	r3, r1, r0
 8007720:	ec43 2b10 	vmov	d0, r2, r3
 8007724:	4770      	bx	lr
	...

08007728 <nanf>:
 8007728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007730 <nanf+0x8>
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	7fc00000 	.word	0x7fc00000

08007734 <siprintf>:
 8007734:	b40e      	push	{r1, r2, r3}
 8007736:	b500      	push	{lr}
 8007738:	b09c      	sub	sp, #112	; 0x70
 800773a:	ab1d      	add	r3, sp, #116	; 0x74
 800773c:	9002      	str	r0, [sp, #8]
 800773e:	9006      	str	r0, [sp, #24]
 8007740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007744:	4809      	ldr	r0, [pc, #36]	; (800776c <siprintf+0x38>)
 8007746:	9107      	str	r1, [sp, #28]
 8007748:	9104      	str	r1, [sp, #16]
 800774a:	4909      	ldr	r1, [pc, #36]	; (8007770 <siprintf+0x3c>)
 800774c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007750:	9105      	str	r1, [sp, #20]
 8007752:	6800      	ldr	r0, [r0, #0]
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	a902      	add	r1, sp, #8
 8007758:	f002 fcca 	bl	800a0f0 <_svfiprintf_r>
 800775c:	9b02      	ldr	r3, [sp, #8]
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	b01c      	add	sp, #112	; 0x70
 8007764:	f85d eb04 	ldr.w	lr, [sp], #4
 8007768:	b003      	add	sp, #12
 800776a:	4770      	bx	lr
 800776c:	20000018 	.word	0x20000018
 8007770:	ffff0208 	.word	0xffff0208

08007774 <sulp>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	460d      	mov	r5, r1
 800777a:	4616      	mov	r6, r2
 800777c:	ec45 4b10 	vmov	d0, r4, r5
 8007780:	f002 fa72 	bl	8009c68 <__ulp>
 8007784:	b17e      	cbz	r6, 80077a6 <sulp+0x32>
 8007786:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800778a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd09      	ble.n	80077a6 <sulp+0x32>
 8007792:	051b      	lsls	r3, r3, #20
 8007794:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007798:	2000      	movs	r0, #0
 800779a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800779e:	ec41 0b17 	vmov	d7, r0, r1
 80077a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80077a6:	bd70      	pop	{r4, r5, r6, pc}

080077a8 <_strtod_l>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	ed2d 8b0c 	vpush	{d8-d13}
 80077b0:	4698      	mov	r8, r3
 80077b2:	b09d      	sub	sp, #116	; 0x74
 80077b4:	2300      	movs	r3, #0
 80077b6:	4604      	mov	r4, r0
 80077b8:	4640      	mov	r0, r8
 80077ba:	460e      	mov	r6, r1
 80077bc:	9214      	str	r2, [sp, #80]	; 0x50
 80077be:	9318      	str	r3, [sp, #96]	; 0x60
 80077c0:	f001 ff5b 	bl	800967a <__localeconv_l>
 80077c4:	4681      	mov	r9, r0
 80077c6:	6800      	ldr	r0, [r0, #0]
 80077c8:	f7f8 fd3a 	bl	8000240 <strlen>
 80077cc:	f04f 0a00 	mov.w	sl, #0
 80077d0:	4607      	mov	r7, r0
 80077d2:	f04f 0b00 	mov.w	fp, #0
 80077d6:	9617      	str	r6, [sp, #92]	; 0x5c
 80077d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	2a0d      	cmp	r2, #13
 80077de:	d834      	bhi.n	800784a <_strtod_l+0xa2>
 80077e0:	2a09      	cmp	r2, #9
 80077e2:	d238      	bcs.n	8007856 <_strtod_l+0xae>
 80077e4:	2a00      	cmp	r2, #0
 80077e6:	d040      	beq.n	800786a <_strtod_l+0xc2>
 80077e8:	2300      	movs	r3, #0
 80077ea:	930d      	str	r3, [sp, #52]	; 0x34
 80077ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80077ee:	782b      	ldrb	r3, [r5, #0]
 80077f0:	2b30      	cmp	r3, #48	; 0x30
 80077f2:	f040 80b3 	bne.w	800795c <_strtod_l+0x1b4>
 80077f6:	786b      	ldrb	r3, [r5, #1]
 80077f8:	2b58      	cmp	r3, #88	; 0x58
 80077fa:	d001      	beq.n	8007800 <_strtod_l+0x58>
 80077fc:	2b78      	cmp	r3, #120	; 0x78
 80077fe:	d169      	bne.n	80078d4 <_strtod_l+0x12c>
 8007800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	ab18      	add	r3, sp, #96	; 0x60
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	f8cd 8008 	str.w	r8, [sp, #8]
 800780c:	ab19      	add	r3, sp, #100	; 0x64
 800780e:	4a8f      	ldr	r2, [pc, #572]	; (8007a4c <_strtod_l+0x2a4>)
 8007810:	a917      	add	r1, sp, #92	; 0x5c
 8007812:	4620      	mov	r0, r4
 8007814:	f001 fc57 	bl	80090c6 <__gethex>
 8007818:	f010 0607 	ands.w	r6, r0, #7
 800781c:	4607      	mov	r7, r0
 800781e:	d005      	beq.n	800782c <_strtod_l+0x84>
 8007820:	2e06      	cmp	r6, #6
 8007822:	d12c      	bne.n	800787e <_strtod_l+0xd6>
 8007824:	3501      	adds	r5, #1
 8007826:	2300      	movs	r3, #0
 8007828:	9517      	str	r5, [sp, #92]	; 0x5c
 800782a:	930d      	str	r3, [sp, #52]	; 0x34
 800782c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	f040 855e 	bne.w	80082f0 <_strtod_l+0xb48>
 8007834:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007836:	b1eb      	cbz	r3, 8007874 <_strtod_l+0xcc>
 8007838:	ec4b ab17 	vmov	d7, sl, fp
 800783c:	eeb1 0b47 	vneg.f64	d0, d7
 8007840:	b01d      	add	sp, #116	; 0x74
 8007842:	ecbd 8b0c 	vpop	{d8-d13}
 8007846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800784a:	2a2b      	cmp	r2, #43	; 0x2b
 800784c:	d015      	beq.n	800787a <_strtod_l+0xd2>
 800784e:	2a2d      	cmp	r2, #45	; 0x2d
 8007850:	d004      	beq.n	800785c <_strtod_l+0xb4>
 8007852:	2a20      	cmp	r2, #32
 8007854:	d1c8      	bne.n	80077e8 <_strtod_l+0x40>
 8007856:	3301      	adds	r3, #1
 8007858:	9317      	str	r3, [sp, #92]	; 0x5c
 800785a:	e7bd      	b.n	80077d8 <_strtod_l+0x30>
 800785c:	2201      	movs	r2, #1
 800785e:	920d      	str	r2, [sp, #52]	; 0x34
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	9217      	str	r2, [sp, #92]	; 0x5c
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1c0      	bne.n	80077ec <_strtod_l+0x44>
 800786a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800786c:	9617      	str	r6, [sp, #92]	; 0x5c
 800786e:	2b00      	cmp	r3, #0
 8007870:	f040 853c 	bne.w	80082ec <_strtod_l+0xb44>
 8007874:	ec4b ab10 	vmov	d0, sl, fp
 8007878:	e7e2      	b.n	8007840 <_strtod_l+0x98>
 800787a:	2200      	movs	r2, #0
 800787c:	e7ef      	b.n	800785e <_strtod_l+0xb6>
 800787e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007880:	b13a      	cbz	r2, 8007892 <_strtod_l+0xea>
 8007882:	2135      	movs	r1, #53	; 0x35
 8007884:	a81a      	add	r0, sp, #104	; 0x68
 8007886:	f002 fae8 	bl	8009e5a <__copybits>
 800788a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800788c:	4620      	mov	r0, r4
 800788e:	f001 ff53 	bl	8009738 <_Bfree>
 8007892:	3e01      	subs	r6, #1
 8007894:	2e04      	cmp	r6, #4
 8007896:	d806      	bhi.n	80078a6 <_strtod_l+0xfe>
 8007898:	e8df f006 	tbb	[pc, r6]
 800789c:	1714030a 	.word	0x1714030a
 80078a0:	0a          	.byte	0x0a
 80078a1:	00          	.byte	0x00
 80078a2:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80078a6:	073b      	lsls	r3, r7, #28
 80078a8:	d5c0      	bpl.n	800782c <_strtod_l+0x84>
 80078aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80078ae:	e7bd      	b.n	800782c <_strtod_l+0x84>
 80078b0:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80078b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078c2:	e7f0      	b.n	80078a6 <_strtod_l+0xfe>
 80078c4:	f8df b188 	ldr.w	fp, [pc, #392]	; 8007a50 <_strtod_l+0x2a8>
 80078c8:	e7ed      	b.n	80078a6 <_strtod_l+0xfe>
 80078ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80078d2:	e7e8      	b.n	80078a6 <_strtod_l+0xfe>
 80078d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b30      	cmp	r3, #48	; 0x30
 80078de:	d0f9      	beq.n	80078d4 <_strtod_l+0x12c>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0a3      	beq.n	800782c <_strtod_l+0x84>
 80078e4:	2301      	movs	r3, #1
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ea:	930c      	str	r3, [sp, #48]	; 0x30
 80078ec:	2300      	movs	r3, #0
 80078ee:	9306      	str	r3, [sp, #24]
 80078f0:	9308      	str	r3, [sp, #32]
 80078f2:	461d      	mov	r5, r3
 80078f4:	220a      	movs	r2, #10
 80078f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80078f8:	f890 8000 	ldrb.w	r8, [r0]
 80078fc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8007900:	b2d9      	uxtb	r1, r3
 8007902:	2909      	cmp	r1, #9
 8007904:	d92c      	bls.n	8007960 <_strtod_l+0x1b8>
 8007906:	463a      	mov	r2, r7
 8007908:	f8d9 1000 	ldr.w	r1, [r9]
 800790c:	f002 fcf8 	bl	800a300 <strncmp>
 8007910:	2800      	cmp	r0, #0
 8007912:	d035      	beq.n	8007980 <_strtod_l+0x1d8>
 8007914:	2000      	movs	r0, #0
 8007916:	4642      	mov	r2, r8
 8007918:	462b      	mov	r3, r5
 800791a:	4601      	mov	r1, r0
 800791c:	9004      	str	r0, [sp, #16]
 800791e:	2a65      	cmp	r2, #101	; 0x65
 8007920:	d001      	beq.n	8007926 <_strtod_l+0x17e>
 8007922:	2a45      	cmp	r2, #69	; 0x45
 8007924:	d117      	bne.n	8007956 <_strtod_l+0x1ae>
 8007926:	b923      	cbnz	r3, 8007932 <_strtod_l+0x18a>
 8007928:	b910      	cbnz	r0, 8007930 <_strtod_l+0x188>
 800792a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792c:	2b00      	cmp	r3, #0
 800792e:	d09c      	beq.n	800786a <_strtod_l+0xc2>
 8007930:	2300      	movs	r3, #0
 8007932:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007934:	1c72      	adds	r2, r6, #1
 8007936:	9217      	str	r2, [sp, #92]	; 0x5c
 8007938:	7872      	ldrb	r2, [r6, #1]
 800793a:	2a2b      	cmp	r2, #43	; 0x2b
 800793c:	f000 8082 	beq.w	8007a44 <_strtod_l+0x29c>
 8007940:	2a2d      	cmp	r2, #45	; 0x2d
 8007942:	d079      	beq.n	8007a38 <_strtod_l+0x290>
 8007944:	f04f 0e00 	mov.w	lr, #0
 8007948:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800794c:	f1bc 0f09 	cmp.w	ip, #9
 8007950:	f240 8086 	bls.w	8007a60 <_strtod_l+0x2b8>
 8007954:	9617      	str	r6, [sp, #92]	; 0x5c
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	e0a8      	b.n	8007aae <_strtod_l+0x306>
 800795c:	2300      	movs	r3, #0
 800795e:	e7c2      	b.n	80078e6 <_strtod_l+0x13e>
 8007960:	2d08      	cmp	r5, #8
 8007962:	bfd5      	itete	le
 8007964:	9908      	ldrle	r1, [sp, #32]
 8007966:	9906      	ldrgt	r1, [sp, #24]
 8007968:	fb02 3301 	mlale	r3, r2, r1, r3
 800796c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007970:	f100 0001 	add.w	r0, r0, #1
 8007974:	bfd4      	ite	le
 8007976:	9308      	strle	r3, [sp, #32]
 8007978:	9306      	strgt	r3, [sp, #24]
 800797a:	3501      	adds	r5, #1
 800797c:	9017      	str	r0, [sp, #92]	; 0x5c
 800797e:	e7ba      	b.n	80078f6 <_strtod_l+0x14e>
 8007980:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007982:	19da      	adds	r2, r3, r7
 8007984:	9217      	str	r2, [sp, #92]	; 0x5c
 8007986:	5dda      	ldrb	r2, [r3, r7]
 8007988:	2d00      	cmp	r5, #0
 800798a:	d038      	beq.n	80079fe <_strtod_l+0x256>
 800798c:	4601      	mov	r1, r0
 800798e:	462b      	mov	r3, r5
 8007990:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007994:	2f09      	cmp	r7, #9
 8007996:	d913      	bls.n	80079c0 <_strtod_l+0x218>
 8007998:	2701      	movs	r7, #1
 800799a:	9704      	str	r7, [sp, #16]
 800799c:	e7bf      	b.n	800791e <_strtod_l+0x176>
 800799e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	9217      	str	r2, [sp, #92]	; 0x5c
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	3001      	adds	r0, #1
 80079a8:	2a30      	cmp	r2, #48	; 0x30
 80079aa:	d0f8      	beq.n	800799e <_strtod_l+0x1f6>
 80079ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	f200 84a2 	bhi.w	80082fa <_strtod_l+0xb52>
 80079b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079b8:	930c      	str	r3, [sp, #48]	; 0x30
 80079ba:	4601      	mov	r1, r0
 80079bc:	2000      	movs	r0, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80079c4:	f100 0701 	add.w	r7, r0, #1
 80079c8:	d013      	beq.n	80079f2 <_strtod_l+0x24a>
 80079ca:	4439      	add	r1, r7
 80079cc:	eb00 0e03 	add.w	lr, r0, r3
 80079d0:	461f      	mov	r7, r3
 80079d2:	f04f 0c0a 	mov.w	ip, #10
 80079d6:	45be      	cmp	lr, r7
 80079d8:	d113      	bne.n	8007a02 <_strtod_l+0x25a>
 80079da:	181f      	adds	r7, r3, r0
 80079dc:	2f08      	cmp	r7, #8
 80079de:	f103 0301 	add.w	r3, r3, #1
 80079e2:	4403      	add	r3, r0
 80079e4:	dc1d      	bgt.n	8007a22 <_strtod_l+0x27a>
 80079e6:	9a08      	ldr	r2, [sp, #32]
 80079e8:	200a      	movs	r0, #10
 80079ea:	fb00 8202 	mla	r2, r0, r2, r8
 80079ee:	9208      	str	r2, [sp, #32]
 80079f0:	2700      	movs	r7, #0
 80079f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079f4:	1c50      	adds	r0, r2, #1
 80079f6:	9017      	str	r0, [sp, #92]	; 0x5c
 80079f8:	7852      	ldrb	r2, [r2, #1]
 80079fa:	4638      	mov	r0, r7
 80079fc:	e7c8      	b.n	8007990 <_strtod_l+0x1e8>
 80079fe:	4628      	mov	r0, r5
 8007a00:	e7d2      	b.n	80079a8 <_strtod_l+0x200>
 8007a02:	2f08      	cmp	r7, #8
 8007a04:	f107 0701 	add.w	r7, r7, #1
 8007a08:	dc04      	bgt.n	8007a14 <_strtod_l+0x26c>
 8007a0a:	9a08      	ldr	r2, [sp, #32]
 8007a0c:	fb0c f202 	mul.w	r2, ip, r2
 8007a10:	9208      	str	r2, [sp, #32]
 8007a12:	e7e0      	b.n	80079d6 <_strtod_l+0x22e>
 8007a14:	2f10      	cmp	r7, #16
 8007a16:	bfde      	ittt	le
 8007a18:	9a06      	ldrle	r2, [sp, #24]
 8007a1a:	fb0c f202 	mulle.w	r2, ip, r2
 8007a1e:	9206      	strle	r2, [sp, #24]
 8007a20:	e7d9      	b.n	80079d6 <_strtod_l+0x22e>
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	bfdf      	itttt	le
 8007a26:	9a06      	ldrle	r2, [sp, #24]
 8007a28:	200a      	movle	r0, #10
 8007a2a:	fb00 8202 	mlale	r2, r0, r2, r8
 8007a2e:	9206      	strle	r2, [sp, #24]
 8007a30:	e7de      	b.n	80079f0 <_strtod_l+0x248>
 8007a32:	2301      	movs	r3, #1
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	e777      	b.n	8007928 <_strtod_l+0x180>
 8007a38:	f04f 0e01 	mov.w	lr, #1
 8007a3c:	1cb2      	adds	r2, r6, #2
 8007a3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a40:	78b2      	ldrb	r2, [r6, #2]
 8007a42:	e781      	b.n	8007948 <_strtod_l+0x1a0>
 8007a44:	f04f 0e00 	mov.w	lr, #0
 8007a48:	e7f8      	b.n	8007a3c <_strtod_l+0x294>
 8007a4a:	bf00      	nop
 8007a4c:	0800ac88 	.word	0x0800ac88
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a56:	f102 0c01 	add.w	ip, r2, #1
 8007a5a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8007a5e:	7852      	ldrb	r2, [r2, #1]
 8007a60:	2a30      	cmp	r2, #48	; 0x30
 8007a62:	d0f7      	beq.n	8007a54 <_strtod_l+0x2ac>
 8007a64:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8007a68:	f1bc 0f08 	cmp.w	ip, #8
 8007a6c:	f63f af73 	bhi.w	8007956 <_strtod_l+0x1ae>
 8007a70:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8007a74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a76:	920e      	str	r2, [sp, #56]	; 0x38
 8007a78:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a7a:	f102 0c01 	add.w	ip, r2, #1
 8007a7e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8007a82:	7852      	ldrb	r2, [r2, #1]
 8007a84:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8007a88:	f1b9 0f09 	cmp.w	r9, #9
 8007a8c:	d939      	bls.n	8007b02 <_strtod_l+0x35a>
 8007a8e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007a90:	ebac 0c07 	sub.w	ip, ip, r7
 8007a94:	f1bc 0f08 	cmp.w	ip, #8
 8007a98:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8007a9c:	dc37      	bgt.n	8007b0e <_strtod_l+0x366>
 8007a9e:	45e0      	cmp	r8, ip
 8007aa0:	bfa8      	it	ge
 8007aa2:	46e0      	movge	r8, ip
 8007aa4:	f1be 0f00 	cmp.w	lr, #0
 8007aa8:	d001      	beq.n	8007aae <_strtod_l+0x306>
 8007aaa:	f1c8 0800 	rsb	r8, r8, #0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d151      	bne.n	8007b56 <_strtod_l+0x3ae>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f47f aeba 	bne.w	800782c <_strtod_l+0x84>
 8007ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f47f aeb6 	bne.w	800782c <_strtod_l+0x84>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f47f aed1 	bne.w	800786a <_strtod_l+0xc2>
 8007ac8:	2a4e      	cmp	r2, #78	; 0x4e
 8007aca:	d027      	beq.n	8007b1c <_strtod_l+0x374>
 8007acc:	dc21      	bgt.n	8007b12 <_strtod_l+0x36a>
 8007ace:	2a49      	cmp	r2, #73	; 0x49
 8007ad0:	f47f aecb 	bne.w	800786a <_strtod_l+0xc2>
 8007ad4:	499a      	ldr	r1, [pc, #616]	; (8007d40 <_strtod_l+0x598>)
 8007ad6:	a817      	add	r0, sp, #92	; 0x5c
 8007ad8:	f001 fd28 	bl	800952c <__match>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f43f aec4 	beq.w	800786a <_strtod_l+0xc2>
 8007ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ae4:	4997      	ldr	r1, [pc, #604]	; (8007d44 <_strtod_l+0x59c>)
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	a817      	add	r0, sp, #92	; 0x5c
 8007aea:	9317      	str	r3, [sp, #92]	; 0x5c
 8007aec:	f001 fd1e 	bl	800952c <__match>
 8007af0:	b910      	cbnz	r0, 8007af8 <_strtod_l+0x350>
 8007af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007af4:	3301      	adds	r3, #1
 8007af6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007af8:	f8df b260 	ldr.w	fp, [pc, #608]	; 8007d5c <_strtod_l+0x5b4>
 8007afc:	f04f 0a00 	mov.w	sl, #0
 8007b00:	e694      	b.n	800782c <_strtod_l+0x84>
 8007b02:	270a      	movs	r7, #10
 8007b04:	fb07 2808 	mla	r8, r7, r8, r2
 8007b08:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8007b0c:	e7b4      	b.n	8007a78 <_strtod_l+0x2d0>
 8007b0e:	46e0      	mov	r8, ip
 8007b10:	e7c8      	b.n	8007aa4 <_strtod_l+0x2fc>
 8007b12:	2a69      	cmp	r2, #105	; 0x69
 8007b14:	d0de      	beq.n	8007ad4 <_strtod_l+0x32c>
 8007b16:	2a6e      	cmp	r2, #110	; 0x6e
 8007b18:	f47f aea7 	bne.w	800786a <_strtod_l+0xc2>
 8007b1c:	498a      	ldr	r1, [pc, #552]	; (8007d48 <_strtod_l+0x5a0>)
 8007b1e:	a817      	add	r0, sp, #92	; 0x5c
 8007b20:	f001 fd04 	bl	800952c <__match>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f43f aea0 	beq.w	800786a <_strtod_l+0xc2>
 8007b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b28      	cmp	r3, #40	; 0x28
 8007b30:	d10e      	bne.n	8007b50 <_strtod_l+0x3a8>
 8007b32:	aa1a      	add	r2, sp, #104	; 0x68
 8007b34:	4985      	ldr	r1, [pc, #532]	; (8007d4c <_strtod_l+0x5a4>)
 8007b36:	a817      	add	r0, sp, #92	; 0x5c
 8007b38:	f001 fd0c 	bl	8009554 <__hexnan>
 8007b3c:	2805      	cmp	r0, #5
 8007b3e:	d107      	bne.n	8007b50 <_strtod_l+0x3a8>
 8007b40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b42:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b46:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b4a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b4e:	e66d      	b.n	800782c <_strtod_l+0x84>
 8007b50:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8007d60 <_strtod_l+0x5b8>
 8007b54:	e7d2      	b.n	8007afc <_strtod_l+0x354>
 8007b56:	eddd 7a08 	vldr	s15, [sp, #32]
 8007b5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b5e:	eba8 0201 	sub.w	r2, r8, r1
 8007b62:	2d00      	cmp	r5, #0
 8007b64:	bf08      	it	eq
 8007b66:	461d      	moveq	r5, r3
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	9204      	str	r2, [sp, #16]
 8007b6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b70:	461a      	mov	r2, r3
 8007b72:	bfa8      	it	ge
 8007b74:	2210      	movge	r2, #16
 8007b76:	2b09      	cmp	r3, #9
 8007b78:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b7c:	dc14      	bgt.n	8007ba8 <_strtod_l+0x400>
 8007b7e:	9904      	ldr	r1, [sp, #16]
 8007b80:	2900      	cmp	r1, #0
 8007b82:	f43f ae53 	beq.w	800782c <_strtod_l+0x84>
 8007b86:	9904      	ldr	r1, [sp, #16]
 8007b88:	dd72      	ble.n	8007c70 <_strtod_l+0x4c8>
 8007b8a:	2916      	cmp	r1, #22
 8007b8c:	dc5a      	bgt.n	8007c44 <_strtod_l+0x49c>
 8007b8e:	4970      	ldr	r1, [pc, #448]	; (8007d50 <_strtod_l+0x5a8>)
 8007b90:	9b04      	ldr	r3, [sp, #16]
 8007b92:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b96:	ed91 7b00 	vldr	d7, [r1]
 8007b9a:	ec4b ab16 	vmov	d6, sl, fp
 8007b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ba2:	ec5b ab17 	vmov	sl, fp, d7
 8007ba6:	e641      	b.n	800782c <_strtod_l+0x84>
 8007ba8:	4969      	ldr	r1, [pc, #420]	; (8007d50 <_strtod_l+0x5a8>)
 8007baa:	eddd 7a06 	vldr	s15, [sp, #24]
 8007bae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007bb2:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007bb6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007bba:	2b0f      	cmp	r3, #15
 8007bbc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007bc0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007bc4:	ec5b ab17 	vmov	sl, fp, d7
 8007bc8:	ddd9      	ble.n	8007b7e <_strtod_l+0x3d6>
 8007bca:	9904      	ldr	r1, [sp, #16]
 8007bcc:	1a9a      	subs	r2, r3, r2
 8007bce:	440a      	add	r2, r1
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	f340 8096 	ble.w	8007d02 <_strtod_l+0x55a>
 8007bd6:	f012 000f 	ands.w	r0, r2, #15
 8007bda:	d00a      	beq.n	8007bf2 <_strtod_l+0x44a>
 8007bdc:	495c      	ldr	r1, [pc, #368]	; (8007d50 <_strtod_l+0x5a8>)
 8007bde:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007be2:	ed91 7b00 	vldr	d7, [r1]
 8007be6:	ec4b ab16 	vmov	d6, sl, fp
 8007bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bee:	ec5b ab17 	vmov	sl, fp, d7
 8007bf2:	f032 020f 	bics.w	r2, r2, #15
 8007bf6:	d072      	beq.n	8007cde <_strtod_l+0x536>
 8007bf8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007bfc:	dd45      	ble.n	8007c8a <_strtod_l+0x4e2>
 8007bfe:	2500      	movs	r5, #0
 8007c00:	46a8      	mov	r8, r5
 8007c02:	9506      	str	r5, [sp, #24]
 8007c04:	46a9      	mov	r9, r5
 8007c06:	2322      	movs	r3, #34	; 0x22
 8007c08:	f8df b150 	ldr.w	fp, [pc, #336]	; 8007d5c <_strtod_l+0x5b4>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	f04f 0a00 	mov.w	sl, #0
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f43f ae09 	beq.w	800782c <_strtod_l+0x84>
 8007c1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fd8b 	bl	8009738 <_Bfree>
 8007c22:	4649      	mov	r1, r9
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fd87 	bl	8009738 <_Bfree>
 8007c2a:	4641      	mov	r1, r8
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 fd83 	bl	8009738 <_Bfree>
 8007c32:	9906      	ldr	r1, [sp, #24]
 8007c34:	4620      	mov	r0, r4
 8007c36:	f001 fd7f 	bl	8009738 <_Bfree>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f001 fd7b 	bl	8009738 <_Bfree>
 8007c42:	e5f3      	b.n	800782c <_strtod_l+0x84>
 8007c44:	9804      	ldr	r0, [sp, #16]
 8007c46:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007c4a:	4281      	cmp	r1, r0
 8007c4c:	dbbd      	blt.n	8007bca <_strtod_l+0x422>
 8007c4e:	4a40      	ldr	r2, [pc, #256]	; (8007d50 <_strtod_l+0x5a8>)
 8007c50:	f1c3 030f 	rsb	r3, r3, #15
 8007c54:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007c58:	ed91 7b00 	vldr	d7, [r1]
 8007c5c:	ec4b ab16 	vmov	d6, sl, fp
 8007c60:	1ac3      	subs	r3, r0, r3
 8007c62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c6a:	ed92 6b00 	vldr	d6, [r2]
 8007c6e:	e796      	b.n	8007b9e <_strtod_l+0x3f6>
 8007c70:	3116      	adds	r1, #22
 8007c72:	dbaa      	blt.n	8007bca <_strtod_l+0x422>
 8007c74:	4936      	ldr	r1, [pc, #216]	; (8007d50 <_strtod_l+0x5a8>)
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8007c7c:	ed91 7b00 	vldr	d7, [r1]
 8007c80:	ec4b ab16 	vmov	d6, sl, fp
 8007c84:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007c88:	e78b      	b.n	8007ba2 <_strtod_l+0x3fa>
 8007c8a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	4e30      	ldr	r6, [pc, #192]	; (8007d54 <_strtod_l+0x5ac>)
 8007c92:	1112      	asrs	r2, r2, #4
 8007c94:	4601      	mov	r1, r0
 8007c96:	2a01      	cmp	r2, #1
 8007c98:	dc23      	bgt.n	8007ce2 <_strtod_l+0x53a>
 8007c9a:	b108      	cbz	r0, 8007ca0 <_strtod_l+0x4f8>
 8007c9c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007ca0:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <_strtod_l+0x5ac>)
 8007ca2:	482d      	ldr	r0, [pc, #180]	; (8007d58 <_strtod_l+0x5b0>)
 8007ca4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007ca8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007cac:	ed91 7b00 	vldr	d7, [r1]
 8007cb0:	ec4b ab16 	vmov	d6, sl, fp
 8007cb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cb8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cbc:	9907      	ldr	r1, [sp, #28]
 8007cbe:	4a27      	ldr	r2, [pc, #156]	; (8007d5c <_strtod_l+0x5b4>)
 8007cc0:	400a      	ands	r2, r1
 8007cc2:	4282      	cmp	r2, r0
 8007cc4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007cc8:	d899      	bhi.n	8007bfe <_strtod_l+0x456>
 8007cca:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007cce:	4282      	cmp	r2, r0
 8007cd0:	bf86      	itte	hi
 8007cd2:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8007d64 <_strtod_l+0x5bc>
 8007cd6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007cda:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8007cde:	2700      	movs	r7, #0
 8007ce0:	e070      	b.n	8007dc4 <_strtod_l+0x61c>
 8007ce2:	07d7      	lsls	r7, r2, #31
 8007ce4:	d50a      	bpl.n	8007cfc <_strtod_l+0x554>
 8007ce6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8007cea:	ed90 7b00 	vldr	d7, [r0]
 8007cee:	ed9d 6b06 	vldr	d6, [sp, #24]
 8007cf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007cf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	1052      	asrs	r2, r2, #1
 8007d00:	e7c9      	b.n	8007c96 <_strtod_l+0x4ee>
 8007d02:	d0ec      	beq.n	8007cde <_strtod_l+0x536>
 8007d04:	4252      	negs	r2, r2
 8007d06:	f012 000f 	ands.w	r0, r2, #15
 8007d0a:	d00a      	beq.n	8007d22 <_strtod_l+0x57a>
 8007d0c:	4910      	ldr	r1, [pc, #64]	; (8007d50 <_strtod_l+0x5a8>)
 8007d0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007d12:	ed91 7b00 	vldr	d7, [r1]
 8007d16:	ec4b ab16 	vmov	d6, sl, fp
 8007d1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d1e:	ec5b ab17 	vmov	sl, fp, d7
 8007d22:	1112      	asrs	r2, r2, #4
 8007d24:	d0db      	beq.n	8007cde <_strtod_l+0x536>
 8007d26:	2a1f      	cmp	r2, #31
 8007d28:	dd1e      	ble.n	8007d68 <_strtod_l+0x5c0>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	46a8      	mov	r8, r5
 8007d2e:	9506      	str	r5, [sp, #24]
 8007d30:	46a9      	mov	r9, r5
 8007d32:	2322      	movs	r3, #34	; 0x22
 8007d34:	f04f 0a00 	mov.w	sl, #0
 8007d38:	f04f 0b00 	mov.w	fp, #0
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	e768      	b.n	8007c12 <_strtod_l+0x46a>
 8007d40:	0800ac51 	.word	0x0800ac51
 8007d44:	0800acdb 	.word	0x0800acdb
 8007d48:	0800ac59 	.word	0x0800ac59
 8007d4c:	0800ac9c 	.word	0x0800ac9c
 8007d50:	0800ad18 	.word	0x0800ad18
 8007d54:	0800acf0 	.word	0x0800acf0
 8007d58:	7ca00000 	.word	0x7ca00000
 8007d5c:	7ff00000 	.word	0x7ff00000
 8007d60:	fff80000 	.word	0xfff80000
 8007d64:	7fefffff 	.word	0x7fefffff
 8007d68:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007d6c:	f012 0710 	ands.w	r7, r2, #16
 8007d70:	49ab      	ldr	r1, [pc, #684]	; (8008020 <_strtod_l+0x878>)
 8007d72:	bf18      	it	ne
 8007d74:	276a      	movne	r7, #106	; 0x6a
 8007d76:	2000      	movs	r0, #0
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	f300 8113 	bgt.w	8007fa4 <_strtod_l+0x7fc>
 8007d7e:	b108      	cbz	r0, 8007d84 <_strtod_l+0x5dc>
 8007d80:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007d84:	b1bf      	cbz	r7, 8007db6 <_strtod_l+0x60e>
 8007d86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d8a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	4659      	mov	r1, fp
 8007d92:	dd10      	ble.n	8007db6 <_strtod_l+0x60e>
 8007d94:	2a1f      	cmp	r2, #31
 8007d96:	f340 8113 	ble.w	8007fc0 <_strtod_l+0x818>
 8007d9a:	2a34      	cmp	r2, #52	; 0x34
 8007d9c:	bfde      	ittt	le
 8007d9e:	3a20      	suble	r2, #32
 8007da0:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 8007da4:	fa00 f202 	lslle.w	r2, r0, r2
 8007da8:	f04f 0a00 	mov.w	sl, #0
 8007dac:	bfcc      	ite	gt
 8007dae:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007db2:	ea02 0b01 	andle.w	fp, r2, r1
 8007db6:	ec4b ab17 	vmov	d7, sl, fp
 8007dba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc2:	d0b2      	beq.n	8007d2a <_strtod_l+0x582>
 8007dc4:	9a08      	ldr	r2, [sp, #32]
 8007dc6:	9200      	str	r2, [sp, #0]
 8007dc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f001 fd05 	bl	80097dc <__s2b>
 8007dd2:	9006      	str	r0, [sp, #24]
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f af12 	beq.w	8007bfe <_strtod_l+0x456>
 8007dda:	9a04      	ldr	r2, [sp, #16]
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	f1c3 0300 	rsb	r3, r3, #0
 8007de4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8008008 <_strtod_l+0x860>
 8007de8:	bfa8      	it	ge
 8007dea:	2300      	movge	r3, #0
 8007dec:	ed9f ab88 	vldr	d10, [pc, #544]	; 8008010 <_strtod_l+0x868>
 8007df0:	ed9f bb89 	vldr	d11, [pc, #548]	; 8008018 <_strtod_l+0x870>
 8007df4:	930e      	str	r3, [sp, #56]	; 0x38
 8007df6:	2500      	movs	r5, #0
 8007df8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8007dfe:	46a8      	mov	r8, r5
 8007e00:	9b06      	ldr	r3, [sp, #24]
 8007e02:	4620      	mov	r0, r4
 8007e04:	6859      	ldr	r1, [r3, #4]
 8007e06:	f001 fc63 	bl	80096d0 <_Balloc>
 8007e0a:	4681      	mov	r9, r0
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f43f aefa 	beq.w	8007c06 <_strtod_l+0x45e>
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	691a      	ldr	r2, [r3, #16]
 8007e16:	3202      	adds	r2, #2
 8007e18:	f103 010c 	add.w	r1, r3, #12
 8007e1c:	0092      	lsls	r2, r2, #2
 8007e1e:	300c      	adds	r0, #12
 8007e20:	f7fe fe4e 	bl	8006ac0 <memcpy>
 8007e24:	aa1a      	add	r2, sp, #104	; 0x68
 8007e26:	a919      	add	r1, sp, #100	; 0x64
 8007e28:	ec4b ab10 	vmov	d0, sl, fp
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007e32:	f001 ff8f 	bl	8009d54 <__d2b>
 8007e36:	9018      	str	r0, [sp, #96]	; 0x60
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	f43f aee4 	beq.w	8007c06 <_strtod_l+0x45e>
 8007e3e:	2101      	movs	r1, #1
 8007e40:	4620      	mov	r0, r4
 8007e42:	f001 fd57 	bl	80098f4 <__i2b>
 8007e46:	4680      	mov	r8, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f43f aedc 	beq.w	8007c06 <_strtod_l+0x45e>
 8007e4e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007e50:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	bfb1      	iteee	lt
 8007e56:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8007e58:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e5a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8007e5c:	18f3      	addge	r3, r6, r3
 8007e5e:	bfba      	itte	lt
 8007e60:	1b98      	sublt	r0, r3, r6
 8007e62:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e64:	9308      	strge	r3, [sp, #32]
 8007e66:	eba6 0607 	sub.w	r6, r6, r7
 8007e6a:	bfb8      	it	lt
 8007e6c:	9308      	strlt	r3, [sp, #32]
 8007e6e:	4416      	add	r6, r2
 8007e70:	4b6c      	ldr	r3, [pc, #432]	; (8008024 <_strtod_l+0x87c>)
 8007e72:	3e01      	subs	r6, #1
 8007e74:	429e      	cmp	r6, r3
 8007e76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e7a:	f280 80b4 	bge.w	8007fe6 <_strtod_l+0x83e>
 8007e7e:	1b9b      	subs	r3, r3, r6
 8007e80:	2b1f      	cmp	r3, #31
 8007e82:	eba2 0203 	sub.w	r2, r2, r3
 8007e86:	f04f 0101 	mov.w	r1, #1
 8007e8a:	f300 80a0 	bgt.w	8007fce <_strtod_l+0x826>
 8007e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e92:	9311      	str	r3, [sp, #68]	; 0x44
 8007e94:	2300      	movs	r3, #0
 8007e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e98:	9b08      	ldr	r3, [sp, #32]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	4402      	add	r2, r0
 8007e9e:	18be      	adds	r6, r7, r2
 8007ea0:	9a08      	ldr	r2, [sp, #32]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	bfa8      	it	ge
 8007ea6:	461a      	movge	r2, r3
 8007ea8:	42b2      	cmp	r2, r6
 8007eaa:	bfa8      	it	ge
 8007eac:	4632      	movge	r2, r6
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	dd04      	ble.n	8007ebc <_strtod_l+0x714>
 8007eb2:	9908      	ldr	r1, [sp, #32]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	1ab6      	subs	r6, r6, r2
 8007eb8:	1a8a      	subs	r2, r1, r2
 8007eba:	9208      	str	r2, [sp, #32]
 8007ebc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ebe:	b1c2      	cbz	r2, 8007ef2 <_strtod_l+0x74a>
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	9315      	str	r3, [sp, #84]	; 0x54
 8007ec6:	f001 fdb5 	bl	8009a34 <__pow5mult>
 8007eca:	4680      	mov	r8, r0
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	f43f ae9a 	beq.w	8007c06 <_strtod_l+0x45e>
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 fd15 	bl	8009906 <__multiply>
 8007edc:	900c      	str	r0, [sp, #48]	; 0x30
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f ae91 	beq.w	8007c06 <_strtod_l+0x45e>
 8007ee4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f001 fc26 	bl	8009738 <_Bfree>
 8007eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ef0:	9218      	str	r2, [sp, #96]	; 0x60
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	dc7c      	bgt.n	8007ff0 <_strtod_l+0x848>
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dd08      	ble.n	8007f0e <_strtod_l+0x766>
 8007efc:	4649      	mov	r1, r9
 8007efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f00:	4620      	mov	r0, r4
 8007f02:	f001 fd97 	bl	8009a34 <__pow5mult>
 8007f06:	4681      	mov	r9, r0
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	f43f ae7c 	beq.w	8007c06 <_strtod_l+0x45e>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	dd08      	ble.n	8007f24 <_strtod_l+0x77c>
 8007f12:	4649      	mov	r1, r9
 8007f14:	4632      	mov	r2, r6
 8007f16:	4620      	mov	r0, r4
 8007f18:	f001 fdda 	bl	8009ad0 <__lshift>
 8007f1c:	4681      	mov	r9, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	f43f ae71 	beq.w	8007c06 <_strtod_l+0x45e>
 8007f24:	9b08      	ldr	r3, [sp, #32]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd08      	ble.n	8007f3c <_strtod_l+0x794>
 8007f2a:	4641      	mov	r1, r8
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 fdce 	bl	8009ad0 <__lshift>
 8007f34:	4680      	mov	r8, r0
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f43f ae65 	beq.w	8007c06 <_strtod_l+0x45e>
 8007f3c:	464a      	mov	r2, r9
 8007f3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f40:	4620      	mov	r0, r4
 8007f42:	f001 fe33 	bl	8009bac <__mdiff>
 8007f46:	4605      	mov	r5, r0
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f43f ae5c 	beq.w	8007c06 <_strtod_l+0x45e>
 8007f4e:	68c3      	ldr	r3, [r0, #12]
 8007f50:	930c      	str	r3, [sp, #48]	; 0x30
 8007f52:	2300      	movs	r3, #0
 8007f54:	60c3      	str	r3, [r0, #12]
 8007f56:	4641      	mov	r1, r8
 8007f58:	f001 fe0e 	bl	8009b78 <__mcmp>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	da63      	bge.n	8008028 <_strtod_l+0x880>
 8007f60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f62:	b9e3      	cbnz	r3, 8007f9e <_strtod_l+0x7f6>
 8007f64:	f1ba 0f00 	cmp.w	sl, #0
 8007f68:	d119      	bne.n	8007f9e <_strtod_l+0x7f6>
 8007f6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f6e:	b9b3      	cbnz	r3, 8007f9e <_strtod_l+0x7f6>
 8007f70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f74:	0d1b      	lsrs	r3, r3, #20
 8007f76:	051b      	lsls	r3, r3, #20
 8007f78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f7c:	d90f      	bls.n	8007f9e <_strtod_l+0x7f6>
 8007f7e:	696b      	ldr	r3, [r5, #20]
 8007f80:	b913      	cbnz	r3, 8007f88 <_strtod_l+0x7e0>
 8007f82:	692b      	ldr	r3, [r5, #16]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	dd0a      	ble.n	8007f9e <_strtod_l+0x7f6>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f001 fd9f 	bl	8009ad0 <__lshift>
 8007f92:	4641      	mov	r1, r8
 8007f94:	4605      	mov	r5, r0
 8007f96:	f001 fdef 	bl	8009b78 <__mcmp>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	dc75      	bgt.n	800808a <_strtod_l+0x8e2>
 8007f9e:	2f00      	cmp	r7, #0
 8007fa0:	d17f      	bne.n	80080a2 <_strtod_l+0x8fa>
 8007fa2:	e63a      	b.n	8007c1a <_strtod_l+0x472>
 8007fa4:	07d6      	lsls	r6, r2, #31
 8007fa6:	d508      	bpl.n	8007fba <_strtod_l+0x812>
 8007fa8:	ed9d 6b06 	vldr	d6, [sp, #24]
 8007fac:	ed91 7b00 	vldr	d7, [r1]
 8007fb0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fb4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fb8:	2001      	movs	r0, #1
 8007fba:	1052      	asrs	r2, r2, #1
 8007fbc:	3108      	adds	r1, #8
 8007fbe:	e6db      	b.n	8007d78 <_strtod_l+0x5d0>
 8007fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fc8:	ea02 0a0a 	and.w	sl, r2, sl
 8007fcc:	e6f3      	b.n	8007db6 <_strtod_l+0x60e>
 8007fce:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007fd2:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007fd6:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007fda:	36e2      	adds	r6, #226	; 0xe2
 8007fdc:	fa01 f306 	lsl.w	r3, r1, r6
 8007fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fe2:	9111      	str	r1, [sp, #68]	; 0x44
 8007fe4:	e758      	b.n	8007e98 <_strtod_l+0x6f0>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fea:	2301      	movs	r3, #1
 8007fec:	9311      	str	r3, [sp, #68]	; 0x44
 8007fee:	e753      	b.n	8007e98 <_strtod_l+0x6f0>
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f001 fd6b 	bl	8009ad0 <__lshift>
 8007ffa:	9018      	str	r0, [sp, #96]	; 0x60
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f47f af7a 	bne.w	8007ef6 <_strtod_l+0x74e>
 8008002:	e600      	b.n	8007c06 <_strtod_l+0x45e>
 8008004:	f3af 8000 	nop.w
 8008008:	94a03595 	.word	0x94a03595
 800800c:	3fdfffff 	.word	0x3fdfffff
 8008010:	35afe535 	.word	0x35afe535
 8008014:	3fe00000 	.word	0x3fe00000
 8008018:	94a03595 	.word	0x94a03595
 800801c:	3fcfffff 	.word	0x3fcfffff
 8008020:	0800acb0 	.word	0x0800acb0
 8008024:	fffffc02 	.word	0xfffffc02
 8008028:	f8cd b020 	str.w	fp, [sp, #32]
 800802c:	f040 8085 	bne.w	800813a <_strtod_l+0x992>
 8008030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008032:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008036:	b322      	cbz	r2, 8008082 <_strtod_l+0x8da>
 8008038:	4ab7      	ldr	r2, [pc, #732]	; (8008318 <_strtod_l+0xb70>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d154      	bne.n	80080e8 <_strtod_l+0x940>
 800803e:	4651      	mov	r1, sl
 8008040:	b1e7      	cbz	r7, 800807c <_strtod_l+0x8d4>
 8008042:	4bb6      	ldr	r3, [pc, #728]	; (800831c <_strtod_l+0xb74>)
 8008044:	465a      	mov	r2, fp
 8008046:	4013      	ands	r3, r2
 8008048:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800804c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008050:	d803      	bhi.n	800805a <_strtod_l+0x8b2>
 8008052:	0d1b      	lsrs	r3, r3, #20
 8008054:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008058:	409a      	lsls	r2, r3
 800805a:	4291      	cmp	r1, r2
 800805c:	d144      	bne.n	80080e8 <_strtod_l+0x940>
 800805e:	4bb0      	ldr	r3, [pc, #704]	; (8008320 <_strtod_l+0xb78>)
 8008060:	9a08      	ldr	r2, [sp, #32]
 8008062:	429a      	cmp	r2, r3
 8008064:	d102      	bne.n	800806c <_strtod_l+0x8c4>
 8008066:	3101      	adds	r1, #1
 8008068:	f43f adcd 	beq.w	8007c06 <_strtod_l+0x45e>
 800806c:	4bab      	ldr	r3, [pc, #684]	; (800831c <_strtod_l+0xb74>)
 800806e:	9a08      	ldr	r2, [sp, #32]
 8008070:	401a      	ands	r2, r3
 8008072:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8008076:	f04f 0a00 	mov.w	sl, #0
 800807a:	e790      	b.n	8007f9e <_strtod_l+0x7f6>
 800807c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008080:	e7eb      	b.n	800805a <_strtod_l+0x8b2>
 8008082:	bb8b      	cbnz	r3, 80080e8 <_strtod_l+0x940>
 8008084:	f1ba 0f00 	cmp.w	sl, #0
 8008088:	d12e      	bne.n	80080e8 <_strtod_l+0x940>
 800808a:	465b      	mov	r3, fp
 800808c:	4aa3      	ldr	r2, [pc, #652]	; (800831c <_strtod_l+0xb74>)
 800808e:	b30f      	cbz	r7, 80080d4 <_strtod_l+0x92c>
 8008090:	ea02 010b 	and.w	r1, r2, fp
 8008094:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008098:	dc1c      	bgt.n	80080d4 <_strtod_l+0x92c>
 800809a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800809e:	f77f ae48 	ble.w	8007d32 <_strtod_l+0x58a>
 80080a2:	4aa0      	ldr	r2, [pc, #640]	; (8008324 <_strtod_l+0xb7c>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80080aa:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80080ae:	ec4b ab17 	vmov	d7, sl, fp
 80080b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080b6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f47f adaa 	bne.w	8007c1a <_strtod_l+0x472>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f ada6 	bne.w	8007c1a <_strtod_l+0x472>
 80080ce:	2322      	movs	r3, #34	; 0x22
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	e5a2      	b.n	8007c1a <_strtod_l+0x472>
 80080d4:	4013      	ands	r3, r2
 80080d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80080e6:	e75a      	b.n	8007f9e <_strtod_l+0x7f6>
 80080e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080ea:	b18b      	cbz	r3, 8008110 <_strtod_l+0x968>
 80080ec:	9a08      	ldr	r2, [sp, #32]
 80080ee:	4213      	tst	r3, r2
 80080f0:	f43f af55 	beq.w	8007f9e <_strtod_l+0x7f6>
 80080f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f6:	463a      	mov	r2, r7
 80080f8:	4650      	mov	r0, sl
 80080fa:	4659      	mov	r1, fp
 80080fc:	b163      	cbz	r3, 8008118 <_strtod_l+0x970>
 80080fe:	f7ff fb39 	bl	8007774 <sulp>
 8008102:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008106:	ee37 7b00 	vadd.f64	d7, d7, d0
 800810a:	ec5b ab17 	vmov	sl, fp, d7
 800810e:	e746      	b.n	8007f9e <_strtod_l+0x7f6>
 8008110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008112:	ea13 0f0a 	tst.w	r3, sl
 8008116:	e7eb      	b.n	80080f0 <_strtod_l+0x948>
 8008118:	f7ff fb2c 	bl	8007774 <sulp>
 800811c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008120:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008124:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008128:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008130:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008134:	f43f adfd 	beq.w	8007d32 <_strtod_l+0x58a>
 8008138:	e731      	b.n	8007f9e <_strtod_l+0x7f6>
 800813a:	4641      	mov	r1, r8
 800813c:	4628      	mov	r0, r5
 800813e:	f001 fe58 	bl	8009df2 <__ratio>
 8008142:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008146:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814e:	d869      	bhi.n	8008224 <_strtod_l+0xa7c>
 8008150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	d045      	beq.n	80081e2 <_strtod_l+0xa3a>
 8008156:	4b74      	ldr	r3, [pc, #464]	; (8008328 <_strtod_l+0xb80>)
 8008158:	2200      	movs	r2, #0
 800815a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800815e:	9808      	ldr	r0, [sp, #32]
 8008160:	496e      	ldr	r1, [pc, #440]	; (800831c <_strtod_l+0xb74>)
 8008162:	ea00 0601 	and.w	r6, r0, r1
 8008166:	4871      	ldr	r0, [pc, #452]	; (800832c <_strtod_l+0xb84>)
 8008168:	4286      	cmp	r6, r0
 800816a:	f040 8089 	bne.w	8008280 <_strtod_l+0xad8>
 800816e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008170:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008174:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008178:	9908      	ldr	r1, [sp, #32]
 800817a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800817e:	ec4b ab10 	vmov	d0, sl, fp
 8008182:	ec43 2b1c 	vmov	d12, r2, r3
 8008186:	f001 fd6f 	bl	8009c68 <__ulp>
 800818a:	ec4b ab1d 	vmov	d13, sl, fp
 800818e:	eeac db00 	vfma.f64	d13, d12, d0
 8008192:	ed8d db08 	vstr	d13, [sp, #32]
 8008196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008198:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800819a:	4a65      	ldr	r2, [pc, #404]	; (8008330 <_strtod_l+0xb88>)
 800819c:	4019      	ands	r1, r3
 800819e:	4291      	cmp	r1, r2
 80081a0:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80081a4:	d948      	bls.n	8008238 <_strtod_l+0xa90>
 80081a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d103      	bne.n	80081b8 <_strtod_l+0xa10>
 80081b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b2:	3301      	adds	r3, #1
 80081b4:	f43f ad27 	beq.w	8007c06 <_strtod_l+0x45e>
 80081b8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8008320 <_strtod_l+0xb78>
 80081bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80081c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081c2:	4620      	mov	r0, r4
 80081c4:	f001 fab8 	bl	8009738 <_Bfree>
 80081c8:	4649      	mov	r1, r9
 80081ca:	4620      	mov	r0, r4
 80081cc:	f001 fab4 	bl	8009738 <_Bfree>
 80081d0:	4641      	mov	r1, r8
 80081d2:	4620      	mov	r0, r4
 80081d4:	f001 fab0 	bl	8009738 <_Bfree>
 80081d8:	4629      	mov	r1, r5
 80081da:	4620      	mov	r0, r4
 80081dc:	f001 faac 	bl	8009738 <_Bfree>
 80081e0:	e60e      	b.n	8007e00 <_strtod_l+0x658>
 80081e2:	f1ba 0f00 	cmp.w	sl, #0
 80081e6:	d113      	bne.n	8008210 <_strtod_l+0xa68>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081ee:	b9b3      	cbnz	r3, 800821e <_strtod_l+0xa76>
 80081f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80081f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80081f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008200:	d401      	bmi.n	8008206 <_strtod_l+0xa5e>
 8008202:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008206:	eeb1 7b48 	vneg.f64	d7, d8
 800820a:	ec53 2b17 	vmov	r2, r3, d7
 800820e:	e7a6      	b.n	800815e <_strtod_l+0x9b6>
 8008210:	f1ba 0f01 	cmp.w	sl, #1
 8008214:	d103      	bne.n	800821e <_strtod_l+0xa76>
 8008216:	9b08      	ldr	r3, [sp, #32]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f43f ad8a 	beq.w	8007d32 <_strtod_l+0x58a>
 800821e:	2200      	movs	r2, #0
 8008220:	4b44      	ldr	r3, [pc, #272]	; (8008334 <_strtod_l+0xb8c>)
 8008222:	e79a      	b.n	800815a <_strtod_l+0x9b2>
 8008224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008226:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800822a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0e9      	beq.n	8008206 <_strtod_l+0xa5e>
 8008232:	ec53 2b18 	vmov	r2, r3, d8
 8008236:	e792      	b.n	800815e <_strtod_l+0x9b6>
 8008238:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800823c:	2f00      	cmp	r7, #0
 800823e:	d1bf      	bne.n	80081c0 <_strtod_l+0xa18>
 8008240:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008244:	0d1b      	lsrs	r3, r3, #20
 8008246:	051b      	lsls	r3, r3, #20
 8008248:	429e      	cmp	r6, r3
 800824a:	d1b9      	bne.n	80081c0 <_strtod_l+0xa18>
 800824c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8008250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008252:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8008256:	ee38 8b40 	vsub.f64	d8, d8, d0
 800825a:	b92b      	cbnz	r3, 8008268 <_strtod_l+0xac0>
 800825c:	f1ba 0f00 	cmp.w	sl, #0
 8008260:	d102      	bne.n	8008268 <_strtod_l+0xac0>
 8008262:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8008266:	b3d2      	cbz	r2, 80082de <_strtod_l+0xb36>
 8008268:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	f53f acd3 	bmi.w	8007c1a <_strtod_l+0x472>
 8008274:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827c:	dda0      	ble.n	80081c0 <_strtod_l+0xa18>
 800827e:	e4cc      	b.n	8007c1a <_strtod_l+0x472>
 8008280:	b1ef      	cbz	r7, 80082be <_strtod_l+0xb16>
 8008282:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8008286:	d81a      	bhi.n	80082be <_strtod_l+0xb16>
 8008288:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008310 <_strtod_l+0xb68>
 800828c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008294:	d810      	bhi.n	80082b8 <_strtod_l+0xb10>
 8008296:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800829a:	ee17 3a90 	vmov	r3, s15
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf08      	it	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082aa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80082ae:	b99b      	cbnz	r3, 80082d8 <_strtod_l+0xb30>
 80082b0:	eeb1 7b48 	vneg.f64	d7, d8
 80082b4:	ec53 2b17 	vmov	r2, r3, d7
 80082b8:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80082bc:	1b8b      	subs	r3, r1, r6
 80082be:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082c2:	ec43 2b1c 	vmov	d12, r2, r3
 80082c6:	f001 fccf 	bl	8009c68 <__ulp>
 80082ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80082ce:	eeac 7b00 	vfma.f64	d7, d12, d0
 80082d2:	ec5b ab17 	vmov	sl, fp, d7
 80082d6:	e7b1      	b.n	800823c <_strtod_l+0xa94>
 80082d8:	ec53 2b18 	vmov	r2, r3, d8
 80082dc:	e7ec      	b.n	80082b8 <_strtod_l+0xb10>
 80082de:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80082e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e6:	f57f af6b 	bpl.w	80081c0 <_strtod_l+0xa18>
 80082ea:	e496      	b.n	8007c1a <_strtod_l+0x472>
 80082ec:	2300      	movs	r3, #0
 80082ee:	930d      	str	r3, [sp, #52]	; 0x34
 80082f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	f7ff ba9d 	b.w	8007834 <_strtod_l+0x8c>
 80082fa:	2a65      	cmp	r2, #101	; 0x65
 80082fc:	f04f 0100 	mov.w	r1, #0
 8008300:	f43f ab97 	beq.w	8007a32 <_strtod_l+0x28a>
 8008304:	2701      	movs	r7, #1
 8008306:	460b      	mov	r3, r1
 8008308:	9704      	str	r7, [sp, #16]
 800830a:	f7ff bb0a 	b.w	8007922 <_strtod_l+0x17a>
 800830e:	bf00      	nop
 8008310:	ffc00000 	.word	0xffc00000
 8008314:	41dfffff 	.word	0x41dfffff
 8008318:	000fffff 	.word	0x000fffff
 800831c:	7ff00000 	.word	0x7ff00000
 8008320:	7fefffff 	.word	0x7fefffff
 8008324:	39500000 	.word	0x39500000
 8008328:	3ff00000 	.word	0x3ff00000
 800832c:	7fe00000 	.word	0x7fe00000
 8008330:	7c9fffff 	.word	0x7c9fffff
 8008334:	bff00000 	.word	0xbff00000

08008338 <_strtod_r>:
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <_strtod_r+0x18>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	b410      	push	{r4}
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	4c04      	ldr	r4, [pc, #16]	; (8008354 <_strtod_r+0x1c>)
 8008342:	2b00      	cmp	r3, #0
 8008344:	bf08      	it	eq
 8008346:	4623      	moveq	r3, r4
 8008348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834c:	f7ff ba2c 	b.w	80077a8 <_strtod_l>
 8008350:	20000018 	.word	0x20000018
 8008354:	2000007c 	.word	0x2000007c

08008358 <_strtol_l.isra.0>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	4680      	mov	r8, r0
 800835e:	4689      	mov	r9, r1
 8008360:	4692      	mov	sl, r2
 8008362:	461e      	mov	r6, r3
 8008364:	460f      	mov	r7, r1
 8008366:	463d      	mov	r5, r7
 8008368:	9808      	ldr	r0, [sp, #32]
 800836a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800836e:	f001 f981 	bl	8009674 <__locale_ctype_ptr_l>
 8008372:	4420      	add	r0, r4
 8008374:	7843      	ldrb	r3, [r0, #1]
 8008376:	f013 0308 	ands.w	r3, r3, #8
 800837a:	d132      	bne.n	80083e2 <_strtol_l.isra.0+0x8a>
 800837c:	2c2d      	cmp	r4, #45	; 0x2d
 800837e:	d132      	bne.n	80083e6 <_strtol_l.isra.0+0x8e>
 8008380:	787c      	ldrb	r4, [r7, #1]
 8008382:	1cbd      	adds	r5, r7, #2
 8008384:	2201      	movs	r2, #1
 8008386:	2e00      	cmp	r6, #0
 8008388:	d05d      	beq.n	8008446 <_strtol_l.isra.0+0xee>
 800838a:	2e10      	cmp	r6, #16
 800838c:	d109      	bne.n	80083a2 <_strtol_l.isra.0+0x4a>
 800838e:	2c30      	cmp	r4, #48	; 0x30
 8008390:	d107      	bne.n	80083a2 <_strtol_l.isra.0+0x4a>
 8008392:	782b      	ldrb	r3, [r5, #0]
 8008394:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008398:	2b58      	cmp	r3, #88	; 0x58
 800839a:	d14f      	bne.n	800843c <_strtol_l.isra.0+0xe4>
 800839c:	786c      	ldrb	r4, [r5, #1]
 800839e:	2610      	movs	r6, #16
 80083a0:	3502      	adds	r5, #2
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	bf14      	ite	ne
 80083a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80083aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80083ae:	2700      	movs	r7, #0
 80083b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80083b4:	4638      	mov	r0, r7
 80083b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80083ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d817      	bhi.n	80083f2 <_strtol_l.isra.0+0x9a>
 80083c2:	461c      	mov	r4, r3
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	dd23      	ble.n	8008410 <_strtol_l.isra.0+0xb8>
 80083c8:	1c7b      	adds	r3, r7, #1
 80083ca:	d007      	beq.n	80083dc <_strtol_l.isra.0+0x84>
 80083cc:	4584      	cmp	ip, r0
 80083ce:	d31c      	bcc.n	800840a <_strtol_l.isra.0+0xb2>
 80083d0:	d101      	bne.n	80083d6 <_strtol_l.isra.0+0x7e>
 80083d2:	45a6      	cmp	lr, r4
 80083d4:	db19      	blt.n	800840a <_strtol_l.isra.0+0xb2>
 80083d6:	fb00 4006 	mla	r0, r0, r6, r4
 80083da:	2701      	movs	r7, #1
 80083dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e0:	e7eb      	b.n	80083ba <_strtol_l.isra.0+0x62>
 80083e2:	462f      	mov	r7, r5
 80083e4:	e7bf      	b.n	8008366 <_strtol_l.isra.0+0xe>
 80083e6:	2c2b      	cmp	r4, #43	; 0x2b
 80083e8:	bf04      	itt	eq
 80083ea:	1cbd      	addeq	r5, r7, #2
 80083ec:	787c      	ldrbeq	r4, [r7, #1]
 80083ee:	461a      	mov	r2, r3
 80083f0:	e7c9      	b.n	8008386 <_strtol_l.isra.0+0x2e>
 80083f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80083f6:	2b19      	cmp	r3, #25
 80083f8:	d801      	bhi.n	80083fe <_strtol_l.isra.0+0xa6>
 80083fa:	3c37      	subs	r4, #55	; 0x37
 80083fc:	e7e2      	b.n	80083c4 <_strtol_l.isra.0+0x6c>
 80083fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008402:	2b19      	cmp	r3, #25
 8008404:	d804      	bhi.n	8008410 <_strtol_l.isra.0+0xb8>
 8008406:	3c57      	subs	r4, #87	; 0x57
 8008408:	e7dc      	b.n	80083c4 <_strtol_l.isra.0+0x6c>
 800840a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800840e:	e7e5      	b.n	80083dc <_strtol_l.isra.0+0x84>
 8008410:	1c7b      	adds	r3, r7, #1
 8008412:	d108      	bne.n	8008426 <_strtol_l.isra.0+0xce>
 8008414:	2322      	movs	r3, #34	; 0x22
 8008416:	f8c8 3000 	str.w	r3, [r8]
 800841a:	4608      	mov	r0, r1
 800841c:	f1ba 0f00 	cmp.w	sl, #0
 8008420:	d107      	bne.n	8008432 <_strtol_l.isra.0+0xda>
 8008422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008426:	b102      	cbz	r2, 800842a <_strtol_l.isra.0+0xd2>
 8008428:	4240      	negs	r0, r0
 800842a:	f1ba 0f00 	cmp.w	sl, #0
 800842e:	d0f8      	beq.n	8008422 <_strtol_l.isra.0+0xca>
 8008430:	b10f      	cbz	r7, 8008436 <_strtol_l.isra.0+0xde>
 8008432:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008436:	f8ca 9000 	str.w	r9, [sl]
 800843a:	e7f2      	b.n	8008422 <_strtol_l.isra.0+0xca>
 800843c:	2430      	movs	r4, #48	; 0x30
 800843e:	2e00      	cmp	r6, #0
 8008440:	d1af      	bne.n	80083a2 <_strtol_l.isra.0+0x4a>
 8008442:	2608      	movs	r6, #8
 8008444:	e7ad      	b.n	80083a2 <_strtol_l.isra.0+0x4a>
 8008446:	2c30      	cmp	r4, #48	; 0x30
 8008448:	d0a3      	beq.n	8008392 <_strtol_l.isra.0+0x3a>
 800844a:	260a      	movs	r6, #10
 800844c:	e7a9      	b.n	80083a2 <_strtol_l.isra.0+0x4a>
	...

08008450 <_strtol_r>:
 8008450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008452:	4c06      	ldr	r4, [pc, #24]	; (800846c <_strtol_r+0x1c>)
 8008454:	4d06      	ldr	r5, [pc, #24]	; (8008470 <_strtol_r+0x20>)
 8008456:	6824      	ldr	r4, [r4, #0]
 8008458:	6a24      	ldr	r4, [r4, #32]
 800845a:	2c00      	cmp	r4, #0
 800845c:	bf08      	it	eq
 800845e:	462c      	moveq	r4, r5
 8008460:	9400      	str	r4, [sp, #0]
 8008462:	f7ff ff79 	bl	8008358 <_strtol_l.isra.0>
 8008466:	b003      	add	sp, #12
 8008468:	bd30      	pop	{r4, r5, pc}
 800846a:	bf00      	nop
 800846c:	20000018 	.word	0x20000018
 8008470:	2000007c 	.word	0x2000007c

08008474 <quorem>:
 8008474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008478:	6903      	ldr	r3, [r0, #16]
 800847a:	690c      	ldr	r4, [r1, #16]
 800847c:	42a3      	cmp	r3, r4
 800847e:	4680      	mov	r8, r0
 8008480:	f2c0 8082 	blt.w	8008588 <quorem+0x114>
 8008484:	3c01      	subs	r4, #1
 8008486:	f101 0714 	add.w	r7, r1, #20
 800848a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800848e:	f100 0614 	add.w	r6, r0, #20
 8008492:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008496:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800849a:	eb06 030c 	add.w	r3, r6, ip
 800849e:	3501      	adds	r5, #1
 80084a0:	eb07 090c 	add.w	r9, r7, ip
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80084aa:	b395      	cbz	r5, 8008512 <quorem+0x9e>
 80084ac:	f04f 0a00 	mov.w	sl, #0
 80084b0:	4638      	mov	r0, r7
 80084b2:	46b6      	mov	lr, r6
 80084b4:	46d3      	mov	fp, sl
 80084b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80084ba:	b293      	uxth	r3, r2
 80084bc:	fb05 a303 	mla	r3, r5, r3, sl
 80084c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	ebab 0303 	sub.w	r3, fp, r3
 80084ca:	0c12      	lsrs	r2, r2, #16
 80084cc:	f8de b000 	ldr.w	fp, [lr]
 80084d0:	fb05 a202 	mla	r2, r5, r2, sl
 80084d4:	fa13 f38b 	uxtah	r3, r3, fp
 80084d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80084dc:	fa1f fb82 	uxth.w	fp, r2
 80084e0:	f8de 2000 	ldr.w	r2, [lr]
 80084e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80084e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084f2:	4581      	cmp	r9, r0
 80084f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80084f8:	f84e 3b04 	str.w	r3, [lr], #4
 80084fc:	d2db      	bcs.n	80084b6 <quorem+0x42>
 80084fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8008502:	b933      	cbnz	r3, 8008512 <quorem+0x9e>
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	3b04      	subs	r3, #4
 8008508:	429e      	cmp	r6, r3
 800850a:	461a      	mov	r2, r3
 800850c:	d330      	bcc.n	8008570 <quorem+0xfc>
 800850e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008512:	4640      	mov	r0, r8
 8008514:	f001 fb30 	bl	8009b78 <__mcmp>
 8008518:	2800      	cmp	r0, #0
 800851a:	db25      	blt.n	8008568 <quorem+0xf4>
 800851c:	3501      	adds	r5, #1
 800851e:	4630      	mov	r0, r6
 8008520:	f04f 0c00 	mov.w	ip, #0
 8008524:	f857 2b04 	ldr.w	r2, [r7], #4
 8008528:	f8d0 e000 	ldr.w	lr, [r0]
 800852c:	b293      	uxth	r3, r2
 800852e:	ebac 0303 	sub.w	r3, ip, r3
 8008532:	0c12      	lsrs	r2, r2, #16
 8008534:	fa13 f38e 	uxtah	r3, r3, lr
 8008538:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800853c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008546:	45b9      	cmp	r9, r7
 8008548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800854c:	f840 3b04 	str.w	r3, [r0], #4
 8008550:	d2e8      	bcs.n	8008524 <quorem+0xb0>
 8008552:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008556:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800855a:	b92a      	cbnz	r2, 8008568 <quorem+0xf4>
 800855c:	3b04      	subs	r3, #4
 800855e:	429e      	cmp	r6, r3
 8008560:	461a      	mov	r2, r3
 8008562:	d30b      	bcc.n	800857c <quorem+0x108>
 8008564:	f8c8 4010 	str.w	r4, [r8, #16]
 8008568:	4628      	mov	r0, r5
 800856a:	b003      	add	sp, #12
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	3b04      	subs	r3, #4
 8008574:	2a00      	cmp	r2, #0
 8008576:	d1ca      	bne.n	800850e <quorem+0x9a>
 8008578:	3c01      	subs	r4, #1
 800857a:	e7c5      	b.n	8008508 <quorem+0x94>
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	3b04      	subs	r3, #4
 8008580:	2a00      	cmp	r2, #0
 8008582:	d1ef      	bne.n	8008564 <quorem+0xf0>
 8008584:	3c01      	subs	r4, #1
 8008586:	e7ea      	b.n	800855e <quorem+0xea>
 8008588:	2000      	movs	r0, #0
 800858a:	e7ee      	b.n	800856a <quorem+0xf6>
 800858c:	0000      	movs	r0, r0
	...

08008590 <_dtoa_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	ec57 6b10 	vmov	r6, r7, d0
 8008598:	b095      	sub	sp, #84	; 0x54
 800859a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800859c:	9108      	str	r1, [sp, #32]
 800859e:	4604      	mov	r4, r0
 80085a0:	920a      	str	r2, [sp, #40]	; 0x28
 80085a2:	9311      	str	r3, [sp, #68]	; 0x44
 80085a4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80085a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80085ac:	b93d      	cbnz	r5, 80085be <_dtoa_r+0x2e>
 80085ae:	2010      	movs	r0, #16
 80085b0:	f001 f874 	bl	800969c <malloc>
 80085b4:	6260      	str	r0, [r4, #36]	; 0x24
 80085b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085ba:	6005      	str	r5, [r0, #0]
 80085bc:	60c5      	str	r5, [r0, #12]
 80085be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c0:	6819      	ldr	r1, [r3, #0]
 80085c2:	b151      	cbz	r1, 80085da <_dtoa_r+0x4a>
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	604a      	str	r2, [r1, #4]
 80085c8:	2301      	movs	r3, #1
 80085ca:	4093      	lsls	r3, r2
 80085cc:	608b      	str	r3, [r1, #8]
 80085ce:	4620      	mov	r0, r4
 80085d0:	f001 f8b2 	bl	8009738 <_Bfree>
 80085d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	1e3b      	subs	r3, r7, #0
 80085dc:	bfb9      	ittee	lt
 80085de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085e2:	9303      	strlt	r3, [sp, #12]
 80085e4:	2300      	movge	r3, #0
 80085e6:	f8c8 3000 	strge.w	r3, [r8]
 80085ea:	9d03      	ldr	r5, [sp, #12]
 80085ec:	4bac      	ldr	r3, [pc, #688]	; (80088a0 <_dtoa_r+0x310>)
 80085ee:	bfbc      	itt	lt
 80085f0:	2201      	movlt	r2, #1
 80085f2:	f8c8 2000 	strlt.w	r2, [r8]
 80085f6:	43ab      	bics	r3, r5
 80085f8:	d11b      	bne.n	8008632 <_dtoa_r+0xa2>
 80085fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085fc:	f242 730f 	movw	r3, #9999	; 0x270f
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	9b02      	ldr	r3, [sp, #8]
 8008604:	b923      	cbnz	r3, 8008610 <_dtoa_r+0x80>
 8008606:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800860a:	2d00      	cmp	r5, #0
 800860c:	f000 84dd 	beq.w	8008fca <_dtoa_r+0xa3a>
 8008610:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008612:	b953      	cbnz	r3, 800862a <_dtoa_r+0x9a>
 8008614:	4ba3      	ldr	r3, [pc, #652]	; (80088a4 <_dtoa_r+0x314>)
 8008616:	e020      	b.n	800865a <_dtoa_r+0xca>
 8008618:	4ba3      	ldr	r3, [pc, #652]	; (80088a8 <_dtoa_r+0x318>)
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	3308      	adds	r3, #8
 800861e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	9804      	ldr	r0, [sp, #16]
 8008624:	b015      	add	sp, #84	; 0x54
 8008626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862a:	4b9e      	ldr	r3, [pc, #632]	; (80088a4 <_dtoa_r+0x314>)
 800862c:	9304      	str	r3, [sp, #16]
 800862e:	3303      	adds	r3, #3
 8008630:	e7f5      	b.n	800861e <_dtoa_r+0x8e>
 8008632:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008636:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800863a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008642:	d10c      	bne.n	800865e <_dtoa_r+0xce>
 8008644:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008646:	2301      	movs	r3, #1
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 84b9 	beq.w	8008fc4 <_dtoa_r+0xa34>
 8008652:	4b96      	ldr	r3, [pc, #600]	; (80088ac <_dtoa_r+0x31c>)
 8008654:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	3b01      	subs	r3, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	e7e1      	b.n	8008622 <_dtoa_r+0x92>
 800865e:	a913      	add	r1, sp, #76	; 0x4c
 8008660:	aa12      	add	r2, sp, #72	; 0x48
 8008662:	ed9d 0b04 	vldr	d0, [sp, #16]
 8008666:	4620      	mov	r0, r4
 8008668:	f001 fb74 	bl	8009d54 <__d2b>
 800866c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8008670:	9001      	str	r0, [sp, #4]
 8008672:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008674:	2e00      	cmp	r6, #0
 8008676:	d046      	beq.n	8008706 <_dtoa_r+0x176>
 8008678:	9805      	ldr	r0, [sp, #20]
 800867a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800867e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008682:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8008686:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800868a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800868e:	2700      	movs	r7, #0
 8008690:	ee07 aa90 	vmov	s15, sl
 8008694:	ec43 2b16 	vmov	d6, r2, r3
 8008698:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800869c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8008888 <_dtoa_r+0x2f8>
 80086a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80086a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80086a8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8008890 <_dtoa_r+0x300>
 80086ac:	eea7 6b04 	vfma.f64	d6, d7, d4
 80086b0:	eeb0 7b46 	vmov.f64	d7, d6
 80086b4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008898 <_dtoa_r+0x308>
 80086b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80086bc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80086c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80086c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c8:	ee16 ba90 	vmov	fp, s13
 80086cc:	d508      	bpl.n	80086e0 <_dtoa_r+0x150>
 80086ce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80086d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80086d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086da:	bf18      	it	ne
 80086dc:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80086e0:	f1bb 0f16 	cmp.w	fp, #22
 80086e4:	d834      	bhi.n	8008750 <_dtoa_r+0x1c0>
 80086e6:	4b72      	ldr	r3, [pc, #456]	; (80088b0 <_dtoa_r+0x320>)
 80086e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086ec:	ed93 7b00 	vldr	d7, [r3]
 80086f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80086f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80086f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fc:	dd01      	ble.n	8008702 <_dtoa_r+0x172>
 80086fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008702:	2300      	movs	r3, #0
 8008704:	e025      	b.n	8008752 <_dtoa_r+0x1c2>
 8008706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008708:	eb01 0a03 	add.w	sl, r1, r3
 800870c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008710:	2b20      	cmp	r3, #32
 8008712:	dd17      	ble.n	8008744 <_dtoa_r+0x1b4>
 8008714:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008718:	9a02      	ldr	r2, [sp, #8]
 800871a:	409d      	lsls	r5, r3
 800871c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
 8008724:	432b      	orrs	r3, r5
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800872e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008732:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008736:	9805      	ldr	r0, [sp, #20]
 8008738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873c:	2701      	movs	r7, #1
 800873e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8008742:	e7a5      	b.n	8008690 <_dtoa_r+0x100>
 8008744:	9a02      	ldr	r2, [sp, #8]
 8008746:	f1c3 0320 	rsb	r3, r3, #32
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	e7ea      	b.n	8008726 <_dtoa_r+0x196>
 8008750:	2301      	movs	r3, #1
 8008752:	eba1 0a0a 	sub.w	sl, r1, sl
 8008756:	9310      	str	r3, [sp, #64]	; 0x40
 8008758:	f1ba 0301 	subs.w	r3, sl, #1
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	bf43      	ittte	mi
 8008760:	2300      	movmi	r3, #0
 8008762:	f1ca 0a01 	rsbmi	sl, sl, #1
 8008766:	9307      	strmi	r3, [sp, #28]
 8008768:	f04f 0a00 	movpl.w	sl, #0
 800876c:	f1bb 0f00 	cmp.w	fp, #0
 8008770:	db19      	blt.n	80087a6 <_dtoa_r+0x216>
 8008772:	9b07      	ldr	r3, [sp, #28]
 8008774:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008778:	445b      	add	r3, fp
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f04f 0800 	mov.w	r8, #0
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	2b09      	cmp	r3, #9
 8008784:	d866      	bhi.n	8008854 <_dtoa_r+0x2c4>
 8008786:	2b05      	cmp	r3, #5
 8008788:	bfc4      	itt	gt
 800878a:	3b04      	subgt	r3, #4
 800878c:	9308      	strgt	r3, [sp, #32]
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	f1a3 0302 	sub.w	r3, r3, #2
 8008794:	bfcc      	ite	gt
 8008796:	2500      	movgt	r5, #0
 8008798:	2501      	movle	r5, #1
 800879a:	2b03      	cmp	r3, #3
 800879c:	d866      	bhi.n	800886c <_dtoa_r+0x2dc>
 800879e:	e8df f003 	tbb	[pc, r3]
 80087a2:	5755      	.short	0x5755
 80087a4:	4909      	.short	0x4909
 80087a6:	2300      	movs	r3, #0
 80087a8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80087ac:	f1cb 0800 	rsb	r8, fp, #0
 80087b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b2:	e7e5      	b.n	8008780 <_dtoa_r+0x1f0>
 80087b4:	2301      	movs	r3, #1
 80087b6:	9309      	str	r3, [sp, #36]	; 0x24
 80087b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd59      	ble.n	8008872 <_dtoa_r+0x2e2>
 80087be:	9306      	str	r3, [sp, #24]
 80087c0:	4699      	mov	r9, r3
 80087c2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087c4:	2200      	movs	r2, #0
 80087c6:	6072      	str	r2, [r6, #4]
 80087c8:	2204      	movs	r2, #4
 80087ca:	f102 0014 	add.w	r0, r2, #20
 80087ce:	4298      	cmp	r0, r3
 80087d0:	6871      	ldr	r1, [r6, #4]
 80087d2:	d953      	bls.n	800887c <_dtoa_r+0x2ec>
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 ff7b 	bl	80096d0 <_Balloc>
 80087da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087dc:	6030      	str	r0, [r6, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	f1b9 0f0e 	cmp.w	r9, #14
 80087e6:	f200 80c2 	bhi.w	800896e <_dtoa_r+0x3de>
 80087ea:	2d00      	cmp	r5, #0
 80087ec:	f000 80bf 	beq.w	800896e <_dtoa_r+0x3de>
 80087f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087f4:	f1bb 0f00 	cmp.w	fp, #0
 80087f8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80087fc:	f340 80e6 	ble.w	80089cc <_dtoa_r+0x43c>
 8008800:	4a2b      	ldr	r2, [pc, #172]	; (80088b0 <_dtoa_r+0x320>)
 8008802:	f00b 030f 	and.w	r3, fp, #15
 8008806:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800880a:	ed93 7b00 	vldr	d7, [r3]
 800880e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008812:	06da      	lsls	r2, r3, #27
 8008814:	f140 80d8 	bpl.w	80089c8 <_dtoa_r+0x438>
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <_dtoa_r+0x324>)
 800881a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800881e:	ed92 6b08 	vldr	d6, [r2, #32]
 8008822:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008826:	ed8d 6b02 	vstr	d6, [sp, #8]
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	2203      	movs	r2, #3
 8008830:	4920      	ldr	r1, [pc, #128]	; (80088b4 <_dtoa_r+0x324>)
 8008832:	e04a      	b.n	80088ca <_dtoa_r+0x33a>
 8008834:	2301      	movs	r3, #1
 8008836:	9309      	str	r3, [sp, #36]	; 0x24
 8008838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800883a:	445b      	add	r3, fp
 800883c:	f103 0901 	add.w	r9, r3, #1
 8008840:	9306      	str	r3, [sp, #24]
 8008842:	464b      	mov	r3, r9
 8008844:	2b01      	cmp	r3, #1
 8008846:	bfb8      	it	lt
 8008848:	2301      	movlt	r3, #1
 800884a:	e7ba      	b.n	80087c2 <_dtoa_r+0x232>
 800884c:	2300      	movs	r3, #0
 800884e:	e7b2      	b.n	80087b6 <_dtoa_r+0x226>
 8008850:	2300      	movs	r3, #0
 8008852:	e7f0      	b.n	8008836 <_dtoa_r+0x2a6>
 8008854:	2501      	movs	r5, #1
 8008856:	2300      	movs	r3, #0
 8008858:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800885c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008860:	9306      	str	r3, [sp, #24]
 8008862:	4699      	mov	r9, r3
 8008864:	2200      	movs	r2, #0
 8008866:	2312      	movs	r3, #18
 8008868:	920a      	str	r2, [sp, #40]	; 0x28
 800886a:	e7aa      	b.n	80087c2 <_dtoa_r+0x232>
 800886c:	2301      	movs	r3, #1
 800886e:	9309      	str	r3, [sp, #36]	; 0x24
 8008870:	e7f4      	b.n	800885c <_dtoa_r+0x2cc>
 8008872:	2301      	movs	r3, #1
 8008874:	9306      	str	r3, [sp, #24]
 8008876:	4699      	mov	r9, r3
 8008878:	461a      	mov	r2, r3
 800887a:	e7f5      	b.n	8008868 <_dtoa_r+0x2d8>
 800887c:	3101      	adds	r1, #1
 800887e:	6071      	str	r1, [r6, #4]
 8008880:	0052      	lsls	r2, r2, #1
 8008882:	e7a2      	b.n	80087ca <_dtoa_r+0x23a>
 8008884:	f3af 8000 	nop.w
 8008888:	636f4361 	.word	0x636f4361
 800888c:	3fd287a7 	.word	0x3fd287a7
 8008890:	8b60c8b3 	.word	0x8b60c8b3
 8008894:	3fc68a28 	.word	0x3fc68a28
 8008898:	509f79fb 	.word	0x509f79fb
 800889c:	3fd34413 	.word	0x3fd34413
 80088a0:	7ff00000 	.word	0x7ff00000
 80088a4:	0800ace1 	.word	0x0800ace1
 80088a8:	0800acd8 	.word	0x0800acd8
 80088ac:	0800ac5d 	.word	0x0800ac5d
 80088b0:	0800ad18 	.word	0x0800ad18
 80088b4:	0800acf0 	.word	0x0800acf0
 80088b8:	07de      	lsls	r6, r3, #31
 80088ba:	d504      	bpl.n	80088c6 <_dtoa_r+0x336>
 80088bc:	ed91 6b00 	vldr	d6, [r1]
 80088c0:	3201      	adds	r2, #1
 80088c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088c6:	105b      	asrs	r3, r3, #1
 80088c8:	3108      	adds	r1, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f4      	bne.n	80088b8 <_dtoa_r+0x328>
 80088ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80088d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80088d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80a7 	beq.w	8008a30 <_dtoa_r+0x4a0>
 80088e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80088e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80088ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f2:	f140 809d 	bpl.w	8008a30 <_dtoa_r+0x4a0>
 80088f6:	f1b9 0f00 	cmp.w	r9, #0
 80088fa:	f000 8099 	beq.w	8008a30 <_dtoa_r+0x4a0>
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd30      	ble.n	8008966 <_dtoa_r+0x3d6>
 8008904:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008908:	ee27 7b06 	vmul.f64	d7, d7, d6
 800890c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008910:	9d06      	ldr	r5, [sp, #24]
 8008912:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008916:	3201      	adds	r2, #1
 8008918:	ed9d 6b02 	vldr	d6, [sp, #8]
 800891c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008920:	ee07 2a90 	vmov	s15, r2
 8008924:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008928:	eea7 5b06 	vfma.f64	d5, d7, d6
 800892c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008930:	9a03      	ldr	r2, [sp, #12]
 8008932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008936:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800893a:	2d00      	cmp	r5, #0
 800893c:	d17b      	bne.n	8008a36 <_dtoa_r+0x4a6>
 800893e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008942:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008946:	ec41 0b17 	vmov	d7, r0, r1
 800894a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800894e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008952:	f300 8253 	bgt.w	8008dfc <_dtoa_r+0x86c>
 8008956:	eeb1 7b47 	vneg.f64	d7, d7
 800895a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800895e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008962:	f100 8249 	bmi.w	8008df8 <_dtoa_r+0x868>
 8008966:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800896a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800896e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008970:	2b00      	cmp	r3, #0
 8008972:	f2c0 8119 	blt.w	8008ba8 <_dtoa_r+0x618>
 8008976:	f1bb 0f0e 	cmp.w	fp, #14
 800897a:	f300 8115 	bgt.w	8008ba8 <_dtoa_r+0x618>
 800897e:	4bc3      	ldr	r3, [pc, #780]	; (8008c8c <_dtoa_r+0x6fc>)
 8008980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008984:	ed93 6b00 	vldr	d6, [r3]
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	f280 80ba 	bge.w	8008b04 <_dtoa_r+0x574>
 8008990:	f1b9 0f00 	cmp.w	r9, #0
 8008994:	f300 80b6 	bgt.w	8008b04 <_dtoa_r+0x574>
 8008998:	f040 822d 	bne.w	8008df6 <_dtoa_r+0x866>
 800899c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80089a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80089a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b0:	464d      	mov	r5, r9
 80089b2:	464f      	mov	r7, r9
 80089b4:	f280 8204 	bge.w	8008dc0 <_dtoa_r+0x830>
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	1c5e      	adds	r6, r3, #1
 80089be:	2331      	movs	r3, #49	; 0x31
 80089c0:	7013      	strb	r3, [r2, #0]
 80089c2:	f10b 0b01 	add.w	fp, fp, #1
 80089c6:	e1ff      	b.n	8008dc8 <_dtoa_r+0x838>
 80089c8:	2202      	movs	r2, #2
 80089ca:	e731      	b.n	8008830 <_dtoa_r+0x2a0>
 80089cc:	d02e      	beq.n	8008a2c <_dtoa_r+0x49c>
 80089ce:	f1cb 0300 	rsb	r3, fp, #0
 80089d2:	4aae      	ldr	r2, [pc, #696]	; (8008c8c <_dtoa_r+0x6fc>)
 80089d4:	f003 010f 	and.w	r1, r3, #15
 80089d8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80089dc:	ed92 7b00 	vldr	d7, [r2]
 80089e0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80089e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80089e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80089ec:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80089f0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80089f4:	49a6      	ldr	r1, [pc, #664]	; (8008c90 <_dtoa_r+0x700>)
 80089f6:	111b      	asrs	r3, r3, #4
 80089f8:	2000      	movs	r0, #0
 80089fa:	2202      	movs	r2, #2
 80089fc:	b93b      	cbnz	r3, 8008a0e <_dtoa_r+0x47e>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f af6b 	beq.w	80088da <_dtoa_r+0x34a>
 8008a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a0c:	e765      	b.n	80088da <_dtoa_r+0x34a>
 8008a0e:	07dd      	lsls	r5, r3, #31
 8008a10:	d509      	bpl.n	8008a26 <_dtoa_r+0x496>
 8008a12:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008a16:	ed91 7b00 	vldr	d7, [r1]
 8008a1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a1e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008a22:	3201      	adds	r2, #1
 8008a24:	2001      	movs	r0, #1
 8008a26:	105b      	asrs	r3, r3, #1
 8008a28:	3108      	adds	r1, #8
 8008a2a:	e7e7      	b.n	80089fc <_dtoa_r+0x46c>
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	e754      	b.n	80088da <_dtoa_r+0x34a>
 8008a30:	465b      	mov	r3, fp
 8008a32:	464d      	mov	r5, r9
 8008a34:	e770      	b.n	8008918 <_dtoa_r+0x388>
 8008a36:	4a95      	ldr	r2, [pc, #596]	; (8008c8c <_dtoa_r+0x6fc>)
 8008a38:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8008a3c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a42:	ec41 0b17 	vmov	d7, r0, r1
 8008a46:	b35a      	cbz	r2, 8008aa0 <_dtoa_r+0x510>
 8008a48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008a4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008a50:	9e04      	ldr	r6, [sp, #16]
 8008a52:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008a56:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008a5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a5e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008a62:	ee14 2a90 	vmov	r2, s9
 8008a66:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008a6a:	3230      	adds	r2, #48	; 0x30
 8008a6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008a70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a78:	f806 2b01 	strb.w	r2, [r6], #1
 8008a7c:	d43b      	bmi.n	8008af6 <_dtoa_r+0x566>
 8008a7e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008a82:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8a:	d472      	bmi.n	8008b72 <_dtoa_r+0x5e2>
 8008a8c:	9a04      	ldr	r2, [sp, #16]
 8008a8e:	1ab2      	subs	r2, r6, r2
 8008a90:	4295      	cmp	r5, r2
 8008a92:	f77f af68 	ble.w	8008966 <_dtoa_r+0x3d6>
 8008a96:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008a9a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008a9e:	e7de      	b.n	8008a5e <_dtoa_r+0x4ce>
 8008aa0:	9a04      	ldr	r2, [sp, #16]
 8008aa2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008aa6:	1956      	adds	r6, r2, r5
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008aae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008ab2:	ee14 2a90 	vmov	r2, s9
 8008ab6:	3230      	adds	r2, #48	; 0x30
 8008ab8:	f801 2b01 	strb.w	r2, [r1], #1
 8008abc:	42b1      	cmp	r1, r6
 8008abe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ac2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ac6:	d11a      	bne.n	8008afe <_dtoa_r+0x56e>
 8008ac8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008acc:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008ad0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	dc4b      	bgt.n	8008b72 <_dtoa_r+0x5e2>
 8008ada:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae6:	f57f af3e 	bpl.w	8008966 <_dtoa_r+0x3d6>
 8008aea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008aee:	2a30      	cmp	r2, #48	; 0x30
 8008af0:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 8008af4:	d001      	beq.n	8008afa <_dtoa_r+0x56a>
 8008af6:	469b      	mov	fp, r3
 8008af8:	e02a      	b.n	8008b50 <_dtoa_r+0x5c0>
 8008afa:	460e      	mov	r6, r1
 8008afc:	e7f5      	b.n	8008aea <_dtoa_r+0x55a>
 8008afe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b02:	e7d4      	b.n	8008aae <_dtoa_r+0x51e>
 8008b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b08:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008b0c:	9e04      	ldr	r6, [sp, #16]
 8008b0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008b12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008b16:	ee15 3a10 	vmov	r3, s10
 8008b1a:	3330      	adds	r3, #48	; 0x30
 8008b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	1af3      	subs	r3, r6, r3
 8008b24:	4599      	cmp	r9, r3
 8008b26:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008b2a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008b2e:	d133      	bne.n	8008b98 <_dtoa_r+0x608>
 8008b30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008b34:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3c:	dc18      	bgt.n	8008b70 <_dtoa_r+0x5e0>
 8008b3e:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b46:	d103      	bne.n	8008b50 <_dtoa_r+0x5c0>
 8008b48:	ee15 3a10 	vmov	r3, s10
 8008b4c:	07db      	lsls	r3, r3, #31
 8008b4e:	d40f      	bmi.n	8008b70 <_dtoa_r+0x5e0>
 8008b50:	9901      	ldr	r1, [sp, #4]
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fdf0 	bl	8009738 <_Bfree>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b5c:	7033      	strb	r3, [r6, #0]
 8008b5e:	f10b 0301 	add.w	r3, fp, #1
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f43f ad5b 	beq.w	8008622 <_dtoa_r+0x92>
 8008b6c:	601e      	str	r6, [r3, #0]
 8008b6e:	e558      	b.n	8008622 <_dtoa_r+0x92>
 8008b70:	465b      	mov	r3, fp
 8008b72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b76:	2939      	cmp	r1, #57	; 0x39
 8008b78:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8008b7c:	d106      	bne.n	8008b8c <_dtoa_r+0x5fc>
 8008b7e:	9904      	ldr	r1, [sp, #16]
 8008b80:	4291      	cmp	r1, r2
 8008b82:	d107      	bne.n	8008b94 <_dtoa_r+0x604>
 8008b84:	2230      	movs	r2, #48	; 0x30
 8008b86:	700a      	strb	r2, [r1, #0]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	7811      	ldrb	r1, [r2, #0]
 8008b8e:	3101      	adds	r1, #1
 8008b90:	7011      	strb	r1, [r2, #0]
 8008b92:	e7b0      	b.n	8008af6 <_dtoa_r+0x566>
 8008b94:	4616      	mov	r6, r2
 8008b96:	e7ec      	b.n	8008b72 <_dtoa_r+0x5e2>
 8008b98:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008b9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba4:	d1b3      	bne.n	8008b0e <_dtoa_r+0x57e>
 8008ba6:	e7d3      	b.n	8008b50 <_dtoa_r+0x5c0>
 8008ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	f000 808d 	beq.w	8008cca <_dtoa_r+0x73a>
 8008bb0:	9a08      	ldr	r2, [sp, #32]
 8008bb2:	2a01      	cmp	r2, #1
 8008bb4:	dc72      	bgt.n	8008c9c <_dtoa_r+0x70c>
 8008bb6:	2f00      	cmp	r7, #0
 8008bb8:	d06c      	beq.n	8008c94 <_dtoa_r+0x704>
 8008bba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bbe:	4645      	mov	r5, r8
 8008bc0:	4656      	mov	r6, sl
 8008bc2:	9a07      	ldr	r2, [sp, #28]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	441a      	add	r2, r3
 8008bc8:	4620      	mov	r0, r4
 8008bca:	449a      	add	sl, r3
 8008bcc:	9207      	str	r2, [sp, #28]
 8008bce:	f000 fe91 	bl	80098f4 <__i2b>
 8008bd2:	4607      	mov	r7, r0
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	dd0b      	ble.n	8008bf0 <_dtoa_r+0x660>
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	dd08      	ble.n	8008bf0 <_dtoa_r+0x660>
 8008bde:	42b3      	cmp	r3, r6
 8008be0:	9a07      	ldr	r2, [sp, #28]
 8008be2:	bfa8      	it	ge
 8008be4:	4633      	movge	r3, r6
 8008be6:	ebaa 0a03 	sub.w	sl, sl, r3
 8008bea:	1af6      	subs	r6, r6, r3
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	f1b8 0f00 	cmp.w	r8, #0
 8008bf4:	d01d      	beq.n	8008c32 <_dtoa_r+0x6a2>
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d06a      	beq.n	8008cd2 <_dtoa_r+0x742>
 8008bfc:	b18d      	cbz	r5, 8008c22 <_dtoa_r+0x692>
 8008bfe:	4639      	mov	r1, r7
 8008c00:	462a      	mov	r2, r5
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 ff16 	bl	8009a34 <__pow5mult>
 8008c08:	9a01      	ldr	r2, [sp, #4]
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 fe79 	bl	8009906 <__multiply>
 8008c14:	9901      	ldr	r1, [sp, #4]
 8008c16:	900c      	str	r0, [sp, #48]	; 0x30
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 fd8d 	bl	8009738 <_Bfree>
 8008c1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c20:	9301      	str	r3, [sp, #4]
 8008c22:	ebb8 0205 	subs.w	r2, r8, r5
 8008c26:	d004      	beq.n	8008c32 <_dtoa_r+0x6a2>
 8008c28:	9901      	ldr	r1, [sp, #4]
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 ff02 	bl	8009a34 <__pow5mult>
 8008c30:	9001      	str	r0, [sp, #4]
 8008c32:	2101      	movs	r1, #1
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fe5d 	bl	80098f4 <__i2b>
 8008c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 81ca 	beq.w	8008fd8 <_dtoa_r+0xa48>
 8008c44:	461a      	mov	r2, r3
 8008c46:	4601      	mov	r1, r0
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 fef3 	bl	8009a34 <__pow5mult>
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	4605      	mov	r5, r0
 8008c54:	dc44      	bgt.n	8008ce0 <_dtoa_r+0x750>
 8008c56:	9b02      	ldr	r3, [sp, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d13c      	bne.n	8008cd6 <_dtoa_r+0x746>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d137      	bne.n	8008cd6 <_dtoa_r+0x746>
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c6c:	0d1b      	lsrs	r3, r3, #20
 8008c6e:	051b      	lsls	r3, r3, #20
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d033      	beq.n	8008cdc <_dtoa_r+0x74c>
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	3301      	adds	r3, #1
 8008c78:	f10a 0a01 	add.w	sl, sl, #1
 8008c7c:	9307      	str	r3, [sp, #28]
 8008c7e:	f04f 0801 	mov.w	r8, #1
 8008c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c84:	bb73      	cbnz	r3, 8008ce4 <_dtoa_r+0x754>
 8008c86:	2001      	movs	r0, #1
 8008c88:	e034      	b.n	8008cf4 <_dtoa_r+0x764>
 8008c8a:	bf00      	nop
 8008c8c:	0800ad18 	.word	0x0800ad18
 8008c90:	0800acf0 	.word	0x0800acf0
 8008c94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c9a:	e790      	b.n	8008bbe <_dtoa_r+0x62e>
 8008c9c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8008ca0:	45a8      	cmp	r8, r5
 8008ca2:	bfbf      	itttt	lt
 8008ca4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008ca6:	eba5 0808 	sublt.w	r8, r5, r8
 8008caa:	4443      	addlt	r3, r8
 8008cac:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008cae:	bfb6      	itet	lt
 8008cb0:	46a8      	movlt	r8, r5
 8008cb2:	eba8 0505 	subge.w	r5, r8, r5
 8008cb6:	2500      	movlt	r5, #0
 8008cb8:	f1b9 0f00 	cmp.w	r9, #0
 8008cbc:	bfb9      	ittee	lt
 8008cbe:	ebaa 0609 	sublt.w	r6, sl, r9
 8008cc2:	2300      	movlt	r3, #0
 8008cc4:	4656      	movge	r6, sl
 8008cc6:	464b      	movge	r3, r9
 8008cc8:	e77b      	b.n	8008bc2 <_dtoa_r+0x632>
 8008cca:	4645      	mov	r5, r8
 8008ccc:	4656      	mov	r6, sl
 8008cce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cd0:	e780      	b.n	8008bd4 <_dtoa_r+0x644>
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	e7a8      	b.n	8008c28 <_dtoa_r+0x698>
 8008cd6:	f04f 0800 	mov.w	r8, #0
 8008cda:	e7d2      	b.n	8008c82 <_dtoa_r+0x6f2>
 8008cdc:	4698      	mov	r8, r3
 8008cde:	e7d0      	b.n	8008c82 <_dtoa_r+0x6f2>
 8008ce0:	f04f 0800 	mov.w	r8, #0
 8008ce4:	692b      	ldr	r3, [r5, #16]
 8008ce6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008cea:	6918      	ldr	r0, [r3, #16]
 8008cec:	f000 fdb4 	bl	8009858 <__hi0bits>
 8008cf0:	f1c0 0020 	rsb	r0, r0, #32
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	4418      	add	r0, r3
 8008cf8:	f010 001f 	ands.w	r0, r0, #31
 8008cfc:	d047      	beq.n	8008d8e <_dtoa_r+0x7fe>
 8008cfe:	f1c0 0320 	rsb	r3, r0, #32
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	dd3b      	ble.n	8008d7e <_dtoa_r+0x7ee>
 8008d06:	9b07      	ldr	r3, [sp, #28]
 8008d08:	f1c0 001c 	rsb	r0, r0, #28
 8008d0c:	4482      	add	sl, r0
 8008d0e:	4406      	add	r6, r0
 8008d10:	4403      	add	r3, r0
 8008d12:	9307      	str	r3, [sp, #28]
 8008d14:	f1ba 0f00 	cmp.w	sl, #0
 8008d18:	dd05      	ble.n	8008d26 <_dtoa_r+0x796>
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	9901      	ldr	r1, [sp, #4]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fed6 	bl	8009ad0 <__lshift>
 8008d24:	9001      	str	r0, [sp, #4]
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dd05      	ble.n	8008d38 <_dtoa_r+0x7a8>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fecd 	bl	8009ad0 <__lshift>
 8008d36:	4605      	mov	r5, r0
 8008d38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d3a:	b353      	cbz	r3, 8008d92 <_dtoa_r+0x802>
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	9801      	ldr	r0, [sp, #4]
 8008d40:	f000 ff1a 	bl	8009b78 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	da24      	bge.n	8008d92 <_dtoa_r+0x802>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	9901      	ldr	r1, [sp, #4]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fd09 	bl	8009766 <__multadd>
 8008d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d56:	9001      	str	r0, [sp, #4]
 8008d58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8142 	beq.w	8008fe6 <_dtoa_r+0xa56>
 8008d62:	2300      	movs	r3, #0
 8008d64:	4639      	mov	r1, r7
 8008d66:	220a      	movs	r2, #10
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fcfc 	bl	8009766 <__multadd>
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	4607      	mov	r7, r0
 8008d74:	dc4b      	bgt.n	8008e0e <_dtoa_r+0x87e>
 8008d76:	9b08      	ldr	r3, [sp, #32]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	dd48      	ble.n	8008e0e <_dtoa_r+0x87e>
 8008d7c:	e011      	b.n	8008da2 <_dtoa_r+0x812>
 8008d7e:	d0c9      	beq.n	8008d14 <_dtoa_r+0x784>
 8008d80:	9a07      	ldr	r2, [sp, #28]
 8008d82:	331c      	adds	r3, #28
 8008d84:	441a      	add	r2, r3
 8008d86:	449a      	add	sl, r3
 8008d88:	441e      	add	r6, r3
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7c1      	b.n	8008d12 <_dtoa_r+0x782>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e7f6      	b.n	8008d80 <_dtoa_r+0x7f0>
 8008d92:	f1b9 0f00 	cmp.w	r9, #0
 8008d96:	dc34      	bgt.n	8008e02 <_dtoa_r+0x872>
 8008d98:	9b08      	ldr	r3, [sp, #32]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	dd31      	ble.n	8008e02 <_dtoa_r+0x872>
 8008d9e:	f8cd 9018 	str.w	r9, [sp, #24]
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	b963      	cbnz	r3, 8008dc0 <_dtoa_r+0x830>
 8008da6:	4629      	mov	r1, r5
 8008da8:	2205      	movs	r2, #5
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fcdb 	bl	8009766 <__multadd>
 8008db0:	4601      	mov	r1, r0
 8008db2:	4605      	mov	r5, r0
 8008db4:	9801      	ldr	r0, [sp, #4]
 8008db6:	f000 fedf 	bl	8009b78 <__mcmp>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f73f adfc 	bgt.w	80089b8 <_dtoa_r+0x428>
 8008dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc2:	9e04      	ldr	r6, [sp, #16]
 8008dc4:	ea6f 0b03 	mvn.w	fp, r3
 8008dc8:	f04f 0900 	mov.w	r9, #0
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fcb2 	bl	8009738 <_Bfree>
 8008dd4:	2f00      	cmp	r7, #0
 8008dd6:	f43f aebb 	beq.w	8008b50 <_dtoa_r+0x5c0>
 8008dda:	f1b9 0f00 	cmp.w	r9, #0
 8008dde:	d005      	beq.n	8008dec <_dtoa_r+0x85c>
 8008de0:	45b9      	cmp	r9, r7
 8008de2:	d003      	beq.n	8008dec <_dtoa_r+0x85c>
 8008de4:	4649      	mov	r1, r9
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fca6 	bl	8009738 <_Bfree>
 8008dec:	4639      	mov	r1, r7
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fca2 	bl	8009738 <_Bfree>
 8008df4:	e6ac      	b.n	8008b50 <_dtoa_r+0x5c0>
 8008df6:	2500      	movs	r5, #0
 8008df8:	462f      	mov	r7, r5
 8008dfa:	e7e1      	b.n	8008dc0 <_dtoa_r+0x830>
 8008dfc:	469b      	mov	fp, r3
 8008dfe:	462f      	mov	r7, r5
 8008e00:	e5da      	b.n	80089b8 <_dtoa_r+0x428>
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	f8cd 9018 	str.w	r9, [sp, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80f3 	beq.w	8008ff4 <_dtoa_r+0xa64>
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	dd05      	ble.n	8008e1e <_dtoa_r+0x88e>
 8008e12:	4639      	mov	r1, r7
 8008e14:	4632      	mov	r2, r6
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fe5a 	bl	8009ad0 <__lshift>
 8008e1c:	4607      	mov	r7, r0
 8008e1e:	f1b8 0f00 	cmp.w	r8, #0
 8008e22:	d04c      	beq.n	8008ebe <_dtoa_r+0x92e>
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 fc52 	bl	80096d0 <_Balloc>
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	3202      	adds	r2, #2
 8008e30:	4606      	mov	r6, r0
 8008e32:	0092      	lsls	r2, r2, #2
 8008e34:	f107 010c 	add.w	r1, r7, #12
 8008e38:	300c      	adds	r0, #12
 8008e3a:	f7fd fe41 	bl	8006ac0 <memcpy>
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4631      	mov	r1, r6
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 fe44 	bl	8009ad0 <__lshift>
 8008e48:	9b02      	ldr	r3, [sp, #8]
 8008e4a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	46b9      	mov	r9, r7
 8008e54:	9307      	str	r3, [sp, #28]
 8008e56:	4607      	mov	r7, r0
 8008e58:	4629      	mov	r1, r5
 8008e5a:	9801      	ldr	r0, [sp, #4]
 8008e5c:	f7ff fb0a 	bl	8008474 <quorem>
 8008e60:	4649      	mov	r1, r9
 8008e62:	4606      	mov	r6, r0
 8008e64:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e68:	9801      	ldr	r0, [sp, #4]
 8008e6a:	f000 fe85 	bl	8009b78 <__mcmp>
 8008e6e:	463a      	mov	r2, r7
 8008e70:	9002      	str	r0, [sp, #8]
 8008e72:	4629      	mov	r1, r5
 8008e74:	4620      	mov	r0, r4
 8008e76:	f000 fe99 	bl	8009bac <__mdiff>
 8008e7a:	68c3      	ldr	r3, [r0, #12]
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	bb03      	cbnz	r3, 8008ec2 <_dtoa_r+0x932>
 8008e80:	4601      	mov	r1, r0
 8008e82:	9009      	str	r0, [sp, #36]	; 0x24
 8008e84:	9801      	ldr	r0, [sp, #4]
 8008e86:	f000 fe77 	bl	8009b78 <__mcmp>
 8008e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4611      	mov	r1, r2
 8008e90:	4620      	mov	r0, r4
 8008e92:	9309      	str	r3, [sp, #36]	; 0x24
 8008e94:	f000 fc50 	bl	8009738 <_Bfree>
 8008e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9a:	b9a3      	cbnz	r3, 8008ec6 <_dtoa_r+0x936>
 8008e9c:	9a08      	ldr	r2, [sp, #32]
 8008e9e:	b992      	cbnz	r2, 8008ec6 <_dtoa_r+0x936>
 8008ea0:	9a07      	ldr	r2, [sp, #28]
 8008ea2:	b982      	cbnz	r2, 8008ec6 <_dtoa_r+0x936>
 8008ea4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ea8:	d029      	beq.n	8008efe <_dtoa_r+0x96e>
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dd01      	ble.n	8008eb4 <_dtoa_r+0x924>
 8008eb0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008eb4:	f10a 0601 	add.w	r6, sl, #1
 8008eb8:	f88a 8000 	strb.w	r8, [sl]
 8008ebc:	e786      	b.n	8008dcc <_dtoa_r+0x83c>
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	e7c2      	b.n	8008e48 <_dtoa_r+0x8b8>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7e3      	b.n	8008e8e <_dtoa_r+0x8fe>
 8008ec6:	9a02      	ldr	r2, [sp, #8]
 8008ec8:	2a00      	cmp	r2, #0
 8008eca:	db04      	blt.n	8008ed6 <_dtoa_r+0x946>
 8008ecc:	d124      	bne.n	8008f18 <_dtoa_r+0x988>
 8008ece:	9a08      	ldr	r2, [sp, #32]
 8008ed0:	bb12      	cbnz	r2, 8008f18 <_dtoa_r+0x988>
 8008ed2:	9a07      	ldr	r2, [sp, #28]
 8008ed4:	bb02      	cbnz	r2, 8008f18 <_dtoa_r+0x988>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	ddec      	ble.n	8008eb4 <_dtoa_r+0x924>
 8008eda:	2201      	movs	r2, #1
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 fdf6 	bl	8009ad0 <__lshift>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	9001      	str	r0, [sp, #4]
 8008ee8:	f000 fe46 	bl	8009b78 <__mcmp>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	dc03      	bgt.n	8008ef8 <_dtoa_r+0x968>
 8008ef0:	d1e0      	bne.n	8008eb4 <_dtoa_r+0x924>
 8008ef2:	f018 0f01 	tst.w	r8, #1
 8008ef6:	d0dd      	beq.n	8008eb4 <_dtoa_r+0x924>
 8008ef8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008efc:	d1d8      	bne.n	8008eb0 <_dtoa_r+0x920>
 8008efe:	2339      	movs	r3, #57	; 0x39
 8008f00:	f10a 0601 	add.w	r6, sl, #1
 8008f04:	f88a 3000 	strb.w	r3, [sl]
 8008f08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f0c:	2b39      	cmp	r3, #57	; 0x39
 8008f0e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8008f12:	d04c      	beq.n	8008fae <_dtoa_r+0xa1e>
 8008f14:	3301      	adds	r3, #1
 8008f16:	e051      	b.n	8008fbc <_dtoa_r+0xa2c>
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f10a 0601 	add.w	r6, sl, #1
 8008f1e:	dd05      	ble.n	8008f2c <_dtoa_r+0x99c>
 8008f20:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f24:	d0eb      	beq.n	8008efe <_dtoa_r+0x96e>
 8008f26:	f108 0801 	add.w	r8, r8, #1
 8008f2a:	e7c5      	b.n	8008eb8 <_dtoa_r+0x928>
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	9a06      	ldr	r2, [sp, #24]
 8008f30:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008f34:	1af3      	subs	r3, r6, r3
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d021      	beq.n	8008f7e <_dtoa_r+0x9ee>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	9901      	ldr	r1, [sp, #4]
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 fc10 	bl	8009766 <__multadd>
 8008f46:	45b9      	cmp	r9, r7
 8008f48:	9001      	str	r0, [sp, #4]
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	f04f 020a 	mov.w	r2, #10
 8008f52:	4649      	mov	r1, r9
 8008f54:	4620      	mov	r0, r4
 8008f56:	d105      	bne.n	8008f64 <_dtoa_r+0x9d4>
 8008f58:	f000 fc05 	bl	8009766 <__multadd>
 8008f5c:	4681      	mov	r9, r0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	46b2      	mov	sl, r6
 8008f62:	e779      	b.n	8008e58 <_dtoa_r+0x8c8>
 8008f64:	f000 fbff 	bl	8009766 <__multadd>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	4681      	mov	r9, r0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	220a      	movs	r2, #10
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fbf8 	bl	8009766 <__multadd>
 8008f76:	4607      	mov	r7, r0
 8008f78:	e7f2      	b.n	8008f60 <_dtoa_r+0x9d0>
 8008f7a:	f04f 0900 	mov.w	r9, #0
 8008f7e:	2201      	movs	r2, #1
 8008f80:	9901      	ldr	r1, [sp, #4]
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fda4 	bl	8009ad0 <__lshift>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	9001      	str	r0, [sp, #4]
 8008f8c:	f000 fdf4 	bl	8009b78 <__mcmp>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	dcb9      	bgt.n	8008f08 <_dtoa_r+0x978>
 8008f94:	d102      	bne.n	8008f9c <_dtoa_r+0xa0c>
 8008f96:	f018 0f01 	tst.w	r8, #1
 8008f9a:	d1b5      	bne.n	8008f08 <_dtoa_r+0x978>
 8008f9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fa0:	2b30      	cmp	r3, #48	; 0x30
 8008fa2:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8008fa6:	f47f af11 	bne.w	8008dcc <_dtoa_r+0x83c>
 8008faa:	4616      	mov	r6, r2
 8008fac:	e7f6      	b.n	8008f9c <_dtoa_r+0xa0c>
 8008fae:	9b04      	ldr	r3, [sp, #16]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d105      	bne.n	8008fc0 <_dtoa_r+0xa30>
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	f10b 0b01 	add.w	fp, fp, #1
 8008fba:	2331      	movs	r3, #49	; 0x31
 8008fbc:	7013      	strb	r3, [r2, #0]
 8008fbe:	e705      	b.n	8008dcc <_dtoa_r+0x83c>
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	e7a1      	b.n	8008f08 <_dtoa_r+0x978>
 8008fc4:	4b16      	ldr	r3, [pc, #88]	; (8009020 <_dtoa_r+0xa90>)
 8008fc6:	f7ff bb48 	b.w	800865a <_dtoa_r+0xca>
 8008fca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f47f ab23 	bne.w	8008618 <_dtoa_r+0x88>
 8008fd2:	4b14      	ldr	r3, [pc, #80]	; (8009024 <_dtoa_r+0xa94>)
 8008fd4:	f7ff bb41 	b.w	800865a <_dtoa_r+0xca>
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	f77f ae3b 	ble.w	8008c56 <_dtoa_r+0x6c6>
 8008fe0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008fe4:	e64f      	b.n	8008c86 <_dtoa_r+0x6f6>
 8008fe6:	9b06      	ldr	r3, [sp, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	dc03      	bgt.n	8008ff4 <_dtoa_r+0xa64>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	f73f aed7 	bgt.w	8008da2 <_dtoa_r+0x812>
 8008ff4:	9e04      	ldr	r6, [sp, #16]
 8008ff6:	9801      	ldr	r0, [sp, #4]
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7ff fa3b 	bl	8008474 <quorem>
 8008ffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009002:	f806 8b01 	strb.w	r8, [r6], #1
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	9a06      	ldr	r2, [sp, #24]
 800900a:	1af3      	subs	r3, r6, r3
 800900c:	429a      	cmp	r2, r3
 800900e:	ddb4      	ble.n	8008f7a <_dtoa_r+0x9ea>
 8009010:	2300      	movs	r3, #0
 8009012:	220a      	movs	r2, #10
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	4620      	mov	r0, r4
 8009018:	f000 fba5 	bl	8009766 <__multadd>
 800901c:	9001      	str	r0, [sp, #4]
 800901e:	e7ea      	b.n	8008ff6 <_dtoa_r+0xa66>
 8009020:	0800ac5c 	.word	0x0800ac5c
 8009024:	0800acd8 	.word	0x0800acd8

08009028 <rshift>:
 8009028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800902a:	6906      	ldr	r6, [r0, #16]
 800902c:	114b      	asrs	r3, r1, #5
 800902e:	429e      	cmp	r6, r3
 8009030:	f100 0414 	add.w	r4, r0, #20
 8009034:	dd30      	ble.n	8009098 <rshift+0x70>
 8009036:	f011 011f 	ands.w	r1, r1, #31
 800903a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800903e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009042:	d108      	bne.n	8009056 <rshift+0x2e>
 8009044:	4621      	mov	r1, r4
 8009046:	42b2      	cmp	r2, r6
 8009048:	460b      	mov	r3, r1
 800904a:	d211      	bcs.n	8009070 <rshift+0x48>
 800904c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009050:	f841 3b04 	str.w	r3, [r1], #4
 8009054:	e7f7      	b.n	8009046 <rshift+0x1e>
 8009056:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800905a:	f1c1 0c20 	rsb	ip, r1, #32
 800905e:	40cd      	lsrs	r5, r1
 8009060:	3204      	adds	r2, #4
 8009062:	4623      	mov	r3, r4
 8009064:	42b2      	cmp	r2, r6
 8009066:	4617      	mov	r7, r2
 8009068:	d30c      	bcc.n	8009084 <rshift+0x5c>
 800906a:	601d      	str	r5, [r3, #0]
 800906c:	b105      	cbz	r5, 8009070 <rshift+0x48>
 800906e:	3304      	adds	r3, #4
 8009070:	1b1a      	subs	r2, r3, r4
 8009072:	42a3      	cmp	r3, r4
 8009074:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009078:	bf08      	it	eq
 800907a:	2300      	moveq	r3, #0
 800907c:	6102      	str	r2, [r0, #16]
 800907e:	bf08      	it	eq
 8009080:	6143      	streq	r3, [r0, #20]
 8009082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009084:	683f      	ldr	r7, [r7, #0]
 8009086:	fa07 f70c 	lsl.w	r7, r7, ip
 800908a:	433d      	orrs	r5, r7
 800908c:	f843 5b04 	str.w	r5, [r3], #4
 8009090:	f852 5b04 	ldr.w	r5, [r2], #4
 8009094:	40cd      	lsrs	r5, r1
 8009096:	e7e5      	b.n	8009064 <rshift+0x3c>
 8009098:	4623      	mov	r3, r4
 800909a:	e7e9      	b.n	8009070 <rshift+0x48>

0800909c <__hexdig_fun>:
 800909c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090a0:	2b09      	cmp	r3, #9
 80090a2:	d802      	bhi.n	80090aa <__hexdig_fun+0xe>
 80090a4:	3820      	subs	r0, #32
 80090a6:	b2c0      	uxtb	r0, r0
 80090a8:	4770      	bx	lr
 80090aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d801      	bhi.n	80090b6 <__hexdig_fun+0x1a>
 80090b2:	3847      	subs	r0, #71	; 0x47
 80090b4:	e7f7      	b.n	80090a6 <__hexdig_fun+0xa>
 80090b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090ba:	2b05      	cmp	r3, #5
 80090bc:	d801      	bhi.n	80090c2 <__hexdig_fun+0x26>
 80090be:	3827      	subs	r0, #39	; 0x27
 80090c0:	e7f1      	b.n	80090a6 <__hexdig_fun+0xa>
 80090c2:	2000      	movs	r0, #0
 80090c4:	4770      	bx	lr

080090c6 <__gethex>:
 80090c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	b08b      	sub	sp, #44	; 0x2c
 80090cc:	468a      	mov	sl, r1
 80090ce:	9002      	str	r0, [sp, #8]
 80090d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80090d2:	9306      	str	r3, [sp, #24]
 80090d4:	4690      	mov	r8, r2
 80090d6:	f000 fad0 	bl	800967a <__localeconv_l>
 80090da:	6803      	ldr	r3, [r0, #0]
 80090dc:	9303      	str	r3, [sp, #12]
 80090de:	4618      	mov	r0, r3
 80090e0:	f7f7 f8ae 	bl	8000240 <strlen>
 80090e4:	9b03      	ldr	r3, [sp, #12]
 80090e6:	9001      	str	r0, [sp, #4]
 80090e8:	4403      	add	r3, r0
 80090ea:	f04f 0b00 	mov.w	fp, #0
 80090ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090f2:	9307      	str	r3, [sp, #28]
 80090f4:	f8da 3000 	ldr.w	r3, [sl]
 80090f8:	3302      	adds	r3, #2
 80090fa:	461f      	mov	r7, r3
 80090fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009100:	2830      	cmp	r0, #48	; 0x30
 8009102:	d06c      	beq.n	80091de <__gethex+0x118>
 8009104:	f7ff ffca 	bl	800909c <__hexdig_fun>
 8009108:	4604      	mov	r4, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d16a      	bne.n	80091e4 <__gethex+0x11e>
 800910e:	9a01      	ldr	r2, [sp, #4]
 8009110:	9903      	ldr	r1, [sp, #12]
 8009112:	4638      	mov	r0, r7
 8009114:	f001 f8f4 	bl	800a300 <strncmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	d166      	bne.n	80091ea <__gethex+0x124>
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	5cf8      	ldrb	r0, [r7, r3]
 8009120:	18fe      	adds	r6, r7, r3
 8009122:	f7ff ffbb 	bl	800909c <__hexdig_fun>
 8009126:	2800      	cmp	r0, #0
 8009128:	d062      	beq.n	80091f0 <__gethex+0x12a>
 800912a:	4633      	mov	r3, r6
 800912c:	7818      	ldrb	r0, [r3, #0]
 800912e:	2830      	cmp	r0, #48	; 0x30
 8009130:	461f      	mov	r7, r3
 8009132:	f103 0301 	add.w	r3, r3, #1
 8009136:	d0f9      	beq.n	800912c <__gethex+0x66>
 8009138:	f7ff ffb0 	bl	800909c <__hexdig_fun>
 800913c:	fab0 f580 	clz	r5, r0
 8009140:	096d      	lsrs	r5, r5, #5
 8009142:	4634      	mov	r4, r6
 8009144:	f04f 0b01 	mov.w	fp, #1
 8009148:	463a      	mov	r2, r7
 800914a:	4616      	mov	r6, r2
 800914c:	3201      	adds	r2, #1
 800914e:	7830      	ldrb	r0, [r6, #0]
 8009150:	f7ff ffa4 	bl	800909c <__hexdig_fun>
 8009154:	2800      	cmp	r0, #0
 8009156:	d1f8      	bne.n	800914a <__gethex+0x84>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	9903      	ldr	r1, [sp, #12]
 800915c:	4630      	mov	r0, r6
 800915e:	f001 f8cf 	bl	800a300 <strncmp>
 8009162:	b950      	cbnz	r0, 800917a <__gethex+0xb4>
 8009164:	b954      	cbnz	r4, 800917c <__gethex+0xb6>
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	18f4      	adds	r4, r6, r3
 800916a:	4622      	mov	r2, r4
 800916c:	4616      	mov	r6, r2
 800916e:	3201      	adds	r2, #1
 8009170:	7830      	ldrb	r0, [r6, #0]
 8009172:	f7ff ff93 	bl	800909c <__hexdig_fun>
 8009176:	2800      	cmp	r0, #0
 8009178:	d1f8      	bne.n	800916c <__gethex+0xa6>
 800917a:	b10c      	cbz	r4, 8009180 <__gethex+0xba>
 800917c:	1ba4      	subs	r4, r4, r6
 800917e:	00a4      	lsls	r4, r4, #2
 8009180:	7833      	ldrb	r3, [r6, #0]
 8009182:	2b50      	cmp	r3, #80	; 0x50
 8009184:	d001      	beq.n	800918a <__gethex+0xc4>
 8009186:	2b70      	cmp	r3, #112	; 0x70
 8009188:	d140      	bne.n	800920c <__gethex+0x146>
 800918a:	7873      	ldrb	r3, [r6, #1]
 800918c:	2b2b      	cmp	r3, #43	; 0x2b
 800918e:	d031      	beq.n	80091f4 <__gethex+0x12e>
 8009190:	2b2d      	cmp	r3, #45	; 0x2d
 8009192:	d033      	beq.n	80091fc <__gethex+0x136>
 8009194:	1c71      	adds	r1, r6, #1
 8009196:	f04f 0900 	mov.w	r9, #0
 800919a:	7808      	ldrb	r0, [r1, #0]
 800919c:	f7ff ff7e 	bl	800909c <__hexdig_fun>
 80091a0:	1e43      	subs	r3, r0, #1
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b18      	cmp	r3, #24
 80091a6:	d831      	bhi.n	800920c <__gethex+0x146>
 80091a8:	f1a0 0210 	sub.w	r2, r0, #16
 80091ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091b0:	f7ff ff74 	bl	800909c <__hexdig_fun>
 80091b4:	1e43      	subs	r3, r0, #1
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b18      	cmp	r3, #24
 80091ba:	d922      	bls.n	8009202 <__gethex+0x13c>
 80091bc:	f1b9 0f00 	cmp.w	r9, #0
 80091c0:	d000      	beq.n	80091c4 <__gethex+0xfe>
 80091c2:	4252      	negs	r2, r2
 80091c4:	4414      	add	r4, r2
 80091c6:	f8ca 1000 	str.w	r1, [sl]
 80091ca:	b30d      	cbz	r5, 8009210 <__gethex+0x14a>
 80091cc:	f1bb 0f00 	cmp.w	fp, #0
 80091d0:	bf0c      	ite	eq
 80091d2:	2706      	moveq	r7, #6
 80091d4:	2700      	movne	r7, #0
 80091d6:	4638      	mov	r0, r7
 80091d8:	b00b      	add	sp, #44	; 0x2c
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091de:	f10b 0b01 	add.w	fp, fp, #1
 80091e2:	e78a      	b.n	80090fa <__gethex+0x34>
 80091e4:	2500      	movs	r5, #0
 80091e6:	462c      	mov	r4, r5
 80091e8:	e7ae      	b.n	8009148 <__gethex+0x82>
 80091ea:	463e      	mov	r6, r7
 80091ec:	2501      	movs	r5, #1
 80091ee:	e7c7      	b.n	8009180 <__gethex+0xba>
 80091f0:	4604      	mov	r4, r0
 80091f2:	e7fb      	b.n	80091ec <__gethex+0x126>
 80091f4:	f04f 0900 	mov.w	r9, #0
 80091f8:	1cb1      	adds	r1, r6, #2
 80091fa:	e7ce      	b.n	800919a <__gethex+0xd4>
 80091fc:	f04f 0901 	mov.w	r9, #1
 8009200:	e7fa      	b.n	80091f8 <__gethex+0x132>
 8009202:	230a      	movs	r3, #10
 8009204:	fb03 0202 	mla	r2, r3, r2, r0
 8009208:	3a10      	subs	r2, #16
 800920a:	e7cf      	b.n	80091ac <__gethex+0xe6>
 800920c:	4631      	mov	r1, r6
 800920e:	e7da      	b.n	80091c6 <__gethex+0x100>
 8009210:	1bf3      	subs	r3, r6, r7
 8009212:	3b01      	subs	r3, #1
 8009214:	4629      	mov	r1, r5
 8009216:	2b07      	cmp	r3, #7
 8009218:	dc49      	bgt.n	80092ae <__gethex+0x1e8>
 800921a:	9802      	ldr	r0, [sp, #8]
 800921c:	f000 fa58 	bl	80096d0 <_Balloc>
 8009220:	9b01      	ldr	r3, [sp, #4]
 8009222:	f100 0914 	add.w	r9, r0, #20
 8009226:	f04f 0b00 	mov.w	fp, #0
 800922a:	f1c3 0301 	rsb	r3, r3, #1
 800922e:	4605      	mov	r5, r0
 8009230:	f8cd 9010 	str.w	r9, [sp, #16]
 8009234:	46da      	mov	sl, fp
 8009236:	9308      	str	r3, [sp, #32]
 8009238:	42b7      	cmp	r7, r6
 800923a:	d33b      	bcc.n	80092b4 <__gethex+0x1ee>
 800923c:	9804      	ldr	r0, [sp, #16]
 800923e:	f840 ab04 	str.w	sl, [r0], #4
 8009242:	eba0 0009 	sub.w	r0, r0, r9
 8009246:	1080      	asrs	r0, r0, #2
 8009248:	6128      	str	r0, [r5, #16]
 800924a:	0147      	lsls	r7, r0, #5
 800924c:	4650      	mov	r0, sl
 800924e:	f000 fb03 	bl	8009858 <__hi0bits>
 8009252:	f8d8 6000 	ldr.w	r6, [r8]
 8009256:	1a3f      	subs	r7, r7, r0
 8009258:	42b7      	cmp	r7, r6
 800925a:	dd64      	ble.n	8009326 <__gethex+0x260>
 800925c:	1bbf      	subs	r7, r7, r6
 800925e:	4639      	mov	r1, r7
 8009260:	4628      	mov	r0, r5
 8009262:	f000 fe14 	bl	8009e8e <__any_on>
 8009266:	4682      	mov	sl, r0
 8009268:	b178      	cbz	r0, 800928a <__gethex+0x1c4>
 800926a:	1e7b      	subs	r3, r7, #1
 800926c:	1159      	asrs	r1, r3, #5
 800926e:	f003 021f 	and.w	r2, r3, #31
 8009272:	f04f 0a01 	mov.w	sl, #1
 8009276:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800927a:	fa0a f202 	lsl.w	r2, sl, r2
 800927e:	420a      	tst	r2, r1
 8009280:	d003      	beq.n	800928a <__gethex+0x1c4>
 8009282:	4553      	cmp	r3, sl
 8009284:	dc46      	bgt.n	8009314 <__gethex+0x24e>
 8009286:	f04f 0a02 	mov.w	sl, #2
 800928a:	4639      	mov	r1, r7
 800928c:	4628      	mov	r0, r5
 800928e:	f7ff fecb 	bl	8009028 <rshift>
 8009292:	443c      	add	r4, r7
 8009294:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009298:	42a3      	cmp	r3, r4
 800929a:	da52      	bge.n	8009342 <__gethex+0x27c>
 800929c:	4629      	mov	r1, r5
 800929e:	9802      	ldr	r0, [sp, #8]
 80092a0:	f000 fa4a 	bl	8009738 <_Bfree>
 80092a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092a6:	2300      	movs	r3, #0
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	27a3      	movs	r7, #163	; 0xa3
 80092ac:	e793      	b.n	80091d6 <__gethex+0x110>
 80092ae:	3101      	adds	r1, #1
 80092b0:	105b      	asrs	r3, r3, #1
 80092b2:	e7b0      	b.n	8009216 <__gethex+0x150>
 80092b4:	1e73      	subs	r3, r6, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	9a07      	ldr	r2, [sp, #28]
 80092ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092be:	4293      	cmp	r3, r2
 80092c0:	d018      	beq.n	80092f4 <__gethex+0x22e>
 80092c2:	f1bb 0f20 	cmp.w	fp, #32
 80092c6:	d107      	bne.n	80092d8 <__gethex+0x212>
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	f8c3 a000 	str.w	sl, [r3]
 80092ce:	3304      	adds	r3, #4
 80092d0:	f04f 0a00 	mov.w	sl, #0
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	46d3      	mov	fp, sl
 80092d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80092dc:	f7ff fede 	bl	800909c <__hexdig_fun>
 80092e0:	f000 000f 	and.w	r0, r0, #15
 80092e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80092e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80092ec:	f10b 0b04 	add.w	fp, fp, #4
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	e00d      	b.n	8009310 <__gethex+0x24a>
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	9a08      	ldr	r2, [sp, #32]
 80092f8:	4413      	add	r3, r2
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	d3e1      	bcc.n	80092c2 <__gethex+0x1fc>
 80092fe:	4618      	mov	r0, r3
 8009300:	9a01      	ldr	r2, [sp, #4]
 8009302:	9903      	ldr	r1, [sp, #12]
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	f000 fffb 	bl	800a300 <strncmp>
 800930a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930c:	2800      	cmp	r0, #0
 800930e:	d1d8      	bne.n	80092c2 <__gethex+0x1fc>
 8009310:	461e      	mov	r6, r3
 8009312:	e791      	b.n	8009238 <__gethex+0x172>
 8009314:	1eb9      	subs	r1, r7, #2
 8009316:	4628      	mov	r0, r5
 8009318:	f000 fdb9 	bl	8009e8e <__any_on>
 800931c:	2800      	cmp	r0, #0
 800931e:	d0b2      	beq.n	8009286 <__gethex+0x1c0>
 8009320:	f04f 0a03 	mov.w	sl, #3
 8009324:	e7b1      	b.n	800928a <__gethex+0x1c4>
 8009326:	da09      	bge.n	800933c <__gethex+0x276>
 8009328:	1bf7      	subs	r7, r6, r7
 800932a:	4629      	mov	r1, r5
 800932c:	463a      	mov	r2, r7
 800932e:	9802      	ldr	r0, [sp, #8]
 8009330:	f000 fbce 	bl	8009ad0 <__lshift>
 8009334:	1be4      	subs	r4, r4, r7
 8009336:	4605      	mov	r5, r0
 8009338:	f100 0914 	add.w	r9, r0, #20
 800933c:	f04f 0a00 	mov.w	sl, #0
 8009340:	e7a8      	b.n	8009294 <__gethex+0x1ce>
 8009342:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009346:	42a0      	cmp	r0, r4
 8009348:	dd6a      	ble.n	8009420 <__gethex+0x35a>
 800934a:	1b04      	subs	r4, r0, r4
 800934c:	42a6      	cmp	r6, r4
 800934e:	dc2e      	bgt.n	80093ae <__gethex+0x2e8>
 8009350:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d022      	beq.n	800939e <__gethex+0x2d8>
 8009358:	2b03      	cmp	r3, #3
 800935a:	d024      	beq.n	80093a6 <__gethex+0x2e0>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d115      	bne.n	800938c <__gethex+0x2c6>
 8009360:	42a6      	cmp	r6, r4
 8009362:	d113      	bne.n	800938c <__gethex+0x2c6>
 8009364:	2e01      	cmp	r6, #1
 8009366:	dc0b      	bgt.n	8009380 <__gethex+0x2ba>
 8009368:	9a06      	ldr	r2, [sp, #24]
 800936a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	2301      	movs	r3, #1
 8009372:	612b      	str	r3, [r5, #16]
 8009374:	f8c9 3000 	str.w	r3, [r9]
 8009378:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800937a:	2762      	movs	r7, #98	; 0x62
 800937c:	601d      	str	r5, [r3, #0]
 800937e:	e72a      	b.n	80091d6 <__gethex+0x110>
 8009380:	1e71      	subs	r1, r6, #1
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fd83 	bl	8009e8e <__any_on>
 8009388:	2800      	cmp	r0, #0
 800938a:	d1ed      	bne.n	8009368 <__gethex+0x2a2>
 800938c:	4629      	mov	r1, r5
 800938e:	9802      	ldr	r0, [sp, #8]
 8009390:	f000 f9d2 	bl	8009738 <_Bfree>
 8009394:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009396:	2300      	movs	r3, #0
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	2750      	movs	r7, #80	; 0x50
 800939c:	e71b      	b.n	80091d6 <__gethex+0x110>
 800939e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d0e1      	beq.n	8009368 <__gethex+0x2a2>
 80093a4:	e7f2      	b.n	800938c <__gethex+0x2c6>
 80093a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1dd      	bne.n	8009368 <__gethex+0x2a2>
 80093ac:	e7ee      	b.n	800938c <__gethex+0x2c6>
 80093ae:	1e67      	subs	r7, r4, #1
 80093b0:	f1ba 0f00 	cmp.w	sl, #0
 80093b4:	d131      	bne.n	800941a <__gethex+0x354>
 80093b6:	b127      	cbz	r7, 80093c2 <__gethex+0x2fc>
 80093b8:	4639      	mov	r1, r7
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 fd67 	bl	8009e8e <__any_on>
 80093c0:	4682      	mov	sl, r0
 80093c2:	117a      	asrs	r2, r7, #5
 80093c4:	2301      	movs	r3, #1
 80093c6:	f007 071f 	and.w	r7, r7, #31
 80093ca:	fa03 f707 	lsl.w	r7, r3, r7
 80093ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80093d2:	4621      	mov	r1, r4
 80093d4:	421f      	tst	r7, r3
 80093d6:	4628      	mov	r0, r5
 80093d8:	bf18      	it	ne
 80093da:	f04a 0a02 	orrne.w	sl, sl, #2
 80093de:	1b36      	subs	r6, r6, r4
 80093e0:	f7ff fe22 	bl	8009028 <rshift>
 80093e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80093e8:	2702      	movs	r7, #2
 80093ea:	f1ba 0f00 	cmp.w	sl, #0
 80093ee:	d048      	beq.n	8009482 <__gethex+0x3bc>
 80093f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d015      	beq.n	8009424 <__gethex+0x35e>
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d017      	beq.n	800942c <__gethex+0x366>
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d109      	bne.n	8009414 <__gethex+0x34e>
 8009400:	f01a 0f02 	tst.w	sl, #2
 8009404:	d006      	beq.n	8009414 <__gethex+0x34e>
 8009406:	f8d9 3000 	ldr.w	r3, [r9]
 800940a:	ea4a 0a03 	orr.w	sl, sl, r3
 800940e:	f01a 0f01 	tst.w	sl, #1
 8009412:	d10e      	bne.n	8009432 <__gethex+0x36c>
 8009414:	f047 0710 	orr.w	r7, r7, #16
 8009418:	e033      	b.n	8009482 <__gethex+0x3bc>
 800941a:	f04f 0a01 	mov.w	sl, #1
 800941e:	e7d0      	b.n	80093c2 <__gethex+0x2fc>
 8009420:	2701      	movs	r7, #1
 8009422:	e7e2      	b.n	80093ea <__gethex+0x324>
 8009424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009426:	f1c3 0301 	rsb	r3, r3, #1
 800942a:	9315      	str	r3, [sp, #84]	; 0x54
 800942c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0f0      	beq.n	8009414 <__gethex+0x34e>
 8009432:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009436:	f105 0314 	add.w	r3, r5, #20
 800943a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800943e:	eb03 010a 	add.w	r1, r3, sl
 8009442:	f04f 0c00 	mov.w	ip, #0
 8009446:	4618      	mov	r0, r3
 8009448:	f853 2b04 	ldr.w	r2, [r3], #4
 800944c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009450:	d01c      	beq.n	800948c <__gethex+0x3c6>
 8009452:	3201      	adds	r2, #1
 8009454:	6002      	str	r2, [r0, #0]
 8009456:	2f02      	cmp	r7, #2
 8009458:	f105 0314 	add.w	r3, r5, #20
 800945c:	d138      	bne.n	80094d0 <__gethex+0x40a>
 800945e:	f8d8 2000 	ldr.w	r2, [r8]
 8009462:	3a01      	subs	r2, #1
 8009464:	42b2      	cmp	r2, r6
 8009466:	d10a      	bne.n	800947e <__gethex+0x3b8>
 8009468:	1171      	asrs	r1, r6, #5
 800946a:	2201      	movs	r2, #1
 800946c:	f006 061f 	and.w	r6, r6, #31
 8009470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009474:	fa02 f606 	lsl.w	r6, r2, r6
 8009478:	421e      	tst	r6, r3
 800947a:	bf18      	it	ne
 800947c:	4617      	movne	r7, r2
 800947e:	f047 0720 	orr.w	r7, r7, #32
 8009482:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009484:	601d      	str	r5, [r3, #0]
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	601c      	str	r4, [r3, #0]
 800948a:	e6a4      	b.n	80091d6 <__gethex+0x110>
 800948c:	4299      	cmp	r1, r3
 800948e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009492:	d8d8      	bhi.n	8009446 <__gethex+0x380>
 8009494:	68ab      	ldr	r3, [r5, #8]
 8009496:	4599      	cmp	r9, r3
 8009498:	db12      	blt.n	80094c0 <__gethex+0x3fa>
 800949a:	6869      	ldr	r1, [r5, #4]
 800949c:	9802      	ldr	r0, [sp, #8]
 800949e:	3101      	adds	r1, #1
 80094a0:	f000 f916 	bl	80096d0 <_Balloc>
 80094a4:	692a      	ldr	r2, [r5, #16]
 80094a6:	3202      	adds	r2, #2
 80094a8:	f105 010c 	add.w	r1, r5, #12
 80094ac:	4683      	mov	fp, r0
 80094ae:	0092      	lsls	r2, r2, #2
 80094b0:	300c      	adds	r0, #12
 80094b2:	f7fd fb05 	bl	8006ac0 <memcpy>
 80094b6:	4629      	mov	r1, r5
 80094b8:	9802      	ldr	r0, [sp, #8]
 80094ba:	f000 f93d 	bl	8009738 <_Bfree>
 80094be:	465d      	mov	r5, fp
 80094c0:	692b      	ldr	r3, [r5, #16]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80094c8:	612a      	str	r2, [r5, #16]
 80094ca:	2201      	movs	r2, #1
 80094cc:	615a      	str	r2, [r3, #20]
 80094ce:	e7c2      	b.n	8009456 <__gethex+0x390>
 80094d0:	692a      	ldr	r2, [r5, #16]
 80094d2:	454a      	cmp	r2, r9
 80094d4:	dd0b      	ble.n	80094ee <__gethex+0x428>
 80094d6:	2101      	movs	r1, #1
 80094d8:	4628      	mov	r0, r5
 80094da:	f7ff fda5 	bl	8009028 <rshift>
 80094de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094e2:	3401      	adds	r4, #1
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	f6ff aed9 	blt.w	800929c <__gethex+0x1d6>
 80094ea:	2701      	movs	r7, #1
 80094ec:	e7c7      	b.n	800947e <__gethex+0x3b8>
 80094ee:	f016 061f 	ands.w	r6, r6, #31
 80094f2:	d0fa      	beq.n	80094ea <__gethex+0x424>
 80094f4:	449a      	add	sl, r3
 80094f6:	f1c6 0620 	rsb	r6, r6, #32
 80094fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80094fe:	f000 f9ab 	bl	8009858 <__hi0bits>
 8009502:	42b0      	cmp	r0, r6
 8009504:	dbe7      	blt.n	80094d6 <__gethex+0x410>
 8009506:	e7f0      	b.n	80094ea <__gethex+0x424>

08009508 <L_shift>:
 8009508:	f1c2 0208 	rsb	r2, r2, #8
 800950c:	0092      	lsls	r2, r2, #2
 800950e:	b570      	push	{r4, r5, r6, lr}
 8009510:	f1c2 0620 	rsb	r6, r2, #32
 8009514:	6843      	ldr	r3, [r0, #4]
 8009516:	6804      	ldr	r4, [r0, #0]
 8009518:	fa03 f506 	lsl.w	r5, r3, r6
 800951c:	432c      	orrs	r4, r5
 800951e:	40d3      	lsrs	r3, r2
 8009520:	6004      	str	r4, [r0, #0]
 8009522:	f840 3f04 	str.w	r3, [r0, #4]!
 8009526:	4288      	cmp	r0, r1
 8009528:	d3f4      	bcc.n	8009514 <L_shift+0xc>
 800952a:	bd70      	pop	{r4, r5, r6, pc}

0800952c <__match>:
 800952c:	b530      	push	{r4, r5, lr}
 800952e:	6803      	ldr	r3, [r0, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009536:	b914      	cbnz	r4, 800953e <__match+0x12>
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	2001      	movs	r0, #1
 800953c:	bd30      	pop	{r4, r5, pc}
 800953e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009546:	2d19      	cmp	r5, #25
 8009548:	bf98      	it	ls
 800954a:	3220      	addls	r2, #32
 800954c:	42a2      	cmp	r2, r4
 800954e:	d0f0      	beq.n	8009532 <__match+0x6>
 8009550:	2000      	movs	r0, #0
 8009552:	e7f3      	b.n	800953c <__match+0x10>

08009554 <__hexnan>:
 8009554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	680b      	ldr	r3, [r1, #0]
 800955a:	6801      	ldr	r1, [r0, #0]
 800955c:	115f      	asrs	r7, r3, #5
 800955e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009562:	f013 031f 	ands.w	r3, r3, #31
 8009566:	b087      	sub	sp, #28
 8009568:	bf18      	it	ne
 800956a:	3704      	addne	r7, #4
 800956c:	2500      	movs	r5, #0
 800956e:	1f3e      	subs	r6, r7, #4
 8009570:	4682      	mov	sl, r0
 8009572:	4690      	mov	r8, r2
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	f847 5c04 	str.w	r5, [r7, #-4]
 800957a:	46b1      	mov	r9, r6
 800957c:	4634      	mov	r4, r6
 800957e:	9502      	str	r5, [sp, #8]
 8009580:	46ab      	mov	fp, r5
 8009582:	784a      	ldrb	r2, [r1, #1]
 8009584:	1c4b      	adds	r3, r1, #1
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	b342      	cbz	r2, 80095dc <__hexnan+0x88>
 800958a:	4610      	mov	r0, r2
 800958c:	9105      	str	r1, [sp, #20]
 800958e:	9204      	str	r2, [sp, #16]
 8009590:	f7ff fd84 	bl	800909c <__hexdig_fun>
 8009594:	2800      	cmp	r0, #0
 8009596:	d143      	bne.n	8009620 <__hexnan+0xcc>
 8009598:	9a04      	ldr	r2, [sp, #16]
 800959a:	9905      	ldr	r1, [sp, #20]
 800959c:	2a20      	cmp	r2, #32
 800959e:	d818      	bhi.n	80095d2 <__hexnan+0x7e>
 80095a0:	9b02      	ldr	r3, [sp, #8]
 80095a2:	459b      	cmp	fp, r3
 80095a4:	dd13      	ble.n	80095ce <__hexnan+0x7a>
 80095a6:	454c      	cmp	r4, r9
 80095a8:	d206      	bcs.n	80095b8 <__hexnan+0x64>
 80095aa:	2d07      	cmp	r5, #7
 80095ac:	dc04      	bgt.n	80095b8 <__hexnan+0x64>
 80095ae:	462a      	mov	r2, r5
 80095b0:	4649      	mov	r1, r9
 80095b2:	4620      	mov	r0, r4
 80095b4:	f7ff ffa8 	bl	8009508 <L_shift>
 80095b8:	4544      	cmp	r4, r8
 80095ba:	d944      	bls.n	8009646 <__hexnan+0xf2>
 80095bc:	2300      	movs	r3, #0
 80095be:	f1a4 0904 	sub.w	r9, r4, #4
 80095c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80095c6:	f8cd b008 	str.w	fp, [sp, #8]
 80095ca:	464c      	mov	r4, r9
 80095cc:	461d      	mov	r5, r3
 80095ce:	9903      	ldr	r1, [sp, #12]
 80095d0:	e7d7      	b.n	8009582 <__hexnan+0x2e>
 80095d2:	2a29      	cmp	r2, #41	; 0x29
 80095d4:	d14a      	bne.n	800966c <__hexnan+0x118>
 80095d6:	3102      	adds	r1, #2
 80095d8:	f8ca 1000 	str.w	r1, [sl]
 80095dc:	f1bb 0f00 	cmp.w	fp, #0
 80095e0:	d044      	beq.n	800966c <__hexnan+0x118>
 80095e2:	454c      	cmp	r4, r9
 80095e4:	d206      	bcs.n	80095f4 <__hexnan+0xa0>
 80095e6:	2d07      	cmp	r5, #7
 80095e8:	dc04      	bgt.n	80095f4 <__hexnan+0xa0>
 80095ea:	462a      	mov	r2, r5
 80095ec:	4649      	mov	r1, r9
 80095ee:	4620      	mov	r0, r4
 80095f0:	f7ff ff8a 	bl	8009508 <L_shift>
 80095f4:	4544      	cmp	r4, r8
 80095f6:	d928      	bls.n	800964a <__hexnan+0xf6>
 80095f8:	4643      	mov	r3, r8
 80095fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80095fe:	f843 2b04 	str.w	r2, [r3], #4
 8009602:	42a6      	cmp	r6, r4
 8009604:	d2f9      	bcs.n	80095fa <__hexnan+0xa6>
 8009606:	2200      	movs	r2, #0
 8009608:	f843 2b04 	str.w	r2, [r3], #4
 800960c:	429e      	cmp	r6, r3
 800960e:	d2fb      	bcs.n	8009608 <__hexnan+0xb4>
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	b91b      	cbnz	r3, 800961c <__hexnan+0xc8>
 8009614:	4546      	cmp	r6, r8
 8009616:	d127      	bne.n	8009668 <__hexnan+0x114>
 8009618:	2301      	movs	r3, #1
 800961a:	6033      	str	r3, [r6, #0]
 800961c:	2005      	movs	r0, #5
 800961e:	e026      	b.n	800966e <__hexnan+0x11a>
 8009620:	3501      	adds	r5, #1
 8009622:	2d08      	cmp	r5, #8
 8009624:	f10b 0b01 	add.w	fp, fp, #1
 8009628:	dd06      	ble.n	8009638 <__hexnan+0xe4>
 800962a:	4544      	cmp	r4, r8
 800962c:	d9cf      	bls.n	80095ce <__hexnan+0x7a>
 800962e:	2300      	movs	r3, #0
 8009630:	f844 3c04 	str.w	r3, [r4, #-4]
 8009634:	2501      	movs	r5, #1
 8009636:	3c04      	subs	r4, #4
 8009638:	6822      	ldr	r2, [r4, #0]
 800963a:	f000 000f 	and.w	r0, r0, #15
 800963e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009642:	6020      	str	r0, [r4, #0]
 8009644:	e7c3      	b.n	80095ce <__hexnan+0x7a>
 8009646:	2508      	movs	r5, #8
 8009648:	e7c1      	b.n	80095ce <__hexnan+0x7a>
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0df      	beq.n	8009610 <__hexnan+0xbc>
 8009650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009654:	f1c3 0320 	rsb	r3, r3, #32
 8009658:	fa22 f303 	lsr.w	r3, r2, r3
 800965c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009660:	401a      	ands	r2, r3
 8009662:	f847 2c04 	str.w	r2, [r7, #-4]
 8009666:	e7d3      	b.n	8009610 <__hexnan+0xbc>
 8009668:	3e04      	subs	r6, #4
 800966a:	e7d1      	b.n	8009610 <__hexnan+0xbc>
 800966c:	2004      	movs	r0, #4
 800966e:	b007      	add	sp, #28
 8009670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009674 <__locale_ctype_ptr_l>:
 8009674:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009678:	4770      	bx	lr

0800967a <__localeconv_l>:
 800967a:	30f0      	adds	r0, #240	; 0xf0
 800967c:	4770      	bx	lr
	...

08009680 <_localeconv_r>:
 8009680:	4b04      	ldr	r3, [pc, #16]	; (8009694 <_localeconv_r+0x14>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a18      	ldr	r0, [r3, #32]
 8009686:	4b04      	ldr	r3, [pc, #16]	; (8009698 <_localeconv_r+0x18>)
 8009688:	2800      	cmp	r0, #0
 800968a:	bf08      	it	eq
 800968c:	4618      	moveq	r0, r3
 800968e:	30f0      	adds	r0, #240	; 0xf0
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	20000018 	.word	0x20000018
 8009698:	2000007c 	.word	0x2000007c

0800969c <malloc>:
 800969c:	4b02      	ldr	r3, [pc, #8]	; (80096a8 <malloc+0xc>)
 800969e:	4601      	mov	r1, r0
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f000 bc71 	b.w	8009f88 <_malloc_r>
 80096a6:	bf00      	nop
 80096a8:	20000018 	.word	0x20000018

080096ac <__ascii_mbtowc>:
 80096ac:	b082      	sub	sp, #8
 80096ae:	b901      	cbnz	r1, 80096b2 <__ascii_mbtowc+0x6>
 80096b0:	a901      	add	r1, sp, #4
 80096b2:	b142      	cbz	r2, 80096c6 <__ascii_mbtowc+0x1a>
 80096b4:	b14b      	cbz	r3, 80096ca <__ascii_mbtowc+0x1e>
 80096b6:	7813      	ldrb	r3, [r2, #0]
 80096b8:	600b      	str	r3, [r1, #0]
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	1c10      	adds	r0, r2, #0
 80096be:	bf18      	it	ne
 80096c0:	2001      	movne	r0, #1
 80096c2:	b002      	add	sp, #8
 80096c4:	4770      	bx	lr
 80096c6:	4610      	mov	r0, r2
 80096c8:	e7fb      	b.n	80096c2 <__ascii_mbtowc+0x16>
 80096ca:	f06f 0001 	mvn.w	r0, #1
 80096ce:	e7f8      	b.n	80096c2 <__ascii_mbtowc+0x16>

080096d0 <_Balloc>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096d4:	4604      	mov	r4, r0
 80096d6:	460e      	mov	r6, r1
 80096d8:	b93d      	cbnz	r5, 80096ea <_Balloc+0x1a>
 80096da:	2010      	movs	r0, #16
 80096dc:	f7ff ffde 	bl	800969c <malloc>
 80096e0:	6260      	str	r0, [r4, #36]	; 0x24
 80096e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096e6:	6005      	str	r5, [r0, #0]
 80096e8:	60c5      	str	r5, [r0, #12]
 80096ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80096ec:	68eb      	ldr	r3, [r5, #12]
 80096ee:	b183      	cbz	r3, 8009712 <_Balloc+0x42>
 80096f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80096f8:	b9b8      	cbnz	r0, 800972a <_Balloc+0x5a>
 80096fa:	2101      	movs	r1, #1
 80096fc:	fa01 f506 	lsl.w	r5, r1, r6
 8009700:	1d6a      	adds	r2, r5, #5
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	4620      	mov	r0, r4
 8009706:	f000 fbe3 	bl	8009ed0 <_calloc_r>
 800970a:	b160      	cbz	r0, 8009726 <_Balloc+0x56>
 800970c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009710:	e00e      	b.n	8009730 <_Balloc+0x60>
 8009712:	2221      	movs	r2, #33	; 0x21
 8009714:	2104      	movs	r1, #4
 8009716:	4620      	mov	r0, r4
 8009718:	f000 fbda 	bl	8009ed0 <_calloc_r>
 800971c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971e:	60e8      	str	r0, [r5, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e4      	bne.n	80096f0 <_Balloc+0x20>
 8009726:	2000      	movs	r0, #0
 8009728:	bd70      	pop	{r4, r5, r6, pc}
 800972a:	6802      	ldr	r2, [r0, #0]
 800972c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009730:	2300      	movs	r3, #0
 8009732:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009736:	e7f7      	b.n	8009728 <_Balloc+0x58>

08009738 <_Bfree>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800973c:	4606      	mov	r6, r0
 800973e:	460d      	mov	r5, r1
 8009740:	b93c      	cbnz	r4, 8009752 <_Bfree+0x1a>
 8009742:	2010      	movs	r0, #16
 8009744:	f7ff ffaa 	bl	800969c <malloc>
 8009748:	6270      	str	r0, [r6, #36]	; 0x24
 800974a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800974e:	6004      	str	r4, [r0, #0]
 8009750:	60c4      	str	r4, [r0, #12]
 8009752:	b13d      	cbz	r5, 8009764 <_Bfree+0x2c>
 8009754:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009756:	686a      	ldr	r2, [r5, #4]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800975e:	6029      	str	r1, [r5, #0]
 8009760:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009764:	bd70      	pop	{r4, r5, r6, pc}

08009766 <__multadd>:
 8009766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	690d      	ldr	r5, [r1, #16]
 800976c:	461f      	mov	r7, r3
 800976e:	4606      	mov	r6, r0
 8009770:	460c      	mov	r4, r1
 8009772:	f101 0c14 	add.w	ip, r1, #20
 8009776:	2300      	movs	r3, #0
 8009778:	f8dc 0000 	ldr.w	r0, [ip]
 800977c:	b281      	uxth	r1, r0
 800977e:	fb02 7101 	mla	r1, r2, r1, r7
 8009782:	0c0f      	lsrs	r7, r1, #16
 8009784:	0c00      	lsrs	r0, r0, #16
 8009786:	fb02 7000 	mla	r0, r2, r0, r7
 800978a:	b289      	uxth	r1, r1
 800978c:	3301      	adds	r3, #1
 800978e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009792:	429d      	cmp	r5, r3
 8009794:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009798:	f84c 1b04 	str.w	r1, [ip], #4
 800979c:	dcec      	bgt.n	8009778 <__multadd+0x12>
 800979e:	b1d7      	cbz	r7, 80097d6 <__multadd+0x70>
 80097a0:	68a3      	ldr	r3, [r4, #8]
 80097a2:	42ab      	cmp	r3, r5
 80097a4:	dc12      	bgt.n	80097cc <__multadd+0x66>
 80097a6:	6861      	ldr	r1, [r4, #4]
 80097a8:	4630      	mov	r0, r6
 80097aa:	3101      	adds	r1, #1
 80097ac:	f7ff ff90 	bl	80096d0 <_Balloc>
 80097b0:	6922      	ldr	r2, [r4, #16]
 80097b2:	3202      	adds	r2, #2
 80097b4:	f104 010c 	add.w	r1, r4, #12
 80097b8:	4680      	mov	r8, r0
 80097ba:	0092      	lsls	r2, r2, #2
 80097bc:	300c      	adds	r0, #12
 80097be:	f7fd f97f 	bl	8006ac0 <memcpy>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4630      	mov	r0, r6
 80097c6:	f7ff ffb7 	bl	8009738 <_Bfree>
 80097ca:	4644      	mov	r4, r8
 80097cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097d0:	3501      	adds	r5, #1
 80097d2:	615f      	str	r7, [r3, #20]
 80097d4:	6125      	str	r5, [r4, #16]
 80097d6:	4620      	mov	r0, r4
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097dc <__s2b>:
 80097dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e0:	460c      	mov	r4, r1
 80097e2:	4615      	mov	r5, r2
 80097e4:	461f      	mov	r7, r3
 80097e6:	2209      	movs	r2, #9
 80097e8:	3308      	adds	r3, #8
 80097ea:	4606      	mov	r6, r0
 80097ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f0:	2100      	movs	r1, #0
 80097f2:	2201      	movs	r2, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	db20      	blt.n	800983a <__s2b+0x5e>
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff ff69 	bl	80096d0 <_Balloc>
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	6143      	str	r3, [r0, #20]
 8009802:	2d09      	cmp	r5, #9
 8009804:	f04f 0301 	mov.w	r3, #1
 8009808:	6103      	str	r3, [r0, #16]
 800980a:	dd19      	ble.n	8009840 <__s2b+0x64>
 800980c:	f104 0809 	add.w	r8, r4, #9
 8009810:	46c1      	mov	r9, r8
 8009812:	442c      	add	r4, r5
 8009814:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009818:	4601      	mov	r1, r0
 800981a:	3b30      	subs	r3, #48	; 0x30
 800981c:	220a      	movs	r2, #10
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ffa1 	bl	8009766 <__multadd>
 8009824:	45a1      	cmp	r9, r4
 8009826:	d1f5      	bne.n	8009814 <__s2b+0x38>
 8009828:	eb08 0405 	add.w	r4, r8, r5
 800982c:	3c08      	subs	r4, #8
 800982e:	1b2d      	subs	r5, r5, r4
 8009830:	1963      	adds	r3, r4, r5
 8009832:	42bb      	cmp	r3, r7
 8009834:	db07      	blt.n	8009846 <__s2b+0x6a>
 8009836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800983a:	0052      	lsls	r2, r2, #1
 800983c:	3101      	adds	r1, #1
 800983e:	e7d9      	b.n	80097f4 <__s2b+0x18>
 8009840:	340a      	adds	r4, #10
 8009842:	2509      	movs	r5, #9
 8009844:	e7f3      	b.n	800982e <__s2b+0x52>
 8009846:	f814 3b01 	ldrb.w	r3, [r4], #1
 800984a:	4601      	mov	r1, r0
 800984c:	3b30      	subs	r3, #48	; 0x30
 800984e:	220a      	movs	r2, #10
 8009850:	4630      	mov	r0, r6
 8009852:	f7ff ff88 	bl	8009766 <__multadd>
 8009856:	e7eb      	b.n	8009830 <__s2b+0x54>

08009858 <__hi0bits>:
 8009858:	0c02      	lsrs	r2, r0, #16
 800985a:	0412      	lsls	r2, r2, #16
 800985c:	4603      	mov	r3, r0
 800985e:	b9b2      	cbnz	r2, 800988e <__hi0bits+0x36>
 8009860:	0403      	lsls	r3, r0, #16
 8009862:	2010      	movs	r0, #16
 8009864:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009868:	bf04      	itt	eq
 800986a:	021b      	lsleq	r3, r3, #8
 800986c:	3008      	addeq	r0, #8
 800986e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009872:	bf04      	itt	eq
 8009874:	011b      	lsleq	r3, r3, #4
 8009876:	3004      	addeq	r0, #4
 8009878:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800987c:	bf04      	itt	eq
 800987e:	009b      	lsleq	r3, r3, #2
 8009880:	3002      	addeq	r0, #2
 8009882:	2b00      	cmp	r3, #0
 8009884:	db06      	blt.n	8009894 <__hi0bits+0x3c>
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	d503      	bpl.n	8009892 <__hi0bits+0x3a>
 800988a:	3001      	adds	r0, #1
 800988c:	4770      	bx	lr
 800988e:	2000      	movs	r0, #0
 8009890:	e7e8      	b.n	8009864 <__hi0bits+0xc>
 8009892:	2020      	movs	r0, #32
 8009894:	4770      	bx	lr

08009896 <__lo0bits>:
 8009896:	6803      	ldr	r3, [r0, #0]
 8009898:	f013 0207 	ands.w	r2, r3, #7
 800989c:	4601      	mov	r1, r0
 800989e:	d00b      	beq.n	80098b8 <__lo0bits+0x22>
 80098a0:	07da      	lsls	r2, r3, #31
 80098a2:	d423      	bmi.n	80098ec <__lo0bits+0x56>
 80098a4:	0798      	lsls	r0, r3, #30
 80098a6:	bf49      	itett	mi
 80098a8:	085b      	lsrmi	r3, r3, #1
 80098aa:	089b      	lsrpl	r3, r3, #2
 80098ac:	2001      	movmi	r0, #1
 80098ae:	600b      	strmi	r3, [r1, #0]
 80098b0:	bf5c      	itt	pl
 80098b2:	600b      	strpl	r3, [r1, #0]
 80098b4:	2002      	movpl	r0, #2
 80098b6:	4770      	bx	lr
 80098b8:	b298      	uxth	r0, r3
 80098ba:	b9a8      	cbnz	r0, 80098e8 <__lo0bits+0x52>
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	2010      	movs	r0, #16
 80098c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098c4:	bf04      	itt	eq
 80098c6:	0a1b      	lsreq	r3, r3, #8
 80098c8:	3008      	addeq	r0, #8
 80098ca:	071a      	lsls	r2, r3, #28
 80098cc:	bf04      	itt	eq
 80098ce:	091b      	lsreq	r3, r3, #4
 80098d0:	3004      	addeq	r0, #4
 80098d2:	079a      	lsls	r2, r3, #30
 80098d4:	bf04      	itt	eq
 80098d6:	089b      	lsreq	r3, r3, #2
 80098d8:	3002      	addeq	r0, #2
 80098da:	07da      	lsls	r2, r3, #31
 80098dc:	d402      	bmi.n	80098e4 <__lo0bits+0x4e>
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	d006      	beq.n	80098f0 <__lo0bits+0x5a>
 80098e2:	3001      	adds	r0, #1
 80098e4:	600b      	str	r3, [r1, #0]
 80098e6:	4770      	bx	lr
 80098e8:	4610      	mov	r0, r2
 80098ea:	e7e9      	b.n	80098c0 <__lo0bits+0x2a>
 80098ec:	2000      	movs	r0, #0
 80098ee:	4770      	bx	lr
 80098f0:	2020      	movs	r0, #32
 80098f2:	4770      	bx	lr

080098f4 <__i2b>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	2101      	movs	r1, #1
 80098fa:	f7ff fee9 	bl	80096d0 <_Balloc>
 80098fe:	2201      	movs	r2, #1
 8009900:	6144      	str	r4, [r0, #20]
 8009902:	6102      	str	r2, [r0, #16]
 8009904:	bd10      	pop	{r4, pc}

08009906 <__multiply>:
 8009906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	4614      	mov	r4, r2
 800990c:	690a      	ldr	r2, [r1, #16]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	429a      	cmp	r2, r3
 8009912:	bfb8      	it	lt
 8009914:	460b      	movlt	r3, r1
 8009916:	4688      	mov	r8, r1
 8009918:	bfbc      	itt	lt
 800991a:	46a0      	movlt	r8, r4
 800991c:	461c      	movlt	r4, r3
 800991e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009922:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009926:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800992a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800992e:	eb07 0609 	add.w	r6, r7, r9
 8009932:	42b3      	cmp	r3, r6
 8009934:	bfb8      	it	lt
 8009936:	3101      	addlt	r1, #1
 8009938:	f7ff feca 	bl	80096d0 <_Balloc>
 800993c:	f100 0514 	add.w	r5, r0, #20
 8009940:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009944:	462b      	mov	r3, r5
 8009946:	2200      	movs	r2, #0
 8009948:	4573      	cmp	r3, lr
 800994a:	d316      	bcc.n	800997a <__multiply+0x74>
 800994c:	f104 0214 	add.w	r2, r4, #20
 8009950:	f108 0114 	add.w	r1, r8, #20
 8009954:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009958:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800995c:	9300      	str	r3, [sp, #0]
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	9201      	str	r2, [sp, #4]
 8009962:	4293      	cmp	r3, r2
 8009964:	d80c      	bhi.n	8009980 <__multiply+0x7a>
 8009966:	2e00      	cmp	r6, #0
 8009968:	dd03      	ble.n	8009972 <__multiply+0x6c>
 800996a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800996e:	2b00      	cmp	r3, #0
 8009970:	d05d      	beq.n	8009a2e <__multiply+0x128>
 8009972:	6106      	str	r6, [r0, #16]
 8009974:	b003      	add	sp, #12
 8009976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997a:	f843 2b04 	str.w	r2, [r3], #4
 800997e:	e7e3      	b.n	8009948 <__multiply+0x42>
 8009980:	f8b2 b000 	ldrh.w	fp, [r2]
 8009984:	f1bb 0f00 	cmp.w	fp, #0
 8009988:	d023      	beq.n	80099d2 <__multiply+0xcc>
 800998a:	4689      	mov	r9, r1
 800998c:	46ac      	mov	ip, r5
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	f859 4b04 	ldr.w	r4, [r9], #4
 8009996:	f8dc a000 	ldr.w	sl, [ip]
 800999a:	b2a3      	uxth	r3, r4
 800999c:	fa1f fa8a 	uxth.w	sl, sl
 80099a0:	fb0b a303 	mla	r3, fp, r3, sl
 80099a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099a8:	f8dc 4000 	ldr.w	r4, [ip]
 80099ac:	4443      	add	r3, r8
 80099ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099b2:	fb0b 840a 	mla	r4, fp, sl, r8
 80099b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099ba:	46e2      	mov	sl, ip
 80099bc:	b29b      	uxth	r3, r3
 80099be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099c2:	454f      	cmp	r7, r9
 80099c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099c8:	f84a 3b04 	str.w	r3, [sl], #4
 80099cc:	d82b      	bhi.n	8009a26 <__multiply+0x120>
 80099ce:	f8cc 8004 	str.w	r8, [ip, #4]
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80099d8:	3204      	adds	r2, #4
 80099da:	f1ba 0f00 	cmp.w	sl, #0
 80099de:	d020      	beq.n	8009a22 <__multiply+0x11c>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	4689      	mov	r9, r1
 80099e4:	46a8      	mov	r8, r5
 80099e6:	f04f 0b00 	mov.w	fp, #0
 80099ea:	f8b9 c000 	ldrh.w	ip, [r9]
 80099ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80099f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80099f6:	445c      	add	r4, fp
 80099f8:	46c4      	mov	ip, r8
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a00:	f84c 3b04 	str.w	r3, [ip], #4
 8009a04:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a08:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a0c:	0c1b      	lsrs	r3, r3, #16
 8009a0e:	fb0a b303 	mla	r3, sl, r3, fp
 8009a12:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a16:	454f      	cmp	r7, r9
 8009a18:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a1c:	d805      	bhi.n	8009a2a <__multiply+0x124>
 8009a1e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a22:	3504      	adds	r5, #4
 8009a24:	e79b      	b.n	800995e <__multiply+0x58>
 8009a26:	46d4      	mov	ip, sl
 8009a28:	e7b3      	b.n	8009992 <__multiply+0x8c>
 8009a2a:	46e0      	mov	r8, ip
 8009a2c:	e7dd      	b.n	80099ea <__multiply+0xe4>
 8009a2e:	3e01      	subs	r6, #1
 8009a30:	e799      	b.n	8009966 <__multiply+0x60>
	...

08009a34 <__pow5mult>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4615      	mov	r5, r2
 8009a3a:	f012 0203 	ands.w	r2, r2, #3
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460f      	mov	r7, r1
 8009a42:	d007      	beq.n	8009a54 <__pow5mult+0x20>
 8009a44:	3a01      	subs	r2, #1
 8009a46:	4c21      	ldr	r4, [pc, #132]	; (8009acc <__pow5mult+0x98>)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a4e:	f7ff fe8a 	bl	8009766 <__multadd>
 8009a52:	4607      	mov	r7, r0
 8009a54:	10ad      	asrs	r5, r5, #2
 8009a56:	d035      	beq.n	8009ac4 <__pow5mult+0x90>
 8009a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a5a:	b93c      	cbnz	r4, 8009a6c <__pow5mult+0x38>
 8009a5c:	2010      	movs	r0, #16
 8009a5e:	f7ff fe1d 	bl	800969c <malloc>
 8009a62:	6270      	str	r0, [r6, #36]	; 0x24
 8009a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a68:	6004      	str	r4, [r0, #0]
 8009a6a:	60c4      	str	r4, [r0, #12]
 8009a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a74:	b94c      	cbnz	r4, 8009a8a <__pow5mult+0x56>
 8009a76:	f240 2171 	movw	r1, #625	; 0x271
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff3a 	bl	80098f4 <__i2b>
 8009a80:	2300      	movs	r3, #0
 8009a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a86:	4604      	mov	r4, r0
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	f04f 0800 	mov.w	r8, #0
 8009a8e:	07eb      	lsls	r3, r5, #31
 8009a90:	d50a      	bpl.n	8009aa8 <__pow5mult+0x74>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4622      	mov	r2, r4
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff35 	bl	8009906 <__multiply>
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4681      	mov	r9, r0
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff fe49 	bl	8009738 <_Bfree>
 8009aa6:	464f      	mov	r7, r9
 8009aa8:	106d      	asrs	r5, r5, #1
 8009aaa:	d00b      	beq.n	8009ac4 <__pow5mult+0x90>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	b938      	cbnz	r0, 8009ac0 <__pow5mult+0x8c>
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff ff26 	bl	8009906 <__multiply>
 8009aba:	6020      	str	r0, [r4, #0]
 8009abc:	f8c0 8000 	str.w	r8, [r0]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e7e4      	b.n	8009a8e <__pow5mult+0x5a>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aca:	bf00      	nop
 8009acc:	0800ade0 	.word	0x0800ade0

08009ad0 <__lshift>:
 8009ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	6849      	ldr	r1, [r1, #4]
 8009ade:	eb0a 0903 	add.w	r9, sl, r3
 8009ae2:	68a3      	ldr	r3, [r4, #8]
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	4616      	mov	r6, r2
 8009ae8:	f109 0501 	add.w	r5, r9, #1
 8009aec:	42ab      	cmp	r3, r5
 8009aee:	db32      	blt.n	8009b56 <__lshift+0x86>
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff fded 	bl	80096d0 <_Balloc>
 8009af6:	2300      	movs	r3, #0
 8009af8:	4680      	mov	r8, r0
 8009afa:	f100 0114 	add.w	r1, r0, #20
 8009afe:	461a      	mov	r2, r3
 8009b00:	4553      	cmp	r3, sl
 8009b02:	db2b      	blt.n	8009b5c <__lshift+0x8c>
 8009b04:	6920      	ldr	r0, [r4, #16]
 8009b06:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b0a:	f104 0314 	add.w	r3, r4, #20
 8009b0e:	f016 021f 	ands.w	r2, r6, #31
 8009b12:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b16:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b1a:	d025      	beq.n	8009b68 <__lshift+0x98>
 8009b1c:	f1c2 0e20 	rsb	lr, r2, #32
 8009b20:	2000      	movs	r0, #0
 8009b22:	681e      	ldr	r6, [r3, #0]
 8009b24:	468a      	mov	sl, r1
 8009b26:	4096      	lsls	r6, r2
 8009b28:	4330      	orrs	r0, r6
 8009b2a:	f84a 0b04 	str.w	r0, [sl], #4
 8009b2e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b32:	459c      	cmp	ip, r3
 8009b34:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b38:	d814      	bhi.n	8009b64 <__lshift+0x94>
 8009b3a:	6048      	str	r0, [r1, #4]
 8009b3c:	b108      	cbz	r0, 8009b42 <__lshift+0x72>
 8009b3e:	f109 0502 	add.w	r5, r9, #2
 8009b42:	3d01      	subs	r5, #1
 8009b44:	4638      	mov	r0, r7
 8009b46:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f7ff fdf4 	bl	8009738 <_Bfree>
 8009b50:	4640      	mov	r0, r8
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	3101      	adds	r1, #1
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	e7c7      	b.n	8009aec <__lshift+0x1c>
 8009b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b60:	3301      	adds	r3, #1
 8009b62:	e7cd      	b.n	8009b00 <__lshift+0x30>
 8009b64:	4651      	mov	r1, sl
 8009b66:	e7dc      	b.n	8009b22 <__lshift+0x52>
 8009b68:	3904      	subs	r1, #4
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b72:	459c      	cmp	ip, r3
 8009b74:	d8f9      	bhi.n	8009b6a <__lshift+0x9a>
 8009b76:	e7e4      	b.n	8009b42 <__lshift+0x72>

08009b78 <__mcmp>:
 8009b78:	6903      	ldr	r3, [r0, #16]
 8009b7a:	690a      	ldr	r2, [r1, #16]
 8009b7c:	1a9b      	subs	r3, r3, r2
 8009b7e:	b530      	push	{r4, r5, lr}
 8009b80:	d10c      	bne.n	8009b9c <__mcmp+0x24>
 8009b82:	0092      	lsls	r2, r2, #2
 8009b84:	3014      	adds	r0, #20
 8009b86:	3114      	adds	r1, #20
 8009b88:	1884      	adds	r4, r0, r2
 8009b8a:	4411      	add	r1, r2
 8009b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b94:	4295      	cmp	r5, r2
 8009b96:	d003      	beq.n	8009ba0 <__mcmp+0x28>
 8009b98:	d305      	bcc.n	8009ba6 <__mcmp+0x2e>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	42a0      	cmp	r0, r4
 8009ba2:	d3f3      	bcc.n	8009b8c <__mcmp+0x14>
 8009ba4:	e7fa      	b.n	8009b9c <__mcmp+0x24>
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009baa:	e7f7      	b.n	8009b9c <__mcmp+0x24>

08009bac <__mdiff>:
 8009bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	4607      	mov	r7, r0
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	4614      	mov	r4, r2
 8009bba:	f7ff ffdd 	bl	8009b78 <__mcmp>
 8009bbe:	1e06      	subs	r6, r0, #0
 8009bc0:	d108      	bne.n	8009bd4 <__mdiff+0x28>
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	f7ff fd83 	bl	80096d0 <_Balloc>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd4:	bfa4      	itt	ge
 8009bd6:	4623      	movge	r3, r4
 8009bd8:	462c      	movge	r4, r5
 8009bda:	4638      	mov	r0, r7
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	bfa6      	itte	ge
 8009be0:	461d      	movge	r5, r3
 8009be2:	2600      	movge	r6, #0
 8009be4:	2601      	movlt	r6, #1
 8009be6:	f7ff fd73 	bl	80096d0 <_Balloc>
 8009bea:	692b      	ldr	r3, [r5, #16]
 8009bec:	60c6      	str	r6, [r0, #12]
 8009bee:	6926      	ldr	r6, [r4, #16]
 8009bf0:	f105 0914 	add.w	r9, r5, #20
 8009bf4:	f104 0214 	add.w	r2, r4, #20
 8009bf8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009bfc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c00:	f100 0514 	add.w	r5, r0, #20
 8009c04:	f04f 0e00 	mov.w	lr, #0
 8009c08:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c0c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c10:	fa1e f18a 	uxtah	r1, lr, sl
 8009c14:	b2a3      	uxth	r3, r4
 8009c16:	1ac9      	subs	r1, r1, r3
 8009c18:	0c23      	lsrs	r3, r4, #16
 8009c1a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c22:	b289      	uxth	r1, r1
 8009c24:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c28:	45c8      	cmp	r8, r9
 8009c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c2e:	4694      	mov	ip, r2
 8009c30:	f845 3b04 	str.w	r3, [r5], #4
 8009c34:	d8e8      	bhi.n	8009c08 <__mdiff+0x5c>
 8009c36:	45bc      	cmp	ip, r7
 8009c38:	d304      	bcc.n	8009c44 <__mdiff+0x98>
 8009c3a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c3e:	b183      	cbz	r3, 8009c62 <__mdiff+0xb6>
 8009c40:	6106      	str	r6, [r0, #16]
 8009c42:	e7c5      	b.n	8009bd0 <__mdiff+0x24>
 8009c44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c48:	fa1e f381 	uxtah	r3, lr, r1
 8009c4c:	141a      	asrs	r2, r3, #16
 8009c4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c58:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009c5c:	f845 3b04 	str.w	r3, [r5], #4
 8009c60:	e7e9      	b.n	8009c36 <__mdiff+0x8a>
 8009c62:	3e01      	subs	r6, #1
 8009c64:	e7e9      	b.n	8009c3a <__mdiff+0x8e>
	...

08009c68 <__ulp>:
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <__ulp+0x4c>)
 8009c6a:	ee10 2a90 	vmov	r2, s1
 8009c6e:	401a      	ands	r2, r3
 8009c70:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dd04      	ble.n	8009c82 <__ulp+0x1a>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	ec41 0b10 	vmov	d0, r0, r1
 8009c80:	4770      	bx	lr
 8009c82:	425b      	negs	r3, r3
 8009c84:	151b      	asrs	r3, r3, #20
 8009c86:	2b13      	cmp	r3, #19
 8009c88:	f04f 0000 	mov.w	r0, #0
 8009c8c:	f04f 0100 	mov.w	r1, #0
 8009c90:	dc04      	bgt.n	8009c9c <__ulp+0x34>
 8009c92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c96:	fa42 f103 	asr.w	r1, r2, r3
 8009c9a:	e7ef      	b.n	8009c7c <__ulp+0x14>
 8009c9c:	3b14      	subs	r3, #20
 8009c9e:	2b1e      	cmp	r3, #30
 8009ca0:	f04f 0201 	mov.w	r2, #1
 8009ca4:	bfda      	itte	le
 8009ca6:	f1c3 031f 	rsble	r3, r3, #31
 8009caa:	fa02 f303 	lslle.w	r3, r2, r3
 8009cae:	4613      	movgt	r3, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	e7e3      	b.n	8009c7c <__ulp+0x14>
 8009cb4:	7ff00000 	.word	0x7ff00000

08009cb8 <__b2d>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	6905      	ldr	r5, [r0, #16]
 8009cbc:	f100 0714 	add.w	r7, r0, #20
 8009cc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009cc4:	1f2e      	subs	r6, r5, #4
 8009cc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7ff fdc4 	bl	8009858 <__hi0bits>
 8009cd0:	f1c0 0320 	rsb	r3, r0, #32
 8009cd4:	280a      	cmp	r0, #10
 8009cd6:	600b      	str	r3, [r1, #0]
 8009cd8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009d50 <__b2d+0x98>
 8009cdc:	dc14      	bgt.n	8009d08 <__b2d+0x50>
 8009cde:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ce2:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ce6:	42b7      	cmp	r7, r6
 8009ce8:	ea41 030c 	orr.w	r3, r1, ip
 8009cec:	bf34      	ite	cc
 8009cee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009cf2:	2100      	movcs	r1, #0
 8009cf4:	3015      	adds	r0, #21
 8009cf6:	fa04 f000 	lsl.w	r0, r4, r0
 8009cfa:	fa21 f10e 	lsr.w	r1, r1, lr
 8009cfe:	ea40 0201 	orr.w	r2, r0, r1
 8009d02:	ec43 2b10 	vmov	d0, r2, r3
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d08:	42b7      	cmp	r7, r6
 8009d0a:	bf3a      	itte	cc
 8009d0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d14:	2100      	movcs	r1, #0
 8009d16:	380b      	subs	r0, #11
 8009d18:	d015      	beq.n	8009d46 <__b2d+0x8e>
 8009d1a:	4084      	lsls	r4, r0
 8009d1c:	f1c0 0520 	rsb	r5, r0, #32
 8009d20:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009d24:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009d28:	42be      	cmp	r6, r7
 8009d2a:	fa21 fc05 	lsr.w	ip, r1, r5
 8009d2e:	ea44 030c 	orr.w	r3, r4, ip
 8009d32:	bf8c      	ite	hi
 8009d34:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d38:	2400      	movls	r4, #0
 8009d3a:	fa01 f000 	lsl.w	r0, r1, r0
 8009d3e:	40ec      	lsrs	r4, r5
 8009d40:	ea40 0204 	orr.w	r2, r0, r4
 8009d44:	e7dd      	b.n	8009d02 <__b2d+0x4a>
 8009d46:	ea44 030c 	orr.w	r3, r4, ip
 8009d4a:	460a      	mov	r2, r1
 8009d4c:	e7d9      	b.n	8009d02 <__b2d+0x4a>
 8009d4e:	bf00      	nop
 8009d50:	3ff00000 	.word	0x3ff00000

08009d54 <__d2b>:
 8009d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	460e      	mov	r6, r1
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	ec59 8b10 	vmov	r8, r9, d0
 8009d60:	4615      	mov	r5, r2
 8009d62:	f7ff fcb5 	bl	80096d0 <_Balloc>
 8009d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d70:	bb34      	cbnz	r4, 8009dc0 <__d2b+0x6c>
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	f1b8 0300 	subs.w	r3, r8, #0
 8009d78:	d027      	beq.n	8009dca <__d2b+0x76>
 8009d7a:	a802      	add	r0, sp, #8
 8009d7c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009d80:	f7ff fd89 	bl	8009896 <__lo0bits>
 8009d84:	9900      	ldr	r1, [sp, #0]
 8009d86:	b1f0      	cbz	r0, 8009dc6 <__d2b+0x72>
 8009d88:	9a01      	ldr	r2, [sp, #4]
 8009d8a:	f1c0 0320 	rsb	r3, r0, #32
 8009d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d92:	430b      	orrs	r3, r1
 8009d94:	40c2      	lsrs	r2, r0
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	9201      	str	r2, [sp, #4]
 8009d9a:	9b01      	ldr	r3, [sp, #4]
 8009d9c:	61bb      	str	r3, [r7, #24]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	bf14      	ite	ne
 8009da2:	2102      	movne	r1, #2
 8009da4:	2101      	moveq	r1, #1
 8009da6:	6139      	str	r1, [r7, #16]
 8009da8:	b1c4      	cbz	r4, 8009ddc <__d2b+0x88>
 8009daa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009dae:	4404      	add	r4, r0
 8009db0:	6034      	str	r4, [r6, #0]
 8009db2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009db6:	6028      	str	r0, [r5, #0]
 8009db8:	4638      	mov	r0, r7
 8009dba:	b003      	add	sp, #12
 8009dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc4:	e7d5      	b.n	8009d72 <__d2b+0x1e>
 8009dc6:	6179      	str	r1, [r7, #20]
 8009dc8:	e7e7      	b.n	8009d9a <__d2b+0x46>
 8009dca:	a801      	add	r0, sp, #4
 8009dcc:	f7ff fd63 	bl	8009896 <__lo0bits>
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	6139      	str	r1, [r7, #16]
 8009dd8:	3020      	adds	r0, #32
 8009dda:	e7e5      	b.n	8009da8 <__d2b+0x54>
 8009ddc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009de0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009de4:	6030      	str	r0, [r6, #0]
 8009de6:	6918      	ldr	r0, [r3, #16]
 8009de8:	f7ff fd36 	bl	8009858 <__hi0bits>
 8009dec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009df0:	e7e1      	b.n	8009db6 <__d2b+0x62>

08009df2 <__ratio>:
 8009df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df6:	4688      	mov	r8, r1
 8009df8:	4669      	mov	r1, sp
 8009dfa:	4681      	mov	r9, r0
 8009dfc:	f7ff ff5c 	bl	8009cb8 <__b2d>
 8009e00:	a901      	add	r1, sp, #4
 8009e02:	4640      	mov	r0, r8
 8009e04:	ec57 6b10 	vmov	r6, r7, d0
 8009e08:	ee10 4a10 	vmov	r4, s0
 8009e0c:	f7ff ff54 	bl	8009cb8 <__b2d>
 8009e10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e18:	eba3 0c02 	sub.w	ip, r3, r2
 8009e1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e20:	1a9b      	subs	r3, r3, r2
 8009e22:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e26:	ec51 0b10 	vmov	r0, r1, d0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	ee10 aa10 	vmov	sl, s0
 8009e30:	bfce      	itee	gt
 8009e32:	463a      	movgt	r2, r7
 8009e34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e38:	460a      	movle	r2, r1
 8009e3a:	463d      	mov	r5, r7
 8009e3c:	468b      	mov	fp, r1
 8009e3e:	bfcc      	ite	gt
 8009e40:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009e44:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e48:	ec45 4b17 	vmov	d7, r4, r5
 8009e4c:	ec4b ab16 	vmov	d6, sl, fp
 8009e50:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009e54:	b003      	add	sp, #12
 8009e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e5a <__copybits>:
 8009e5a:	3901      	subs	r1, #1
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	1149      	asrs	r1, r1, #5
 8009e60:	6914      	ldr	r4, [r2, #16]
 8009e62:	3101      	adds	r1, #1
 8009e64:	f102 0314 	add.w	r3, r2, #20
 8009e68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	4602      	mov	r2, r0
 8009e74:	d303      	bcc.n	8009e7e <__copybits+0x24>
 8009e76:	2300      	movs	r3, #0
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	d305      	bcc.n	8009e88 <__copybits+0x2e>
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e82:	f840 2b04 	str.w	r2, [r0], #4
 8009e86:	e7f3      	b.n	8009e70 <__copybits+0x16>
 8009e88:	f842 3b04 	str.w	r3, [r2], #4
 8009e8c:	e7f4      	b.n	8009e78 <__copybits+0x1e>

08009e8e <__any_on>:
 8009e8e:	f100 0214 	add.w	r2, r0, #20
 8009e92:	6900      	ldr	r0, [r0, #16]
 8009e94:	114b      	asrs	r3, r1, #5
 8009e96:	4298      	cmp	r0, r3
 8009e98:	b510      	push	{r4, lr}
 8009e9a:	db11      	blt.n	8009ec0 <__any_on+0x32>
 8009e9c:	dd0a      	ble.n	8009eb4 <__any_on+0x26>
 8009e9e:	f011 011f 	ands.w	r1, r1, #31
 8009ea2:	d007      	beq.n	8009eb4 <__any_on+0x26>
 8009ea4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ea8:	fa24 f001 	lsr.w	r0, r4, r1
 8009eac:	fa00 f101 	lsl.w	r1, r0, r1
 8009eb0:	428c      	cmp	r4, r1
 8009eb2:	d10b      	bne.n	8009ecc <__any_on+0x3e>
 8009eb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d803      	bhi.n	8009ec4 <__any_on+0x36>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	bd10      	pop	{r4, pc}
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	e7f7      	b.n	8009eb4 <__any_on+0x26>
 8009ec4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ec8:	2900      	cmp	r1, #0
 8009eca:	d0f5      	beq.n	8009eb8 <__any_on+0x2a>
 8009ecc:	2001      	movs	r0, #1
 8009ece:	e7f6      	b.n	8009ebe <__any_on+0x30>

08009ed0 <_calloc_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	fb02 f401 	mul.w	r4, r2, r1
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f000 f856 	bl	8009f88 <_malloc_r>
 8009edc:	4605      	mov	r5, r0
 8009ede:	b118      	cbz	r0, 8009ee8 <_calloc_r+0x18>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	f7fc fdf7 	bl	8006ad6 <memset>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	bd38      	pop	{r3, r4, r5, pc}

08009eec <_free_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4605      	mov	r5, r0
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	d045      	beq.n	8009f80 <_free_r+0x94>
 8009ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef8:	1f0c      	subs	r4, r1, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	bfb8      	it	lt
 8009efe:	18e4      	addlt	r4, r4, r3
 8009f00:	f000 fa36 	bl	800a370 <__malloc_lock>
 8009f04:	4a1f      	ldr	r2, [pc, #124]	; (8009f84 <_free_r+0x98>)
 8009f06:	6813      	ldr	r3, [r2, #0]
 8009f08:	4610      	mov	r0, r2
 8009f0a:	b933      	cbnz	r3, 8009f1a <_free_r+0x2e>
 8009f0c:	6063      	str	r3, [r4, #4]
 8009f0e:	6014      	str	r4, [r2, #0]
 8009f10:	4628      	mov	r0, r5
 8009f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f16:	f000 ba2c 	b.w	800a372 <__malloc_unlock>
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	d90c      	bls.n	8009f38 <_free_r+0x4c>
 8009f1e:	6821      	ldr	r1, [r4, #0]
 8009f20:	1862      	adds	r2, r4, r1
 8009f22:	4293      	cmp	r3, r2
 8009f24:	bf04      	itt	eq
 8009f26:	681a      	ldreq	r2, [r3, #0]
 8009f28:	685b      	ldreq	r3, [r3, #4]
 8009f2a:	6063      	str	r3, [r4, #4]
 8009f2c:	bf04      	itt	eq
 8009f2e:	1852      	addeq	r2, r2, r1
 8009f30:	6022      	streq	r2, [r4, #0]
 8009f32:	6004      	str	r4, [r0, #0]
 8009f34:	e7ec      	b.n	8009f10 <_free_r+0x24>
 8009f36:	4613      	mov	r3, r2
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	b10a      	cbz	r2, 8009f40 <_free_r+0x54>
 8009f3c:	42a2      	cmp	r2, r4
 8009f3e:	d9fa      	bls.n	8009f36 <_free_r+0x4a>
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	1858      	adds	r0, r3, r1
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d10b      	bne.n	8009f60 <_free_r+0x74>
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	4401      	add	r1, r0
 8009f4c:	1858      	adds	r0, r3, r1
 8009f4e:	4282      	cmp	r2, r0
 8009f50:	6019      	str	r1, [r3, #0]
 8009f52:	d1dd      	bne.n	8009f10 <_free_r+0x24>
 8009f54:	6810      	ldr	r0, [r2, #0]
 8009f56:	6852      	ldr	r2, [r2, #4]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	4401      	add	r1, r0
 8009f5c:	6019      	str	r1, [r3, #0]
 8009f5e:	e7d7      	b.n	8009f10 <_free_r+0x24>
 8009f60:	d902      	bls.n	8009f68 <_free_r+0x7c>
 8009f62:	230c      	movs	r3, #12
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	e7d3      	b.n	8009f10 <_free_r+0x24>
 8009f68:	6820      	ldr	r0, [r4, #0]
 8009f6a:	1821      	adds	r1, r4, r0
 8009f6c:	428a      	cmp	r2, r1
 8009f6e:	bf04      	itt	eq
 8009f70:	6811      	ldreq	r1, [r2, #0]
 8009f72:	6852      	ldreq	r2, [r2, #4]
 8009f74:	6062      	str	r2, [r4, #4]
 8009f76:	bf04      	itt	eq
 8009f78:	1809      	addeq	r1, r1, r0
 8009f7a:	6021      	streq	r1, [r4, #0]
 8009f7c:	605c      	str	r4, [r3, #4]
 8009f7e:	e7c7      	b.n	8009f10 <_free_r+0x24>
 8009f80:	bd38      	pop	{r3, r4, r5, pc}
 8009f82:	bf00      	nop
 8009f84:	2000021c 	.word	0x2000021c

08009f88 <_malloc_r>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	1ccd      	adds	r5, r1, #3
 8009f8c:	f025 0503 	bic.w	r5, r5, #3
 8009f90:	3508      	adds	r5, #8
 8009f92:	2d0c      	cmp	r5, #12
 8009f94:	bf38      	it	cc
 8009f96:	250c      	movcc	r5, #12
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	db01      	blt.n	8009fa2 <_malloc_r+0x1a>
 8009f9e:	42a9      	cmp	r1, r5
 8009fa0:	d903      	bls.n	8009faa <_malloc_r+0x22>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	6033      	str	r3, [r6, #0]
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	f000 f9e1 	bl	800a370 <__malloc_lock>
 8009fae:	4a21      	ldr	r2, [pc, #132]	; (800a034 <_malloc_r+0xac>)
 8009fb0:	6814      	ldr	r4, [r2, #0]
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	b991      	cbnz	r1, 8009fdc <_malloc_r+0x54>
 8009fb6:	4c20      	ldr	r4, [pc, #128]	; (800a038 <_malloc_r+0xb0>)
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	b91b      	cbnz	r3, 8009fc4 <_malloc_r+0x3c>
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f000 f98f 	bl	800a2e0 <_sbrk_r>
 8009fc2:	6020      	str	r0, [r4, #0]
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f000 f98a 	bl	800a2e0 <_sbrk_r>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d124      	bne.n	800a01a <_malloc_r+0x92>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	6033      	str	r3, [r6, #0]
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f000 f9cc 	bl	800a372 <__malloc_unlock>
 8009fda:	e7e4      	b.n	8009fa6 <_malloc_r+0x1e>
 8009fdc:	680b      	ldr	r3, [r1, #0]
 8009fde:	1b5b      	subs	r3, r3, r5
 8009fe0:	d418      	bmi.n	800a014 <_malloc_r+0x8c>
 8009fe2:	2b0b      	cmp	r3, #11
 8009fe4:	d90f      	bls.n	800a006 <_malloc_r+0x7e>
 8009fe6:	600b      	str	r3, [r1, #0]
 8009fe8:	50cd      	str	r5, [r1, r3]
 8009fea:	18cc      	adds	r4, r1, r3
 8009fec:	4630      	mov	r0, r6
 8009fee:	f000 f9c0 	bl	800a372 <__malloc_unlock>
 8009ff2:	f104 000b 	add.w	r0, r4, #11
 8009ff6:	1d23      	adds	r3, r4, #4
 8009ff8:	f020 0007 	bic.w	r0, r0, #7
 8009ffc:	1ac3      	subs	r3, r0, r3
 8009ffe:	d0d3      	beq.n	8009fa8 <_malloc_r+0x20>
 800a000:	425a      	negs	r2, r3
 800a002:	50e2      	str	r2, [r4, r3]
 800a004:	e7d0      	b.n	8009fa8 <_malloc_r+0x20>
 800a006:	428c      	cmp	r4, r1
 800a008:	684b      	ldr	r3, [r1, #4]
 800a00a:	bf16      	itet	ne
 800a00c:	6063      	strne	r3, [r4, #4]
 800a00e:	6013      	streq	r3, [r2, #0]
 800a010:	460c      	movne	r4, r1
 800a012:	e7eb      	b.n	8009fec <_malloc_r+0x64>
 800a014:	460c      	mov	r4, r1
 800a016:	6849      	ldr	r1, [r1, #4]
 800a018:	e7cc      	b.n	8009fb4 <_malloc_r+0x2c>
 800a01a:	1cc4      	adds	r4, r0, #3
 800a01c:	f024 0403 	bic.w	r4, r4, #3
 800a020:	42a0      	cmp	r0, r4
 800a022:	d005      	beq.n	800a030 <_malloc_r+0xa8>
 800a024:	1a21      	subs	r1, r4, r0
 800a026:	4630      	mov	r0, r6
 800a028:	f000 f95a 	bl	800a2e0 <_sbrk_r>
 800a02c:	3001      	adds	r0, #1
 800a02e:	d0cf      	beq.n	8009fd0 <_malloc_r+0x48>
 800a030:	6025      	str	r5, [r4, #0]
 800a032:	e7db      	b.n	8009fec <_malloc_r+0x64>
 800a034:	2000021c 	.word	0x2000021c
 800a038:	20000220 	.word	0x20000220

0800a03c <__ssputs_r>:
 800a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	688e      	ldr	r6, [r1, #8]
 800a042:	429e      	cmp	r6, r3
 800a044:	4682      	mov	sl, r0
 800a046:	460c      	mov	r4, r1
 800a048:	4690      	mov	r8, r2
 800a04a:	4699      	mov	r9, r3
 800a04c:	d837      	bhi.n	800a0be <__ssputs_r+0x82>
 800a04e:	898a      	ldrh	r2, [r1, #12]
 800a050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a054:	d031      	beq.n	800a0ba <__ssputs_r+0x7e>
 800a056:	6825      	ldr	r5, [r4, #0]
 800a058:	6909      	ldr	r1, [r1, #16]
 800a05a:	1a6f      	subs	r7, r5, r1
 800a05c:	6965      	ldr	r5, [r4, #20]
 800a05e:	2302      	movs	r3, #2
 800a060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a064:	fb95 f5f3 	sdiv	r5, r5, r3
 800a068:	f109 0301 	add.w	r3, r9, #1
 800a06c:	443b      	add	r3, r7
 800a06e:	429d      	cmp	r5, r3
 800a070:	bf38      	it	cc
 800a072:	461d      	movcc	r5, r3
 800a074:	0553      	lsls	r3, r2, #21
 800a076:	d530      	bpl.n	800a0da <__ssputs_r+0x9e>
 800a078:	4629      	mov	r1, r5
 800a07a:	f7ff ff85 	bl	8009f88 <_malloc_r>
 800a07e:	4606      	mov	r6, r0
 800a080:	b950      	cbnz	r0, 800a098 <__ssputs_r+0x5c>
 800a082:	230c      	movs	r3, #12
 800a084:	f8ca 3000 	str.w	r3, [sl]
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a08e:	81a3      	strh	r3, [r4, #12]
 800a090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a098:	463a      	mov	r2, r7
 800a09a:	6921      	ldr	r1, [r4, #16]
 800a09c:	f7fc fd10 	bl	8006ac0 <memcpy>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	6126      	str	r6, [r4, #16]
 800a0ae:	6165      	str	r5, [r4, #20]
 800a0b0:	443e      	add	r6, r7
 800a0b2:	1bed      	subs	r5, r5, r7
 800a0b4:	6026      	str	r6, [r4, #0]
 800a0b6:	60a5      	str	r5, [r4, #8]
 800a0b8:	464e      	mov	r6, r9
 800a0ba:	454e      	cmp	r6, r9
 800a0bc:	d900      	bls.n	800a0c0 <__ssputs_r+0x84>
 800a0be:	464e      	mov	r6, r9
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	4641      	mov	r1, r8
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	f000 f93a 	bl	800a33e <memmove>
 800a0ca:	68a3      	ldr	r3, [r4, #8]
 800a0cc:	1b9b      	subs	r3, r3, r6
 800a0ce:	60a3      	str	r3, [r4, #8]
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	441e      	add	r6, r3
 800a0d4:	6026      	str	r6, [r4, #0]
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	e7dc      	b.n	800a094 <__ssputs_r+0x58>
 800a0da:	462a      	mov	r2, r5
 800a0dc:	f000 f94a 	bl	800a374 <_realloc_r>
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d1e2      	bne.n	800a0ac <__ssputs_r+0x70>
 800a0e6:	6921      	ldr	r1, [r4, #16]
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	f7ff feff 	bl	8009eec <_free_r>
 800a0ee:	e7c8      	b.n	800a082 <__ssputs_r+0x46>

0800a0f0 <_svfiprintf_r>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	461d      	mov	r5, r3
 800a0f6:	898b      	ldrh	r3, [r1, #12]
 800a0f8:	061f      	lsls	r7, r3, #24
 800a0fa:	b09d      	sub	sp, #116	; 0x74
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	4616      	mov	r6, r2
 800a102:	d50f      	bpl.n	800a124 <_svfiprintf_r+0x34>
 800a104:	690b      	ldr	r3, [r1, #16]
 800a106:	b96b      	cbnz	r3, 800a124 <_svfiprintf_r+0x34>
 800a108:	2140      	movs	r1, #64	; 0x40
 800a10a:	f7ff ff3d 	bl	8009f88 <_malloc_r>
 800a10e:	6020      	str	r0, [r4, #0]
 800a110:	6120      	str	r0, [r4, #16]
 800a112:	b928      	cbnz	r0, 800a120 <_svfiprintf_r+0x30>
 800a114:	230c      	movs	r3, #12
 800a116:	f8c8 3000 	str.w	r3, [r8]
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11e:	e0c8      	b.n	800a2b2 <_svfiprintf_r+0x1c2>
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	6163      	str	r3, [r4, #20]
 800a124:	2300      	movs	r3, #0
 800a126:	9309      	str	r3, [sp, #36]	; 0x24
 800a128:	2320      	movs	r3, #32
 800a12a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a12e:	2330      	movs	r3, #48	; 0x30
 800a130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a134:	9503      	str	r5, [sp, #12]
 800a136:	f04f 0b01 	mov.w	fp, #1
 800a13a:	4637      	mov	r7, r6
 800a13c:	463d      	mov	r5, r7
 800a13e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a142:	b10b      	cbz	r3, 800a148 <_svfiprintf_r+0x58>
 800a144:	2b25      	cmp	r3, #37	; 0x25
 800a146:	d13e      	bne.n	800a1c6 <_svfiprintf_r+0xd6>
 800a148:	ebb7 0a06 	subs.w	sl, r7, r6
 800a14c:	d00b      	beq.n	800a166 <_svfiprintf_r+0x76>
 800a14e:	4653      	mov	r3, sl
 800a150:	4632      	mov	r2, r6
 800a152:	4621      	mov	r1, r4
 800a154:	4640      	mov	r0, r8
 800a156:	f7ff ff71 	bl	800a03c <__ssputs_r>
 800a15a:	3001      	adds	r0, #1
 800a15c:	f000 80a4 	beq.w	800a2a8 <_svfiprintf_r+0x1b8>
 800a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a162:	4453      	add	r3, sl
 800a164:	9309      	str	r3, [sp, #36]	; 0x24
 800a166:	783b      	ldrb	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 809d 	beq.w	800a2a8 <_svfiprintf_r+0x1b8>
 800a16e:	2300      	movs	r3, #0
 800a170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a180:	931a      	str	r3, [sp, #104]	; 0x68
 800a182:	462f      	mov	r7, r5
 800a184:	2205      	movs	r2, #5
 800a186:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a18a:	4850      	ldr	r0, [pc, #320]	; (800a2cc <_svfiprintf_r+0x1dc>)
 800a18c:	f7f6 f860 	bl	8000250 <memchr>
 800a190:	9b04      	ldr	r3, [sp, #16]
 800a192:	b9d0      	cbnz	r0, 800a1ca <_svfiprintf_r+0xda>
 800a194:	06d9      	lsls	r1, r3, #27
 800a196:	bf44      	itt	mi
 800a198:	2220      	movmi	r2, #32
 800a19a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a19e:	071a      	lsls	r2, r3, #28
 800a1a0:	bf44      	itt	mi
 800a1a2:	222b      	movmi	r2, #43	; 0x2b
 800a1a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1a8:	782a      	ldrb	r2, [r5, #0]
 800a1aa:	2a2a      	cmp	r2, #42	; 0x2a
 800a1ac:	d015      	beq.n	800a1da <_svfiprintf_r+0xea>
 800a1ae:	9a07      	ldr	r2, [sp, #28]
 800a1b0:	462f      	mov	r7, r5
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	250a      	movs	r5, #10
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1bc:	3b30      	subs	r3, #48	; 0x30
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d94d      	bls.n	800a25e <_svfiprintf_r+0x16e>
 800a1c2:	b1b8      	cbz	r0, 800a1f4 <_svfiprintf_r+0x104>
 800a1c4:	e00f      	b.n	800a1e6 <_svfiprintf_r+0xf6>
 800a1c6:	462f      	mov	r7, r5
 800a1c8:	e7b8      	b.n	800a13c <_svfiprintf_r+0x4c>
 800a1ca:	4a40      	ldr	r2, [pc, #256]	; (800a2cc <_svfiprintf_r+0x1dc>)
 800a1cc:	1a80      	subs	r0, r0, r2
 800a1ce:	fa0b f000 	lsl.w	r0, fp, r0
 800a1d2:	4318      	orrs	r0, r3
 800a1d4:	9004      	str	r0, [sp, #16]
 800a1d6:	463d      	mov	r5, r7
 800a1d8:	e7d3      	b.n	800a182 <_svfiprintf_r+0x92>
 800a1da:	9a03      	ldr	r2, [sp, #12]
 800a1dc:	1d11      	adds	r1, r2, #4
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	9103      	str	r1, [sp, #12]
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	db01      	blt.n	800a1ea <_svfiprintf_r+0xfa>
 800a1e6:	9207      	str	r2, [sp, #28]
 800a1e8:	e004      	b.n	800a1f4 <_svfiprintf_r+0x104>
 800a1ea:	4252      	negs	r2, r2
 800a1ec:	f043 0302 	orr.w	r3, r3, #2
 800a1f0:	9207      	str	r2, [sp, #28]
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	783b      	ldrb	r3, [r7, #0]
 800a1f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f8:	d10c      	bne.n	800a214 <_svfiprintf_r+0x124>
 800a1fa:	787b      	ldrb	r3, [r7, #1]
 800a1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1fe:	d133      	bne.n	800a268 <_svfiprintf_r+0x178>
 800a200:	9b03      	ldr	r3, [sp, #12]
 800a202:	1d1a      	adds	r2, r3, #4
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	9203      	str	r2, [sp, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	bfb8      	it	lt
 800a20c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a210:	3702      	adds	r7, #2
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	4d2e      	ldr	r5, [pc, #184]	; (800a2d0 <_svfiprintf_r+0x1e0>)
 800a216:	7839      	ldrb	r1, [r7, #0]
 800a218:	2203      	movs	r2, #3
 800a21a:	4628      	mov	r0, r5
 800a21c:	f7f6 f818 	bl	8000250 <memchr>
 800a220:	b138      	cbz	r0, 800a232 <_svfiprintf_r+0x142>
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	1b40      	subs	r0, r0, r5
 800a226:	fa03 f000 	lsl.w	r0, r3, r0
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	4303      	orrs	r3, r0
 800a22e:	3701      	adds	r7, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	7839      	ldrb	r1, [r7, #0]
 800a234:	4827      	ldr	r0, [pc, #156]	; (800a2d4 <_svfiprintf_r+0x1e4>)
 800a236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a23a:	2206      	movs	r2, #6
 800a23c:	1c7e      	adds	r6, r7, #1
 800a23e:	f7f6 f807 	bl	8000250 <memchr>
 800a242:	2800      	cmp	r0, #0
 800a244:	d038      	beq.n	800a2b8 <_svfiprintf_r+0x1c8>
 800a246:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <_svfiprintf_r+0x1e8>)
 800a248:	bb13      	cbnz	r3, 800a290 <_svfiprintf_r+0x1a0>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	3307      	adds	r3, #7
 800a24e:	f023 0307 	bic.w	r3, r3, #7
 800a252:	3308      	adds	r3, #8
 800a254:	9303      	str	r3, [sp, #12]
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	444b      	add	r3, r9
 800a25a:	9309      	str	r3, [sp, #36]	; 0x24
 800a25c:	e76d      	b.n	800a13a <_svfiprintf_r+0x4a>
 800a25e:	fb05 3202 	mla	r2, r5, r2, r3
 800a262:	2001      	movs	r0, #1
 800a264:	460f      	mov	r7, r1
 800a266:	e7a6      	b.n	800a1b6 <_svfiprintf_r+0xc6>
 800a268:	2300      	movs	r3, #0
 800a26a:	3701      	adds	r7, #1
 800a26c:	9305      	str	r3, [sp, #20]
 800a26e:	4619      	mov	r1, r3
 800a270:	250a      	movs	r5, #10
 800a272:	4638      	mov	r0, r7
 800a274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a278:	3a30      	subs	r2, #48	; 0x30
 800a27a:	2a09      	cmp	r2, #9
 800a27c:	d903      	bls.n	800a286 <_svfiprintf_r+0x196>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0c8      	beq.n	800a214 <_svfiprintf_r+0x124>
 800a282:	9105      	str	r1, [sp, #20]
 800a284:	e7c6      	b.n	800a214 <_svfiprintf_r+0x124>
 800a286:	fb05 2101 	mla	r1, r5, r1, r2
 800a28a:	2301      	movs	r3, #1
 800a28c:	4607      	mov	r7, r0
 800a28e:	e7f0      	b.n	800a272 <_svfiprintf_r+0x182>
 800a290:	ab03      	add	r3, sp, #12
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	4622      	mov	r2, r4
 800a296:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <_svfiprintf_r+0x1ec>)
 800a298:	a904      	add	r1, sp, #16
 800a29a:	4640      	mov	r0, r8
 800a29c:	f7fc fca8 	bl	8006bf0 <_printf_float>
 800a2a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a2a4:	4681      	mov	r9, r0
 800a2a6:	d1d6      	bne.n	800a256 <_svfiprintf_r+0x166>
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	065b      	lsls	r3, r3, #25
 800a2ac:	f53f af35 	bmi.w	800a11a <_svfiprintf_r+0x2a>
 800a2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2b2:	b01d      	add	sp, #116	; 0x74
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	ab03      	add	r3, sp, #12
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <_svfiprintf_r+0x1ec>)
 800a2c0:	a904      	add	r1, sp, #16
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f7fc ff36 	bl	8007134 <_printf_i>
 800a2c8:	e7ea      	b.n	800a2a0 <_svfiprintf_r+0x1b0>
 800a2ca:	bf00      	nop
 800a2cc:	0800adec 	.word	0x0800adec
 800a2d0:	0800adf2 	.word	0x0800adf2
 800a2d4:	0800adf6 	.word	0x0800adf6
 800a2d8:	08006bf1 	.word	0x08006bf1
 800a2dc:	0800a03d 	.word	0x0800a03d

0800a2e0 <_sbrk_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4c06      	ldr	r4, [pc, #24]	; (800a2fc <_sbrk_r+0x1c>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	4608      	mov	r0, r1
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	f7f8 f894 	bl	8002418 <_sbrk>
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	d102      	bne.n	800a2fa <_sbrk_r+0x1a>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	b103      	cbz	r3, 800a2fa <_sbrk_r+0x1a>
 800a2f8:	602b      	str	r3, [r5, #0]
 800a2fa:	bd38      	pop	{r3, r4, r5, pc}
 800a2fc:	20000850 	.word	0x20000850

0800a300 <strncmp>:
 800a300:	b510      	push	{r4, lr}
 800a302:	b16a      	cbz	r2, 800a320 <strncmp+0x20>
 800a304:	3901      	subs	r1, #1
 800a306:	1884      	adds	r4, r0, r2
 800a308:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a30c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a310:	4293      	cmp	r3, r2
 800a312:	d103      	bne.n	800a31c <strncmp+0x1c>
 800a314:	42a0      	cmp	r0, r4
 800a316:	d001      	beq.n	800a31c <strncmp+0x1c>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1f5      	bne.n	800a308 <strncmp+0x8>
 800a31c:	1a98      	subs	r0, r3, r2
 800a31e:	bd10      	pop	{r4, pc}
 800a320:	4610      	mov	r0, r2
 800a322:	e7fc      	b.n	800a31e <strncmp+0x1e>

0800a324 <__ascii_wctomb>:
 800a324:	b149      	cbz	r1, 800a33a <__ascii_wctomb+0x16>
 800a326:	2aff      	cmp	r2, #255	; 0xff
 800a328:	bf85      	ittet	hi
 800a32a:	238a      	movhi	r3, #138	; 0x8a
 800a32c:	6003      	strhi	r3, [r0, #0]
 800a32e:	700a      	strbls	r2, [r1, #0]
 800a330:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a334:	bf98      	it	ls
 800a336:	2001      	movls	r0, #1
 800a338:	4770      	bx	lr
 800a33a:	4608      	mov	r0, r1
 800a33c:	4770      	bx	lr

0800a33e <memmove>:
 800a33e:	4288      	cmp	r0, r1
 800a340:	b510      	push	{r4, lr}
 800a342:	eb01 0302 	add.w	r3, r1, r2
 800a346:	d807      	bhi.n	800a358 <memmove+0x1a>
 800a348:	1e42      	subs	r2, r0, #1
 800a34a:	4299      	cmp	r1, r3
 800a34c:	d00a      	beq.n	800a364 <memmove+0x26>
 800a34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a352:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a356:	e7f8      	b.n	800a34a <memmove+0xc>
 800a358:	4283      	cmp	r3, r0
 800a35a:	d9f5      	bls.n	800a348 <memmove+0xa>
 800a35c:	1881      	adds	r1, r0, r2
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	42d3      	cmn	r3, r2
 800a362:	d100      	bne.n	800a366 <memmove+0x28>
 800a364:	bd10      	pop	{r4, pc}
 800a366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a36a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a36e:	e7f7      	b.n	800a360 <memmove+0x22>

0800a370 <__malloc_lock>:
 800a370:	4770      	bx	lr

0800a372 <__malloc_unlock>:
 800a372:	4770      	bx	lr

0800a374 <_realloc_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	4607      	mov	r7, r0
 800a378:	4614      	mov	r4, r2
 800a37a:	460e      	mov	r6, r1
 800a37c:	b921      	cbnz	r1, 800a388 <_realloc_r+0x14>
 800a37e:	4611      	mov	r1, r2
 800a380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a384:	f7ff be00 	b.w	8009f88 <_malloc_r>
 800a388:	b922      	cbnz	r2, 800a394 <_realloc_r+0x20>
 800a38a:	f7ff fdaf 	bl	8009eec <_free_r>
 800a38e:	4625      	mov	r5, r4
 800a390:	4628      	mov	r0, r5
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	f000 f814 	bl	800a3c0 <_malloc_usable_size_r>
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d20f      	bcs.n	800a3bc <_realloc_r+0x48>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4638      	mov	r0, r7
 800a3a0:	f7ff fdf2 	bl	8009f88 <_malloc_r>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0f2      	beq.n	800a390 <_realloc_r+0x1c>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	f7fc fb87 	bl	8006ac0 <memcpy>
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4638      	mov	r0, r7
 800a3b6:	f7ff fd99 	bl	8009eec <_free_r>
 800a3ba:	e7e9      	b.n	800a390 <_realloc_r+0x1c>
 800a3bc:	4635      	mov	r5, r6
 800a3be:	e7e7      	b.n	800a390 <_realloc_r+0x1c>

0800a3c0 <_malloc_usable_size_r>:
 800a3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c4:	1f18      	subs	r0, r3, #4
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bfbc      	itt	lt
 800a3ca:	580b      	ldrlt	r3, [r1, r0]
 800a3cc:	18c0      	addlt	r0, r0, r3
 800a3ce:	4770      	bx	lr

0800a3d0 <asin>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	ed2d 8b04 	vpush	{d8-d9}
 800a3d6:	eeb0 8b40 	vmov.f64	d8, d0
 800a3da:	4c22      	ldr	r4, [pc, #136]	; (800a464 <asin+0x94>)
 800a3dc:	b08a      	sub	sp, #40	; 0x28
 800a3de:	f000 f84b 	bl	800a478 <__ieee754_asin>
 800a3e2:	f994 3000 	ldrsb.w	r3, [r4]
 800a3e6:	eeb0 9b40 	vmov.f64	d9, d0
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	d034      	beq.n	800a458 <asin+0x88>
 800a3ee:	eeb4 8b48 	vcmp.f64	d8, d8
 800a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f6:	d62f      	bvs.n	800a458 <asin+0x88>
 800a3f8:	eeb0 0b48 	vmov.f64	d0, d8
 800a3fc:	f000 fb3a 	bl	800aa74 <fabs>
 800a400:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a404:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40c:	dd24      	ble.n	800a458 <asin+0x88>
 800a40e:	2301      	movs	r3, #1
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <asin+0x98>)
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	4815      	ldr	r0, [pc, #84]	; (800a46c <asin+0x9c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	9308      	str	r3, [sp, #32]
 800a41c:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a420:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a424:	f000 fb34 	bl	800aa90 <nan>
 800a428:	f994 3000 	ldrsb.w	r3, [r4]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800a432:	d104      	bne.n	800a43e <asin+0x6e>
 800a434:	f7fc fb1a 	bl	8006a6c <__errno>
 800a438:	2321      	movs	r3, #33	; 0x21
 800a43a:	6003      	str	r3, [r0, #0]
 800a43c:	e004      	b.n	800a448 <asin+0x78>
 800a43e:	4668      	mov	r0, sp
 800a440:	f000 fb21 	bl	800aa86 <matherr>
 800a444:	2800      	cmp	r0, #0
 800a446:	d0f5      	beq.n	800a434 <asin+0x64>
 800a448:	9b08      	ldr	r3, [sp, #32]
 800a44a:	b11b      	cbz	r3, 800a454 <asin+0x84>
 800a44c:	f7fc fb0e 	bl	8006a6c <__errno>
 800a450:	9b08      	ldr	r3, [sp, #32]
 800a452:	6003      	str	r3, [r0, #0]
 800a454:	ed9d 9b06 	vldr	d9, [sp, #24]
 800a458:	eeb0 0b49 	vmov.f64	d0, d9
 800a45c:	b00a      	add	sp, #40	; 0x28
 800a45e:	ecbd 8b04 	vpop	{d8-d9}
 800a462:	bd10      	pop	{r4, pc}
 800a464:	200001e8 	.word	0x200001e8
 800a468:	0800aefe 	.word	0x0800aefe
 800a46c:	0800adf1 	.word	0x0800adf1

0800a470 <atan2>:
 800a470:	f000 b91e 	b.w	800a6b0 <__ieee754_atan2>
 800a474:	0000      	movs	r0, r0
	...

0800a478 <__ieee754_asin>:
 800a478:	b530      	push	{r4, r5, lr}
 800a47a:	ee10 5a90 	vmov	r5, s1
 800a47e:	ed2d 8b06 	vpush	{d8-d10}
 800a482:	4b87      	ldr	r3, [pc, #540]	; (800a6a0 <__ieee754_asin+0x228>)
 800a484:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a488:	429c      	cmp	r4, r3
 800a48a:	b083      	sub	sp, #12
 800a48c:	dd1a      	ble.n	800a4c4 <__ieee754_asin+0x4c>
 800a48e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a492:	ee10 3a10 	vmov	r3, s0
 800a496:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a49a:	4323      	orrs	r3, r4
 800a49c:	d10d      	bne.n	800a4ba <__ieee754_asin+0x42>
 800a49e:	ed9f 7b62 	vldr	d7, [pc, #392]	; 800a628 <__ieee754_asin+0x1b0>
 800a4a2:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800a630 <__ieee754_asin+0x1b8>
 800a4a6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a4aa:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a4ae:	eeb0 0b47 	vmov.f64	d0, d7
 800a4b2:	b003      	add	sp, #12
 800a4b4:	ecbd 8b06 	vpop	{d8-d10}
 800a4b8:	bd30      	pop	{r4, r5, pc}
 800a4ba:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a4be:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800a4c2:	e7f6      	b.n	800a4b2 <__ieee754_asin+0x3a>
 800a4c4:	4b77      	ldr	r3, [pc, #476]	; (800a6a4 <__ieee754_asin+0x22c>)
 800a4c6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 800a4ca:	429c      	cmp	r4, r3
 800a4cc:	dc0b      	bgt.n	800a4e6 <__ieee754_asin+0x6e>
 800a4ce:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 800a4d2:	da56      	bge.n	800a582 <__ieee754_asin+0x10a>
 800a4d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800a638 <__ieee754_asin+0x1c0>
 800a4d8:	ee30 7b07 	vadd.f64	d7, d0, d7
 800a4dc:	eeb4 7bc9 	vcmpe.f64	d7, d9
 800a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e4:	dce5      	bgt.n	800a4b2 <__ieee754_asin+0x3a>
 800a4e6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800a4ea:	f000 fac3 	bl	800aa74 <fabs>
 800a4ee:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800a640 <__ieee754_asin+0x1c8>
 800a4f2:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a4f6:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a4fa:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800a648 <__ieee754_asin+0x1d0>
 800a4fe:	eeb0 0b48 	vmov.f64	d0, d8
 800a502:	eea8 6b07 	vfma.f64	d6, d8, d7
 800a506:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800a650 <__ieee754_asin+0x1d8>
 800a50a:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a50e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800a658 <__ieee754_asin+0x1e0>
 800a512:	ed9f ab53 	vldr	d10, [pc, #332]	; 800a660 <__ieee754_asin+0x1e8>
 800a516:	eea7 6b08 	vfma.f64	d6, d7, d8
 800a51a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800a668 <__ieee754_asin+0x1f0>
 800a51e:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a522:	ed9f 6b53 	vldr	d6, [pc, #332]	; 800a670 <__ieee754_asin+0x1f8>
 800a526:	eea7 ab08 	vfma.f64	d10, d7, d8
 800a52a:	ee2a ab08 	vmul.f64	d10, d10, d8
 800a52e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800a678 <__ieee754_asin+0x200>
 800a532:	eea8 7b06 	vfma.f64	d7, d8, d6
 800a536:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800a680 <__ieee754_asin+0x208>
 800a53a:	eea7 6b08 	vfma.f64	d6, d7, d8
 800a53e:	ed9f 7b52 	vldr	d7, [pc, #328]	; 800a688 <__ieee754_asin+0x210>
 800a542:	eea6 7b08 	vfma.f64	d7, d6, d8
 800a546:	eea7 9b08 	vfma.f64	d9, d7, d8
 800a54a:	f000 f993 	bl	800a874 <__ieee754_sqrt>
 800a54e:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 800a552:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 800a556:	4b54      	ldr	r3, [pc, #336]	; (800a6a8 <__ieee754_asin+0x230>)
 800a558:	429c      	cmp	r4, r3
 800a55a:	ed8d 0b00 	vstr	d0, [sp]
 800a55e:	dd3f      	ble.n	800a5e0 <__ieee754_asin+0x168>
 800a560:	eeb0 7b40 	vmov.f64	d7, d0
 800a564:	eea0 7b04 	vfma.f64	d7, d0, d4
 800a568:	ed9f 0b49 	vldr	d0, [pc, #292]	; 800a690 <__ieee754_asin+0x218>
 800a56c:	eea7 0b06 	vfma.f64	d0, d7, d6
 800a570:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a630 <__ieee754_asin+0x1b8>
 800a574:	ee37 0b40 	vsub.f64	d0, d7, d0
 800a578:	2d00      	cmp	r5, #0
 800a57a:	bfd8      	it	le
 800a57c:	eeb1 0b40 	vnegle.f64	d0, d0
 800a580:	e797      	b.n	800a4b2 <__ieee754_asin+0x3a>
 800a582:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800a640 <__ieee754_asin+0x1c8>
 800a586:	ee20 7b00 	vmul.f64	d7, d0, d0
 800a58a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800a648 <__ieee754_asin+0x1d0>
 800a58e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a592:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800a650 <__ieee754_asin+0x1d8>
 800a596:	eea6 5b07 	vfma.f64	d5, d6, d7
 800a59a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800a658 <__ieee754_asin+0x1e0>
 800a59e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a5a2:	ed9f 5b31 	vldr	d5, [pc, #196]	; 800a668 <__ieee754_asin+0x1f0>
 800a5a6:	eea6 5b07 	vfma.f64	d5, d6, d7
 800a5aa:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 800a660 <__ieee754_asin+0x1e8>
 800a5ae:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800a670 <__ieee754_asin+0x1f8>
 800a5b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a5b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a5ba:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800a678 <__ieee754_asin+0x200>
 800a5be:	eea7 5b04 	vfma.f64	d5, d7, d4
 800a5c2:	ed9f 4b2f 	vldr	d4, [pc, #188]	; 800a680 <__ieee754_asin+0x208>
 800a5c6:	eea5 4b07 	vfma.f64	d4, d5, d7
 800a5ca:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800a688 <__ieee754_asin+0x210>
 800a5ce:	eea4 5b07 	vfma.f64	d5, d4, d7
 800a5d2:	eea5 9b07 	vfma.f64	d9, d5, d7
 800a5d6:	ee86 7b09 	vdiv.f64	d7, d6, d9
 800a5da:	eea0 0b07 	vfma.f64	d0, d0, d7
 800a5de:	e768      	b.n	800a4b2 <__ieee754_asin+0x3a>
 800a5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e4:	ed9d 5b00 	vldr	d5, [sp]
 800a5e8:	ed9d 2b00 	vldr	d2, [sp]
 800a5ec:	ee35 3b05 	vadd.f64	d3, d5, d5
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	ec43 2b17 	vmov	d7, r2, r3
 800a5f6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 800a628 <__ieee754_asin+0x1b0>
 800a5fa:	eeb1 5b47 	vneg.f64	d5, d7
 800a5fe:	eea5 8b07 	vfma.f64	d8, d5, d7
 800a602:	ee32 7b07 	vadd.f64	d7, d2, d7
 800a606:	ee88 2b07 	vdiv.f64	d2, d8, d7
 800a60a:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800a698 <__ieee754_asin+0x220>
 800a60e:	eea2 0b46 	vfms.f64	d0, d2, d6
 800a612:	ee93 0b04 	vfnms.f64	d0, d3, d4
 800a616:	eeb0 4b47 	vmov.f64	d4, d7
 800a61a:	eea5 4b06 	vfma.f64	d4, d5, d6
 800a61e:	ee30 0b44 	vsub.f64	d0, d0, d4
 800a622:	e7a7      	b.n	800a574 <__ieee754_asin+0xfc>
 800a624:	f3af 8000 	nop.w
 800a628:	33145c07 	.word	0x33145c07
 800a62c:	3c91a626 	.word	0x3c91a626
 800a630:	54442d18 	.word	0x54442d18
 800a634:	3ff921fb 	.word	0x3ff921fb
 800a638:	8800759c 	.word	0x8800759c
 800a63c:	7e37e43c 	.word	0x7e37e43c
 800a640:	0dfdf709 	.word	0x0dfdf709
 800a644:	3f023de1 	.word	0x3f023de1
 800a648:	7501b288 	.word	0x7501b288
 800a64c:	3f49efe0 	.word	0x3f49efe0
 800a650:	b5688f3b 	.word	0xb5688f3b
 800a654:	bfa48228 	.word	0xbfa48228
 800a658:	0e884455 	.word	0x0e884455
 800a65c:	3fc9c155 	.word	0x3fc9c155
 800a660:	55555555 	.word	0x55555555
 800a664:	3fc55555 	.word	0x3fc55555
 800a668:	03eb6f7d 	.word	0x03eb6f7d
 800a66c:	bfd4d612 	.word	0xbfd4d612
 800a670:	b12e9282 	.word	0xb12e9282
 800a674:	3fb3b8c5 	.word	0x3fb3b8c5
 800a678:	1b8d0159 	.word	0x1b8d0159
 800a67c:	bfe6066c 	.word	0xbfe6066c
 800a680:	9c598ac8 	.word	0x9c598ac8
 800a684:	40002ae5 	.word	0x40002ae5
 800a688:	1c8a2d4b 	.word	0x1c8a2d4b
 800a68c:	c0033a27 	.word	0xc0033a27
 800a690:	33145c07 	.word	0x33145c07
 800a694:	bc91a626 	.word	0xbc91a626
 800a698:	54442d18 	.word	0x54442d18
 800a69c:	3fe921fb 	.word	0x3fe921fb
 800a6a0:	3fefffff 	.word	0x3fefffff
 800a6a4:	3fdfffff 	.word	0x3fdfffff
 800a6a8:	3fef3332 	.word	0x3fef3332
 800a6ac:	00000000 	.word	0x00000000

0800a6b0 <__ieee754_atan2>:
 800a6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b2:	ee11 6a10 	vmov	r6, s2
 800a6b6:	ee11 0a90 	vmov	r0, s3
 800a6ba:	4273      	negs	r3, r6
 800a6bc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800a6c0:	4333      	orrs	r3, r6
 800a6c2:	4f6b      	ldr	r7, [pc, #428]	; (800a870 <__ieee754_atan2+0x1c0>)
 800a6c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a6c8:	42bb      	cmp	r3, r7
 800a6ca:	ed8d 0b00 	vstr	d0, [sp]
 800a6ce:	d80b      	bhi.n	800a6e8 <__ieee754_atan2+0x38>
 800a6d0:	e9dd c500 	ldrd	ip, r5, [sp]
 800a6d4:	f1cc 0100 	rsb	r1, ip, #0
 800a6d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6dc:	ea41 010c 	orr.w	r1, r1, ip
 800a6e0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800a6e4:	42b9      	cmp	r1, r7
 800a6e6:	d906      	bls.n	800a6f6 <__ieee754_atan2+0x46>
 800a6e8:	ed9d 7b00 	vldr	d7, [sp]
 800a6ec:	ee37 7b01 	vadd.f64	d7, d7, d1
 800a6f0:	ed8d 7b00 	vstr	d7, [sp]
 800a6f4:	e063      	b.n	800a7be <__ieee754_atan2+0x10e>
 800a6f6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800a6fa:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800a6fe:	4331      	orrs	r1, r6
 800a700:	d104      	bne.n	800a70c <__ieee754_atan2+0x5c>
 800a702:	b003      	add	sp, #12
 800a704:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a708:	f000 b8ba 	b.w	800a880 <atan>
 800a70c:	1784      	asrs	r4, r0, #30
 800a70e:	f004 0402 	and.w	r4, r4, #2
 800a712:	ea53 010c 	orrs.w	r1, r3, ip
 800a716:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800a71a:	d109      	bne.n	800a730 <__ieee754_atan2+0x80>
 800a71c:	2c02      	cmp	r4, #2
 800a71e:	d078      	beq.n	800a812 <__ieee754_atan2+0x162>
 800a720:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800a818 <__ieee754_atan2+0x168>
 800a724:	ed9d 6b00 	vldr	d6, [sp]
 800a728:	2c03      	cmp	r4, #3
 800a72a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800a72e:	e7df      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a730:	ea52 0106 	orrs.w	r1, r2, r6
 800a734:	d107      	bne.n	800a746 <__ieee754_atan2+0x96>
 800a736:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800a820 <__ieee754_atan2+0x170>
 800a73a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800a828 <__ieee754_atan2+0x178>
 800a73e:	2d00      	cmp	r5, #0
 800a740:	fe26 7b07 	vselge.f64	d7, d6, d7
 800a744:	e7d4      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a746:	42ba      	cmp	r2, r7
 800a748:	d120      	bne.n	800a78c <__ieee754_atan2+0xdc>
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d111      	bne.n	800a772 <__ieee754_atan2+0xc2>
 800a74e:	2c02      	cmp	r4, #2
 800a750:	d009      	beq.n	800a766 <__ieee754_atan2+0xb6>
 800a752:	2c03      	cmp	r4, #3
 800a754:	d00a      	beq.n	800a76c <__ieee754_atan2+0xbc>
 800a756:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800a830 <__ieee754_atan2+0x180>
 800a75a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800a838 <__ieee754_atan2+0x188>
 800a75e:	2c01      	cmp	r4, #1
 800a760:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800a764:	e7c4      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a766:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800a840 <__ieee754_atan2+0x190>
 800a76a:	e7c1      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a76c:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800a848 <__ieee754_atan2+0x198>
 800a770:	e7be      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a772:	2c02      	cmp	r4, #2
 800a774:	d04d      	beq.n	800a812 <__ieee754_atan2+0x162>
 800a776:	2c03      	cmp	r4, #3
 800a778:	d005      	beq.n	800a786 <__ieee754_atan2+0xd6>
 800a77a:	2c01      	cmp	r4, #1
 800a77c:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800a850 <__ieee754_atan2+0x1a0>
 800a780:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800a858 <__ieee754_atan2+0x1a8>
 800a784:	e7ec      	b.n	800a760 <__ieee754_atan2+0xb0>
 800a786:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800a818 <__ieee754_atan2+0x168>
 800a78a:	e7b1      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a78c:	42bb      	cmp	r3, r7
 800a78e:	d0d2      	beq.n	800a736 <__ieee754_atan2+0x86>
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	151b      	asrs	r3, r3, #20
 800a794:	2b3c      	cmp	r3, #60	; 0x3c
 800a796:	dc16      	bgt.n	800a7c6 <__ieee754_atan2+0x116>
 800a798:	2800      	cmp	r0, #0
 800a79a:	da01      	bge.n	800a7a0 <__ieee754_atan2+0xf0>
 800a79c:	333c      	adds	r3, #60	; 0x3c
 800a79e:	db17      	blt.n	800a7d0 <__ieee754_atan2+0x120>
 800a7a0:	ed9d 7b00 	vldr	d7, [sp]
 800a7a4:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800a7a8:	f000 f964 	bl	800aa74 <fabs>
 800a7ac:	f000 f868 	bl	800a880 <atan>
 800a7b0:	ed8d 0b00 	vstr	d0, [sp]
 800a7b4:	2c01      	cmp	r4, #1
 800a7b6:	d00e      	beq.n	800a7d6 <__ieee754_atan2+0x126>
 800a7b8:	2c02      	cmp	r4, #2
 800a7ba:	d014      	beq.n	800a7e6 <__ieee754_atan2+0x136>
 800a7bc:	b9f4      	cbnz	r4, 800a7fc <__ieee754_atan2+0x14c>
 800a7be:	ed9d 0b00 	vldr	d0, [sp]
 800a7c2:	b003      	add	sp, #12
 800a7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7c6:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a820 <__ieee754_atan2+0x170>
 800a7ca:	ed8d 7b00 	vstr	d7, [sp]
 800a7ce:	e7f1      	b.n	800a7b4 <__ieee754_atan2+0x104>
 800a7d0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a858 <__ieee754_atan2+0x1a8>
 800a7d4:	e7f9      	b.n	800a7ca <__ieee754_atan2+0x11a>
 800a7d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7da:	9901      	ldr	r1, [sp, #4]
 800a7dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a7e4:	e7eb      	b.n	800a7be <__ieee754_atan2+0x10e>
 800a7e6:	ed9d 6b00 	vldr	d6, [sp]
 800a7ea:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800a860 <__ieee754_atan2+0x1b0>
 800a7ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7f2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800a868 <__ieee754_atan2+0x1b8>
 800a7f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7fa:	e779      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a7fc:	ed9d 6b00 	vldr	d6, [sp]
 800a800:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800a860 <__ieee754_atan2+0x1b0>
 800a804:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a808:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800a868 <__ieee754_atan2+0x1b8>
 800a80c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a810:	e76e      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a812:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a868 <__ieee754_atan2+0x1b8>
 800a816:	e76b      	b.n	800a6f0 <__ieee754_atan2+0x40>
 800a818:	54442d18 	.word	0x54442d18
 800a81c:	c00921fb 	.word	0xc00921fb
 800a820:	54442d18 	.word	0x54442d18
 800a824:	3ff921fb 	.word	0x3ff921fb
 800a828:	54442d18 	.word	0x54442d18
 800a82c:	bff921fb 	.word	0xbff921fb
 800a830:	54442d18 	.word	0x54442d18
 800a834:	bfe921fb 	.word	0xbfe921fb
 800a838:	54442d18 	.word	0x54442d18
 800a83c:	3fe921fb 	.word	0x3fe921fb
 800a840:	7f3321d2 	.word	0x7f3321d2
 800a844:	4002d97c 	.word	0x4002d97c
 800a848:	7f3321d2 	.word	0x7f3321d2
 800a84c:	c002d97c 	.word	0xc002d97c
 800a850:	00000000 	.word	0x00000000
 800a854:	80000000 	.word	0x80000000
	...
 800a860:	33145c07 	.word	0x33145c07
 800a864:	3ca1a626 	.word	0x3ca1a626
 800a868:	54442d18 	.word	0x54442d18
 800a86c:	400921fb 	.word	0x400921fb
 800a870:	7ff00000 	.word	0x7ff00000

0800a874 <__ieee754_sqrt>:
 800a874:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a878:	4770      	bx	lr
 800a87a:	0000      	movs	r0, r0
 800a87c:	0000      	movs	r0, r0
	...

0800a880 <atan>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	eeb0 7b40 	vmov.f64	d7, d0
 800a886:	ee17 5a90 	vmov	r5, s15
 800a88a:	4b73      	ldr	r3, [pc, #460]	; (800aa58 <atan+0x1d8>)
 800a88c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a890:	429c      	cmp	r4, r3
 800a892:	dd13      	ble.n	800a8bc <atan+0x3c>
 800a894:	4b71      	ldr	r3, [pc, #452]	; (800aa5c <atan+0x1dc>)
 800a896:	429c      	cmp	r4, r3
 800a898:	dc03      	bgt.n	800a8a2 <atan+0x22>
 800a89a:	d107      	bne.n	800a8ac <atan+0x2c>
 800a89c:	ee10 3a10 	vmov	r3, s0
 800a8a0:	b123      	cbz	r3, 800a8ac <atan+0x2c>
 800a8a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a8a6:	eeb0 0b47 	vmov.f64	d0, d7
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800a9e8 <atan+0x168>
 800a8b0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800a9f0 <atan+0x170>
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800a8ba:	e7f4      	b.n	800a8a6 <atan+0x26>
 800a8bc:	4b68      	ldr	r3, [pc, #416]	; (800aa60 <atan+0x1e0>)
 800a8be:	429c      	cmp	r4, r3
 800a8c0:	dc11      	bgt.n	800a8e6 <atan+0x66>
 800a8c2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	dc0a      	bgt.n	800a8e0 <atan+0x60>
 800a8ca:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800a8ce:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800a9f8 <atan+0x178>
 800a8d2:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a8d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8de:	dce2      	bgt.n	800a8a6 <atan+0x26>
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8e4:	e013      	b.n	800a90e <atan+0x8e>
 800a8e6:	f000 f8c5 	bl	800aa74 <fabs>
 800a8ea:	4b5e      	ldr	r3, [pc, #376]	; (800aa64 <atan+0x1e4>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	dc4f      	bgt.n	800a990 <atan+0x110>
 800a8f0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a8f4:	429c      	cmp	r4, r3
 800a8f6:	dc41      	bgt.n	800a97c <atan+0xfc>
 800a8f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a8fc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a900:	2300      	movs	r3, #0
 800a902:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a906:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a90a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a90e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800aa00 <atan+0x180>
 800a912:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a916:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a91a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800aa08 <atan+0x188>
 800a91e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a922:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800aa10 <atan+0x190>
 800a926:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a92a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800aa18 <atan+0x198>
 800a92e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a932:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800aa20 <atan+0x1a0>
 800a936:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a93a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800aa28 <atan+0x1a8>
 800a93e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800aa30 <atan+0x1b0>
 800a942:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a946:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800aa38 <atan+0x1b8>
 800a94a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a94e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800aa40 <atan+0x1c0>
 800a952:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a956:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800aa48 <atan+0x1c8>
 800a95a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a95e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800aa50 <atan+0x1d0>
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a968:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a96c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a970:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a974:	d121      	bne.n	800a9ba <atan+0x13a>
 800a976:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a97a:	e794      	b.n	800a8a6 <atan+0x26>
 800a97c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a980:	2301      	movs	r3, #1
 800a982:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a986:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a98a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a98e:	e7be      	b.n	800a90e <atan+0x8e>
 800a990:	4b35      	ldr	r3, [pc, #212]	; (800aa68 <atan+0x1e8>)
 800a992:	429c      	cmp	r4, r3
 800a994:	dc0b      	bgt.n	800a9ae <atan+0x12e>
 800a996:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a99a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a99e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a9a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a9ac:	e7af      	b.n	800a90e <atan+0x8e>
 800a9ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a9b8:	e7a9      	b.n	800a90e <atan+0x8e>
 800a9ba:	4a2c      	ldr	r2, [pc, #176]	; (800aa6c <atan+0x1ec>)
 800a9bc:	492c      	ldr	r1, [pc, #176]	; (800aa70 <atan+0x1f0>)
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	441a      	add	r2, r3
 800a9c2:	440b      	add	r3, r1
 800a9c4:	ed93 5b00 	vldr	d5, [r3]
 800a9c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a9cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a9d0:	ed92 6b00 	vldr	d6, [r2]
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a9da:	bfb8      	it	lt
 800a9dc:	eeb1 7b47 	vneglt.f64	d7, d7
 800a9e0:	e761      	b.n	800a8a6 <atan+0x26>
 800a9e2:	bf00      	nop
 800a9e4:	f3af 8000 	nop.w
 800a9e8:	54442d18 	.word	0x54442d18
 800a9ec:	bff921fb 	.word	0xbff921fb
 800a9f0:	54442d18 	.word	0x54442d18
 800a9f4:	3ff921fb 	.word	0x3ff921fb
 800a9f8:	8800759c 	.word	0x8800759c
 800a9fc:	7e37e43c 	.word	0x7e37e43c
 800aa00:	e322da11 	.word	0xe322da11
 800aa04:	3f90ad3a 	.word	0x3f90ad3a
 800aa08:	24760deb 	.word	0x24760deb
 800aa0c:	3fa97b4b 	.word	0x3fa97b4b
 800aa10:	a0d03d51 	.word	0xa0d03d51
 800aa14:	3fb10d66 	.word	0x3fb10d66
 800aa18:	c54c206e 	.word	0xc54c206e
 800aa1c:	3fb745cd 	.word	0x3fb745cd
 800aa20:	920083ff 	.word	0x920083ff
 800aa24:	3fc24924 	.word	0x3fc24924
 800aa28:	5555550d 	.word	0x5555550d
 800aa2c:	3fd55555 	.word	0x3fd55555
 800aa30:	52defd9a 	.word	0x52defd9a
 800aa34:	bfadde2d 	.word	0xbfadde2d
 800aa38:	2c6a6c2f 	.word	0x2c6a6c2f
 800aa3c:	bfa2b444 	.word	0xbfa2b444
 800aa40:	af749a6d 	.word	0xaf749a6d
 800aa44:	bfb3b0f2 	.word	0xbfb3b0f2
 800aa48:	fe231671 	.word	0xfe231671
 800aa4c:	bfbc71c6 	.word	0xbfbc71c6
 800aa50:	9998ebc4 	.word	0x9998ebc4
 800aa54:	bfc99999 	.word	0xbfc99999
 800aa58:	440fffff 	.word	0x440fffff
 800aa5c:	7ff00000 	.word	0x7ff00000
 800aa60:	3fdbffff 	.word	0x3fdbffff
 800aa64:	3ff2ffff 	.word	0x3ff2ffff
 800aa68:	40037fff 	.word	0x40037fff
 800aa6c:	0800af08 	.word	0x0800af08
 800aa70:	0800af28 	.word	0x0800af28

0800aa74 <fabs>:
 800aa74:	ec51 0b10 	vmov	r0, r1, d0
 800aa78:	ee10 2a10 	vmov	r2, s0
 800aa7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa80:	ec43 2b10 	vmov	d0, r2, r3
 800aa84:	4770      	bx	lr

0800aa86 <matherr>:
 800aa86:	2000      	movs	r0, #0
 800aa88:	4770      	bx	lr
 800aa8a:	0000      	movs	r0, r0
 800aa8c:	0000      	movs	r0, r0
	...

0800aa90 <nan>:
 800aa90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa98 <nan+0x8>
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	7ff80000 	.word	0x7ff80000

0800aaa0 <_init>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	bf00      	nop
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr

0800aaac <_fini>:
 800aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaae:	bf00      	nop
 800aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab2:	bc08      	pop	{r3}
 800aab4:	469e      	mov	lr, r3
 800aab6:	4770      	bx	lr
